<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ArtificialArt</name>
    </assembly>
    <members>
        <member name="T:ArtificialArt.PathFinding.Node">
            <summary>
            Represents an AStar node
            </summary>
        </member>
        <member name="F:ArtificialArt.PathFinding.Node.previous">
            <summary>
            Previous node
            </summary>
        </member>
        <member name="F:ArtificialArt.PathFinding.Node.state">
            <summary>
            Node's state
            </summary>
        </member>
        <member name="F:ArtificialArt.PathFinding.Node.lowestCostFromSource">
            <summary>
            Lowest cost from source
            </summary>
        </member>
        <member name="F:ArtificialArt.PathFinding.Node.estimatedCostToDestination">
            <summary>
            Estimated cost to destination
            </summary>
        </member>
        <member name="M:ArtificialArt.PathFinding.Node.#ctor(ArtificialArt.PathFinding.Node,ArtificialArt.PathFinding.INodeState,System.Single,System.Single)">
            <summary>
            Build AStar node
            </summary>
            <param name="previous">previous node</param>
            <param name="state">node's state</param>
            <param name="lowestCostFromSource">lowest cost from source</param>
            <param name="estimatedCostToDestination">estimated cost to destination</param>
        </member>
        <member name="M:ArtificialArt.PathFinding.Node.Update(ArtificialArt.PathFinding.Node,System.Single)">
            <summary>
            Update previous node and lowest cost from source
            </summary>
            <param name="previous">previous node</param>
            <param name="lowestCostFromSource">lowest cost from source</param>
        </member>
        <member name="P:ArtificialArt.PathFinding.Node.Previous">
            <summary>
            Previous node
            </summary>
        </member>
        <member name="P:ArtificialArt.PathFinding.Node.State">
            <summary>
            Node's state
            </summary>
        </member>
        <member name="P:ArtificialArt.PathFinding.Node.LowestCostFromSource">
            <summary>
            Lowest cost from source
            </summary>
        </member>
        <member name="P:ArtificialArt.PathFinding.Node.EstimatedCostToDestination">
            <summary>
            Estimated cost to destination
            </summary>
        </member>
        <member name="P:ArtificialArt.PathFinding.Node.EstimatedTotalCost">
            <summary>
            Estimated total cost
            </summary>
        </member>
        <member name="T:ArtificialArt.Lyrics.ILyricSongFactory">
            <summary>
            Lyric song factory
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.ILyricSongFactory.Build">
            <summary>
            Build lyrics
            </summary>
            <returns>lyrics</returns>
        </member>
        <member name="P:ArtificialArt.Lyrics.ILyricSongFactory.LanguageCode">
            <summary>
            Language code
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.WordList.internalHash">
            <summary>
            Will contain the words
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordList.ContainsAsNegativeOrPositiveForm(System.String)">
            <summary>
            Whether word is in word list as negative or positive form
            </summary>
            <param name="word">word</param>
            <returns>Whether word is in word list as negative or positive form</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordList.ContainsExact(System.String)">
            <summary>
            Whether word is in word list as exact form
            </summary>
            <param name="word">word</param>
            <returns>Whether word is in word list as exact form</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.LetterPhoneticDistanceManager">
            <summary>
            Manages phonetic distance between letters
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LetterPhoneticDistanceManager.sameLetter">
            <summary>
            When letters are identical
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LetterPhoneticDistanceManager.sameLetterGroup">
            <summary>
            When letters are from same group (for instance: v and f, p and b, é and è, j and y)
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LetterPhoneticDistanceManager.bothVowelOrConsonant">
            <summary>
            When letters are both consonant or vowels
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LetterPhoneticDistanceManager.longestDistanceLetter">
            <summary>
            Longest possible distance between letters
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LetterPhoneticDistanceManager.longestDistanceUndefined">
            <summary>
            Longest possible distance between undefined characters
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.LetterPhoneticDistanceManager.GetPhoneticDistance(System.Char,System.Char)">
            <summary>
            Get phonetic distance between two letters
            </summary>
            <param name="letter1">letter 1</param>
            <param name="letter2">letter 2</param>
            <returns>phonetic distance</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.UI.OutputDeviceDialog">
            <summary>
            Output device dialog
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.UI.OutputDeviceDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.OutputDeviceDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.OutputDeviceDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.UI.OutputDeviceDialog.outputDeviceID">
            <summary>
            Output device id
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.OutputDeviceDialog.#ctor">
            <summary>
            Build Output device dialog
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.OutputDeviceDialog.OnShown(System.EventArgs)">
            <summary>
            On shown
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.OutputDeviceDialog.cancelButton_Click(System.Object,System.EventArgs)">
            <summary>
            Cancel button click
            </summary>
            <param name="sender">sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.UI.OutputDeviceDialog.OutputDeviceID">
            <summary>
            Output device id
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.UI.DeviceDialog">
            <summary>
            Device dialog
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.UI.DeviceDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.DeviceDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.DeviceDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.UI.DeviceDialog.inputDeviceID">
            <summary>
            Input device id
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.UI.DeviceDialog.outputDeviceID">
            <summary>
            Output device id
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.DeviceDialog.#ctor">
            <summary>
            Device dialog
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.DeviceDialog.OnShown(System.EventArgs)">
            <summary>
            When shown
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.DeviceDialog.okButton_Click(System.Object,System.EventArgs)">
            <summary>
            Ok button click
            </summary>
            <param name="sender">sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.DeviceDialog.cancelButton_Click(System.Object,System.EventArgs)">
            <summary>
            Cancel button click
            </summary>
            <param name="sender">sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.UI.DeviceDialog.InputDeviceID">
            <summary>
            Input device id
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.UI.DeviceDialog.OutputDeviceID">
            <summary>
            Output device id
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.SysRealtimeType">
            <summary>
            Defines constants representing the various system realtime message types.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeType.Clock">
            <summary>
            Represents the clock system realtime type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeType.Tick">
            <summary>
            Represents the tick system realtime type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeType.Start">
            <summary>
            Represents the start system realtime type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeType.Continue">
            <summary>
            Represents the continue system realtime type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeType.Stop">
            <summary>
            Represents the stop system realtime type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeType.ActiveSense">
            <summary>
            Represents the active sense system realtime type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeType.Reset">
            <summary>
            Represents the reset system realtime type.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.SysRealtimeMessage">
            <summary>
            Represents MIDI system realtime messages.
            </summary>
            <remarks>
            System realtime messages are MIDI messages that are primarily concerned 
            with controlling and synchronizing MIDI devices. 
            </remarks>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.ShortMessage">
            <summary>
            Represents the basic class for all MIDI short messages.
            </summary>
            <remarks>
            MIDI short messages represent all MIDI messages except meta messages
            and system exclusive messages. This includes channel messages, system
            realtime messages, and system common messages.
            </remarks>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.IMidiMessage">
            <summary>
            Represents the basic functionality for all MIDI messages.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.IMidiMessage.GetBytes">
            <summary>
            Gets a byte array representation of the MIDI message.
            </summary>
            <returns>
            A byte array representation of the MIDI message.
            </returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.IMidiMessage.Status">
            <summary>
            Gets the MIDI message's status value.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.IMidiMessage.MessageType">
            <summary>
            Gets the MIDI event's type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ShortMessage.DataMaxValue">
            <summary>
            Data max value
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ShortMessage.StatusMaxValue">
            <summary>
            Status max value
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ShortMessage.DataMask">
            <summary>
            Data mask
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ShortMessage.msg">
            <summary>
            Message
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ShortMessage.GetBytes">
            <summary>
            Get bytes
            </summary>
            <returns>bytes</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.ShortMessage.Message">
            <summary>
            Gets the short message as a packed integer.
            </summary>
            <remarks>
            The message is packed into an integer value with the low-order byte
            of the low-word representing the status value. The high-order byte
            of the low-word represents the first data value, and the low-order
            byte of the high-word represents the second data value.
            </remarks>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.ShortMessage.Status">
            <summary>
            Gets the messages's status value.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.ShortMessage.MessageType">
            <summary>
            Message type
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeMessage.StartMessage">
            <summary>
            The instance of the system realtime start message.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeMessage.ContinueMessage">
            <summary>
            The instance of the system realtime continue message.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeMessage.StopMessage">
            <summary>
            The instance of the system realtime stop message.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeMessage.ClockMessage">
            <summary>
            The instance of the system realtime clock message.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeMessage.TickMessage">
            <summary>
            The instance of the system realtime tick message.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeMessage.ActiveSenseMessage">
            <summary>
            The instance of the system realtime active sense message.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeMessage.ResetMessage">
            <summary>
            The instance of the system realtime reset message.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysRealtimeMessage.GetHashCode">
            <summary>
            Returns a value for the current SysRealtimeMessage suitable for use in 
            hashing algorithms.
            </summary>
            <returns>
            A hash code for the current SysRealtimeMessage.
            </returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysRealtimeMessage.Equals(System.Object)">
            <summary>
            Determines whether two SysRealtimeMessage instances are equal.
            </summary>
            <param name="obj">
            The SysRealtimeMessage to compare with the current SysRealtimeMessage.
            </param>
            <returns>
            <b>true</b> if the specified SysRealtimeMessage is equal to the current 
            SysRealtimeMessage; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysRealtimeMessage.SysRealtimeType">
            <summary>
            Gets the SysRealtimeType.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysRealtimeMessage.MessageType">
            <summary>
            Gets the MessageType.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.InvalidShortMessageEventArgs">
            <summary>
            Invalid short message arguments
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InvalidShortMessageEventArgs.#ctor(System.Int32)">
            <summary>
            Build Invalid short message arguments
            </summary>
            <param name="message">message</param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.InvalidShortMessageEventArgs.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.IClock">
            <summary>
            Represents functionality for generating events for driving Sequence playback.
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.IClock.Tick">
            <summary>
            Occurs when an IClock generates a tick.
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.IClock.Started">
            <summary>
            Occurs when an IClock starts generating Ticks.
            </summary>
            <remarks>
            When an IClock is started, it resets itself and generates ticks to
            drive playback from the beginning of the Sequence.
            </remarks>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.IClock.Continued">
            <summary>
            Occurs when an IClock continues generating Ticks.
            </summary>
            <remarks>
            When an IClock is continued, it generates ticks to drive playback 
            from the current position within the Sequence.
            </remarks>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.IClock.Stopped">
            <summary>
            Occurs when an IClock is stopped.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.IClock.IsRunning">
            <summary>
            Gets a value indicating whether the IClock is running.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.IClock.Ticks">
            <summary>
            Ticks
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.ChannelMemory">
            <summary>
            Remembers association for instrument and midi channels
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.MetaRiffPack">
            <summary>
            Set of joined metaRiffs
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.MetaRiffPack.metaRiffList">
            <summary>
            Internal list of metaRiffs
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.MetaRiffPack.overridenScale">
            <summary>
            Facultative scale to override other scales
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.MetaRiffPack.isOverrideKey">
            <summary>
            Whether we override key
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.MetaRiffPack.forcedModulationOffset">
            <summary>
            Facultative key to override (only works if IsOverrideKey)
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiffPack.BuildRiffPackBuilder(System.Random,System.Int32)">
            <summary>
            Create a riffPackBuilder (object to create riffPacks deterministically)
            </summary>
            <param name="random">random number generator</param>
            <param name="desiredLength">desired bar count</param>
            <returns>riffPackBuilder (object to create riffPacks deterministically)</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiffPack.GetDescriptionTagList">
            <summary>
            Returns description tag list from joined metaRiffs
            </summary>
            <returns>description tag list from joined metaRiffs</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiffPack.ContainsMetaRiffType(System.Type)">
            <summary>
            Whether metaRiffPack contains specified metaRiff type
            </summary>
            <param name="metaRiffType">metaRiff type</param>
            <returns>Whether metaRiffPack contains specified metaRiff type</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiffPack.GetMatchedMidPitch(System.Int32,System.Int32)">
            <summary>
            Return a pitch position that matches the other (same music key, but may not be same octave)
            </summary>
            <param name="toMatch">pitch to be matched</param>
            <param name="toMatchWith">pitch to match with</param>
            <returns>matched pitch</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiffPack.op_Addition(ArtificialArt.Audio.Midi.Generator.MetaRiffPack,ArtificialArt.Audio.Midi.Generator.MetaRiffPack)">
            <summary>
            Join two metaRiff packs
            </summary>
            <param name="metaRiffPack1">metaRiff packs 1</param>
            <param name="metaRiffPack2">metaRiff packs 2</param>
            <returns></returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiffPack.GetMetaRiffListLazy">
            <summary>
            Build metaRiff list if not built yet
            </summary>
            <returns>metaRiff list</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiffPack.BuildMetaRiffList">
            <summary>
            Build matched metaRiff list (metaRiffs must be musically compatible among metaRiffPack)
            </summary>
            <returns>metaRiff list</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiffPack.GetEnumerator">
            <summary>
            Cycle through list of metaRiffs
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiffPack.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Cycle through list of metaRiffs
            </summary>
            <returns></returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.MetaRiffPack.Count">
            <summary>
            How many metaRiffs in this
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.MetaRiffPack.OverridenScale">
            <summary>
            Facultative scale to override other scales
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.MetaRiffPack.ForcedModulationOffset">
            <summary>
            Facultative key to override (only works if IsOverrideKey)
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.MetaRiffPack.IsOverrideKey">
            <summary>
            Whether we override key
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.MetaRiff">
            <summary>
            Creates riff with stored construction settings
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.MetaRiff.rythmPatternBuilderTimeSplit">
            <summary>
            Builds rythm patterns by splitting notes
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiff.BuildPreferedMidiInstrument(System.Random)">
            <summary>
            Build prefered midi instrument
            </summary>
            <param name="random">random number generator</param>
            <returns>selected midi instrument number</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiff.BuildMinimumVelocity(System.Random)">
            <summary>
            Build Minimum velocity
            </summary>
            <param name="random">random number generator</param>
            <returns>Minimum velocity</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiff.BuildMaximumVelocity(System.Random)">
            <summary>
            Build Maximum velocity
            </summary>
            <param name="random">random number generator</param>
            <returns>Maximum velocity</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiff.BuildPreferedMidPitch(System.Random)">
            <summary>
            Build prefered mid pitch
            </summary>
            <param name="random">Random number generator</param>
            <returns>prefered mid pitch (0 to 127)</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiff.BuildPreferedRadius(System.Random)">
            <summary>
            Build prefered radius
            </summary>
            <param name="random">random number generator</param>
            <returns>prefered radius</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiff.BuildPreferedTempo(System.Random)">
            <summary>
            Build prefered tempo
            </summary>
            <param name="random">random number generator</param>
            <returns>prefered tempo</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiff.BuildScaleChooser">
            <summary>
            Returns scale chooser
            </summary>
            <returns>scale chooser</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiff.BuildPitchOrVelocityWave(System.Random)">
            <summary>
            Builds pitch waves or velocity waves
            </summary>
            <param name="random">random number generator</param>
            <returns>Pitch wave or velocity wave</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiff.BuildRythmPattern(System.Random)">
            <summary>
            Builds a rythm pattern
            </summary>
            <param name="random">random number generator</param>
            <returns>rythm pattern</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiff.GetDescriptionTagList">
            <summary>
            Build a list of description tags
            </summary>
            <returns>list of description tags</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiff.op_Addition(ArtificialArt.Audio.Midi.Generator.MetaRiff,ArtificialArt.Audio.Midi.Generator.MetaRiffPack)">
            <summary>
            Join a metaRiff with a metaRiff Pack
            </summary>
            <param name="metaRiff1">metaRiff</param>
            <param name="metaRiffPack2">metaRiff Pack</param>
            <returns>Joined metaRiff Pack</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiff.op_Addition(ArtificialArt.Audio.Midi.Generator.MetaRiffPack,ArtificialArt.Audio.Midi.Generator.MetaRiff)">
            <summary>
            Join a metaRiff pack with a metaRiff
            </summary>
            <param name="metaRiffPack2">metaRiff pack</param>
            <param name="metaRiff1">metaRiff</param>
            <returns>Joined metaRiff Pack</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiff.Build(System.Random)">
            <summary>
            Returns a riff builder that can be used to create riffs in a deterministic way
            </summary>
            <param name="random">random number generator</param>
            <returns>riff builder that can be used to create riffs in a deterministic way</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.MetaRiff.IsDrum">
            <summary>
            Whether this metaRiff is used for drums
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.MetaRiff.IsUltraRigidDrum">
            <summary>
            Whether this metaRiff is used for ultra rigid drums (snare, kick etc...)
            </summary>
        </member>
        <member name="T:ArtificialArt.WebServices.WebBot">
            <summary>
            Used to get websites HTML content
            </summary>
        </member>
        <member name="F:ArtificialArt.WebServices.WebBot.userAgent">
            <summary>
            Default user agent
            </summary>
        </member>
        <member name="F:ArtificialArt.WebServices.WebBot.webClient">
            <summary>
            Web client
            </summary>
        </member>
        <member name="M:ArtificialArt.WebServices.WebBot.#ctor">
            <summary>
            Create a web bot
            </summary>
        </member>
        <member name="M:ArtificialArt.WebServices.WebBot.GetPageContent(System.String)">
            <summary>
            Get page content from URL
            </summary>
            <param name="url">url</param>
            <returns>page content from URL</returns>
        </member>
        <member name="M:ArtificialArt.WebServices.WebBot.GetPageContent(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Get page content from URL with post data
            </summary>
            <param name="url">url</param>
            <param name="postData">post data</param>
            <returns>page content</returns>
        </member>
        <member name="T:ArtificialArt.PathFinding.INodeState">
            <summary>
            Represents a node's state
            </summary>
        </member>
        <member name="P:ArtificialArt.PathFinding.INodeState.IsDestination">
            <summary>
            Whether node state is at destination
            </summary>
        </member>
        <member name="T:ArtificialArt.Lyrics.ThemeLoader">
            <summary>
            This class is used to load themes from text files
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.ThemeLoader.themeCache">
            <summary>
            Theme cache
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.ThemeLoader.themeList">
            <summary>
            List of themes
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.ThemeLoader.sortedThemeNameList">
            <summary>
            List of theme name ordered by name
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeLoader.#ctor">
            <summary>
            Create theme loader
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeLoader.#ctor(System.String)">
            <summary>
            Constructor, we load the themes from file
            <param name="languageCode">language code</param>
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeLoader.Load(System.String)">
            <summary>
            Load theme
            </summary>
            <param name="themeName">theme's name</param>
            <returns>loaded theme</returns>
        </member>
        <member name="P:ArtificialArt.Lyrics.ThemeLoader.ThemeNameList">
            <summary>
            Theme name list
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.ThemeLoader.ThemeList">
            <summary>
            Theme list
            </summary>
        </member>
        <member name="T:ArtificialArt.Logic.AOrBImplyCManager">
            <summary>
            Manages stuff like A||B->C, therefore A->C, B->C
            </summary>
        </member>
        <member name="M:ArtificialArt.Logic.AOrBImplyCManager.BuildAOrBImplyC(ArtificialArt.Parsing.TreeExpression,ArtificialArt.Logic.LogicDerivation)">
            <summary>
            Build stuff like A||B->C, therefore A->C, B->C
            </summary>
            <param name="proposition">proposition to derive from</param>
            <param name="logicDerivation">logic derivation to expand</param>
        </member>
        <member name="T:ArtificialArt.Linguistics.WordSequenceReplacer">
            <summary>
            Manages replace of word sequences
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.WordSequenceReplacer.joinedDelimiterList">
            <summary>
            Jointed delimiter list
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordSequenceReplacer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordSequenceReplacer.ReplaceWordSequence(System.String,System.String,System.String)">
            <summary>
            Replace a word sequence in proposition
            </summary>
            <param name="originalProposition">original proposition (case insensitive)</param>
            <param name="fromSequence">from word sequence (case insensitive, delimiter insensitive)</param>
            <param name="toSequence">from word sequence (case insensitive, delimiter insensitive)</param>
            <returns>proposition with replaced word sequences</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordSequenceReplacer.ReplaceWordSequence(System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Replace word sequence
            </summary>
            <param name="original">original proposition</param>
            <param name="startWordSequence">begining of the word sequence</param>
            <param name="midWordCount">how many unknown words in middle of sequence to replace</param>
            <param name="endWordSequence">ending of word sequence</param>
            <param name="startReplace">begining of replaced word sequence</param>
            <param name="endReplace">ending of replaced word sequence</param>
            <returns>Text with replaced word sequences</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordSequenceReplacer.BuildWordSequencePattern(ArtificialArt.Linguistics.WordStream)">
            <summary>
            Regex pattern matching word sequence with any kind of delimiter
            </summary>
            <param name="wordStream">wordStream</param>
            <returns>Regex pattern matching word sequence with any kind of delimiter</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.SynonymManager">
            <summary>
            Manages operations and analysys on synonyms and antonyms
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.SynonymManager.xmlMatrixSaverLoader">
            <summary>
            Manages saving and loading matrixes
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.SynonymManager._synonymMatrix">
            <summary>
            Matrix that will contain synonyms
            Don't use directly, use synonymMatrix instead
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.SynonymManager._antonymMatrix">
            <summary>
            Matrix that will contain antonyms
            Don't use directly, use antonymMatrix instead
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.SynonymManager.InvertAntonym(System.String,System.Int32)">
            <summary>
            Invert words to their antonym in proposition
            </summary>
            <param name="originalProposition">original proposition</param>
            <param name="desiredOccurenceReplacement">desired occurence replacement</param>
            <returns>Proposition with inverted antonym</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.SynonymManager.ContainsAntonym(System.String)">
            <summary>
            Whether there is a know antonym to replace a word in original proposition
            </summary>
            <param name="originalProposition">original proposition</param>
            <returns>Whether there is a know antonym to replace a word in original proposition</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.SynonymManager.TryFindBestSynonym(System.String)">
            <summary>
            Try find best synonym for provided word or return null if none found
            </summary>
            <param name="originalWord">original word</param>
            <returns>Try find an synonym for provided word or return null if none found</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.SynonymManager.TryFindBestAntonym(System.String)">
            <summary>
            Try find best antonym for provided word or return null if none found
            </summary>
            <param name="originalWord">original word</param>
            <returns>Try find an antonym for provided word or return null if none found</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.SynonymManager.TryConvertTextToAntonym(System.String)">
            <summary>
            Try replace each word of text to a valid antonym
            </summary>
            <param name="text">text</param>
            <returns>text with replaced each word of text to a valid antonym</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.SynonymManager.TryConvertTextToSynonym(System.String)">
            <summary>
            Try replace each word of text to a valid synonym
            </summary>
            <param name="text">text</param>
            <returns>text with replaced each word of text to a valid synonym</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.SynonymManager.TryFindBestAntonymOrSynonym(System.String,ArtificialArt.Markov.Matrix)">
            <summary>
            Try find best antonym or synonym for provided word or return null if none found
            </summary>
            <param name="originalWord">original word</param>
            <param name="matrix">matrix to use</param>
            <returns>Try find an synonym or antonym for provided word or return null if none found</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.SynonymManager.TryConvertTextToAntonymOrAntonym(System.String,ArtificialArt.Markov.Matrix)">
            <summary>
            Try replace each word in text with a synonym or antonym depending on provided matrix
            </summary>
            <param name="text">original text</param>
            <param name="synonymOrAntonymMatrix">provided matrix</param>
            <returns>text for which each word is replaced with a synonym or antonym depending on provided matrix</returns>
        </member>
        <member name="P:ArtificialArt.Linguistics.English.SynonymManager.synonymMatrix">
            <summary>
            Matrix that will contain synonyms
            </summary>
        </member>
        <member name="P:ArtificialArt.Linguistics.English.SynonymManager.antonymMatrix">
            <summary>
            Matrix that will contain antonyms
            </summary>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.QuestionManagerByEndingWord">
            <summary>
            Manages questions that are questions because they end with a special word for questions
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionManagerByEndingWord.IsQuestion(System.String)">
            <summary>
            Whether question was detected because of the ending word
            </summary>
            <param name="originalProposition">proposition</param>
            <returns>Whether question was detected because of the ending word</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionManagerByEndingWord.RemoveQuestion(System.String)">
            <summary>
            Remove question from proposition
            </summary>
            <param name="proposition">proposition</param>
            <returns>proposition with removed question</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.MetaType">
            <summary>
            Represents MetaMessage types.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaType.SequenceNumber">
            <summary>
            Represents sequencer number type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaType.Text">
            <summary>
            Represents the text type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaType.Copyright">
            <summary>
            Represents the copyright type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaType.TrackName">
            <summary>
            Represents the track name type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaType.InstrumentName">
            <summary>
            Represents the instrument name type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaType.Lyric">
            <summary>
            Represents the lyric type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaType.Marker">
            <summary>
            Represents the marker type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaType.CuePoint">
            <summary>
            Represents the cue point type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaType.ProgramName">
            <summary>
            Represents the program name type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaType.DeviceName">
            <summary>
            Represents the device name type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaType.EndOfTrack">
            <summary>
            Represents then end of track type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaType.Tempo">
            <summary>
            Represents the tempo type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaType.SmpteOffset">
            <summary>
            Represents the Smpte offset type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaType.TimeSignature">
            <summary>
            Represents the time signature type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaType.KeySignature">
            <summary>
            Represents the key signature type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaType.ProprietaryEvent">
            <summary>
            Represents the proprietary event type.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.MetaMessage">
            <summary>
            Represents MIDI meta messages.
            </summary>
            <remarks>
            Meta messages are MIDI messages that are stored in MIDI files. These
            messages are not sent or received via MIDI but are read and 
            interpretted from MIDI files. They provide information that describes 
            a MIDI file's properties. For example, tempo changes are implemented
            using meta messages.
            </remarks>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaMessage.Shift">
            <summary>
            The amount to shift data bytes when calculating the hash code.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaMessage.TempoLength">
            <summary>
            Length in bytes for tempo meta message data.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaMessage.SmpteOffsetLength">
            <summary>
            Length in bytes for SMPTE offset meta message data.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaMessage.TimeSigLength">
            <summary>
            Length in bytes for time signature meta message data.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaMessage.KeySigLength">
            <summary>
            Length in bytes for key signature meta message data.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaMessage.EndOfTrackMessage">
            <summary>
            End of track meta message.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MetaMessage.#ctor(ArtificialArt.Audio.Midi.MetaType,System.Byte[])">
            <summary>
            Initializes a new instance of the MetaMessage class.
            </summary>
            <param name="type">
            The type of MetaMessage.
            </param>
            <param name="data">
            The MetaMessage data.
            </param>
            <exception cref="T:System.ArgumentException">
            The length of the MetaMessage is not valid for the MetaMessage type.
            </exception>
            <remarks>
            Each MetaMessage has type and length properties. For certain 
            types, the length of the message data must be a specific value. For
            example, tempo messages must have a data length of exactly three. 
            Some MetaMessage types can have any data length. Text messages are
            an example of a MetaMessage that can have a variable data length.
            When a MetaMessage is created, the length of the data is checked
            to make sure that it is valid for the specified type. If it is not,
            an exception is thrown. 
            </remarks>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MetaMessage.GetBytes">
            <summary>
            Gets a copy of the data bytes for this meta message.
            </summary>
            <returns>
            A copy of the data bytes for this meta message.
            </returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MetaMessage.GetHashCode">
            <summary>
            Returns a value for the current MetaMessage suitable for use in 
            hashing algorithms.
            </summary>
            <returns>
            A hash code for the current MetaMessage.
            </returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MetaMessage.Equals(System.Object)">
            <summary>
            Determines whether two MetaMessage instances are equal.
            </summary>
            <param name="obj">
            The MetaMessage to compare with the current MetaMessage.
            </param>
            <returns>
            <b>true</b> if the specified MetaMessage is equal to the current 
            MetaMessage; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MetaMessage.ValidateDataLength(ArtificialArt.Audio.Midi.MetaType,System.Int32)">
            <summary>
            Validates data length.
            </summary>
            <param name="type">
            The MetaMessage type.
            </param>
            <param name="length">
            The length of the MetaMessage data.
            </param>
            <returns>
            <b>true</b> if the data length is valid for this type of 
            MetaMessage; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MetaMessage.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than zero or greater than or equal to Length.
            </exception>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MetaMessage.Length">
            <summary>
            Gets the length of the meta message.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MetaMessage.MetaType">
            <summary>
            Gets the type of meta message.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MetaMessage.Status">
            <summary>
            Gets the status value.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MetaMessage.MessageType">
            <summary>
            Gets the MetaMessage's MessageType.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.InputDevice">
            <summary>
            Input device
            </summary>
            <summary>
            Represents a MIDI device capable of receiving MIDI events.
            </summary>
            <summary>
            Input device
            </summary>
            <summary>
            Input device
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.MidiDevice">
            <summary>
            The base class for all MIDI devices.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiDevice.SizeOfMidiHeader">
            <summary>
            Size of midi header structure
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiDevice.#ctor(System.Int32)">
            <summary>
            Midi device
            </summary>
            <param name="deviceID">device id</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiDevice.Connect(System.Int32,System.Int32)">
            <summary>
            Connects a MIDI InputDevice to a MIDI thru or OutputDevice, or 
            connects a MIDI thru device to a MIDI OutputDevice. 
            </summary>
            <param name="handleA">
            Handle to a MIDI InputDevice or a MIDI thru device (for thru 
            devices, this handle must belong to a MIDI OutputDevice).
            </param>
            <param name="handleB">
            Handle to the MIDI OutputDevice or thru device.
            </param>
            <exception cref="T:Sanford.Multimedia.DeviceException">
            If an error occurred while connecting the two devices.
            </exception>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiDevice.Disconnect(System.Int32,System.Int32)">
            <summary>
            Disconnects a MIDI InputDevice from a MIDI thru or OutputDevice, or 
            disconnects a MIDI thru device from a MIDI OutputDevice. 
            </summary>
            <param name="handleA">
            Handle to a MIDI InputDevice or a MIDI thru device.
            </param>
            <param name="handleB">
            Handle to the MIDI OutputDevice to be disconnected. 
            </param>
            <exception cref="T:Sanford.Multimedia.DeviceException">
            If an error occurred while disconnecting the two devices.
            </exception>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InputDevice.OnChannelMessageReceived(ArtificialArt.Audio.Midi.ChannelMessageEventArgs)">
            <summary>
            When channel message is received
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InputDevice.OnSysExMessageReceived(ArtificialArt.Audio.Midi.SysExMessageEventArgs)">
            <summary>
            When system ex message received
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InputDevice.OnSysCommonMessageReceived(ArtificialArt.Audio.Midi.SysCommonMessageEventArgs)">
            <summary>
            When system common message received
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InputDevice.OnSysRealtimeMessageReceived(ArtificialArt.Audio.Midi.SysRealtimeMessageEventArgs)">
            <summary>
            On system realtime message received
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InputDevice.OnInvalidShortMessageReceived(ArtificialArt.Audio.Midi.InvalidShortMessageEventArgs)">
            <summary>
            On invalid short message received
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InputDevice.OnInvalidSysExMessageReceived(ArtificialArt.Audio.Midi.InvalidSysExMessageEventArgs)">
            <summary>
            On invalid system ex message received
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InputDevice.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">whether is disposing</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InputDevice.Close">
            <summary>
            Close
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InputDevice.StartRecording">
            <summary>
            Start recording
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InputDevice.StopRecording">
            <summary>
            Stop recording
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InputDevice.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InputDevice.GetDeviceCapabilities(System.Int32)">
            <summary>
            Get device capabilities
            </summary>
            <param name="deviceID">device id</param>
            <returns>Midi in caps</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InputDevice.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InputDevice.AddSysExBuffer">
            <summary>
            Add sys ex buffer
            </summary>
            <returns>result</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InputDevice.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the InputDevice class with the 
            specified device ID.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InputDevice.Finalize">
            <summary>
            Disposed
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.InputDevice.ChannelMessageReceived">
            <summary>
            Channel message received
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.InputDevice.SysExMessageReceived">
            <summary>
            System ex message received
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.InputDevice.SysCommonMessageReceived">
            <summary>
            System common message received
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.InputDevice.SysRealtimeMessageReceived">
            <summary>
            System realtime message received
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.InputDevice.InvalidShortMessageReceived">
            <summary>
            Invalid short message received
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.InputDevice.InvalidSysExMessageReceived">
            <summary>
            Invalid system ex message received
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.InputDevice.Handle">
            <summary>
            Handle
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.InputDevice.SysExBufferSize">
            <summary>
            System ex buffer size
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.InputDevice.DeviceCount">
            <summary>
            Device count
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.IRiff">
            <summary>
            Riff or RiffPack
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.IRiff.Tempo">
            <summary>
            Tempo
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.MetaSongException">
            <summary>
            Exception thrown when building metaSong fails
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaSongException.#ctor(System.String)">
            <summary>
            Exception thrown when building metaSong fails
            </summary>
            <param name="message">exception's message</param>
        </member>
        <member name="T:ArtificialArt.WebServices.GoogleChatBot">
            <summary>
            Google bot
            </summary>
        </member>
        <member name="T:ArtificialArt.WebServices.AbstractSearchChatBot">
            <summary>
            Google, bing, yahoo search bots
            </summary>
        </member>
        <member name="M:ArtificialArt.WebServices.AbstractSearchChatBot.TryExpandString(System.String,System.Random)">
            <summary>
            Try expand string using search bot (add prefex and suffix to search criteria)
            If fails, return original string
            </summary>
            <param name="searchCriteria">search criteria</param>
            <param name="random">random number generator</param>
            <returns>Expanded string using search bot (add prefex and suffix to search criteria)</returns>
        </member>
        <member name="M:ArtificialArt.WebServices.AbstractSearchChatBot.Search(System.String)">
            <summary>
            Start a new search
            </summary>
            <param name="searchCriteria">search criteria</param>
        </member>
        <member name="M:ArtificialArt.WebServices.AbstractSearchChatBot.GetEnumerator">
            <summary>
            Search results
            </summary>
            <returns>Search results</returns>
        </member>
        <member name="M:ArtificialArt.WebServices.AbstractSearchChatBot.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Search results
            </summary>
            <returns>Search results</returns>
        </member>
        <member name="P:ArtificialArt.WebServices.AbstractSearchChatBot.Count">
            <summary>
            Count search results
            </summary>
        </member>
        <member name="F:ArtificialArt.WebServices.GoogleChatBot.webBot">
            <summary>
            Web bot used to get page contents
            </summary>
        </member>
        <member name="F:ArtificialArt.WebServices.GoogleChatBot.htmlTag">
            <summary>
            Html tag regex
            </summary>
        </member>
        <member name="F:ArtificialArt.WebServices.GoogleChatBot.result">
            <summary>
            Result list
            </summary>
        </member>
        <member name="M:ArtificialArt.WebServices.GoogleChatBot.Search(System.String)">
            <summary>
            Start a new search
            </summary>
            <param name="searchCriteria">search criteria</param>
        </member>
        <member name="M:ArtificialArt.WebServices.GoogleChatBot.GetEnumerator">
            <summary>
            Search results
            </summary>
            <returns>Search results</returns>
        </member>
        <member name="P:ArtificialArt.WebServices.GoogleChatBot.Count">
            <summary>
            Count search results
            </summary>
        </member>
        <member name="T:ArtificialArt.Markov.WordMatrix">
            <summary>
            Word markov matrix (key: pair of 2 word, value: next word)
            </summary>
        </member>
        <member name="T:ArtificialArt.Markov.Matrix">
            <summary>
            Represents a matrix
            key: strings
            value: float
            </summary>
        </member>
        <member name="F:ArtificialArt.Markov.Matrix.normalData">
            <summary>
            Normal matrix representation
            </summary>
        </member>
        <member name="F:ArtificialArt.Markov.Matrix.reversedData">
            <summary>
            90 degree rotated matrix representation
            </summary>
        </member>
        <member name="M:ArtificialArt.Markov.Matrix.MultiplyStatistics(System.String,System.String,System.Single)">
            <summary>
            Multiply statistics
            </summary>
            <param name="fromValue">from value</param>
            <param name="toValue">to value</param>
            <param name="toMultiply">multiplicator</param>
        </member>
        <member name="M:ArtificialArt.Markov.Matrix.AddStatistics(System.String,System.String)">
            <summary>
            Add 1 to existing statistics count
            </summary>
            <param name="fromValue">from value</param>
            <param name="toValue">to value</param>
        </member>
        <member name="M:ArtificialArt.Markov.Matrix.AddStatistics(System.String,System.String,System.Single)">
            <summary>
            Add a number to existing statistics count
            </summary>
            <param name="fromValue">from value</param>
            <param name="toValue">to value</param>
            <param name="toAdd">add to existing count</param>
        </member>
        <member name="M:ArtificialArt.Markov.Matrix.SetStatistics(System.String,System.String,System.Single)">
            <summary>
            Set statistics count number for values
            </summary>
            <param name="fromValue">from value</param>
            <param name="toValue">to value</param>
            <param name="newCount">new count</param>
        </member>
        <member name="M:ArtificialArt.Markov.Matrix.ContainsKey(System.String)">
            <summary>
            Whether a key name is present in the matrix
            </summary>
            <param name="keyName">key name</param>
            <returns>whether a key name is present in the matrix</returns>
        </member>
        <member name="M:ArtificialArt.Markov.Matrix.CompareTo(ArtificialArt.Markov.Matrix)">
            <summary>
            Compare to other matrix
            </summary>
            <param name="other">other matrix</param>
            <returns>difference between two matrixes</returns>
        </member>
        <member name="M:ArtificialArt.Markov.Matrix.CompareTo(ArtificialArt.Markov.Matrix,System.Boolean)">
            <summary>
            Compare to other matrix
            </summary>
            <param name="other">other matrix</param>
            <param name="isSecondMatrixLarger">whether other matrix is larger</param>
            <returns>difference between two matrixes</returns>
        </member>
        <member name="M:ArtificialArt.Markov.Matrix.MultiplyStatisticsTo(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Single}},System.String,System.String,System.Single)">
            <summary>
            Multiply statistics
            </summary>
            <param name="data">data</param>
            <param name="fromValue">from value</param>
            <param name="toValue">to value</param>
            <param name="toMultiply">multiplicator</param>
        </member>
        <member name="M:ArtificialArt.Markov.Matrix.AddStatisticsTo(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Single}},System.String,System.String,System.Single)">
            <summary>
            Add statistics
            </summary>
            <param name="data">data</param>
            <param name="fromValue">from value</param>
            <param name="toValue">to value</param>
            <param name="toAdd">number to add</param>
        </member>
        <member name="M:ArtificialArt.Markov.Matrix.SetStatisticsTo(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Single}},System.String,System.String,System.Single)">
            <summary>
            Set statistics
            </summary>
            <param name="data">data</param>
            <param name="fromValue">from value</param>
            <param name="toValue">to value</param>
            <param name="newCount">new number to set</param>
        </member>
        <member name="M:ArtificialArt.Markov.Matrix.CompareRows(System.Collections.Generic.Dictionary{System.String,System.Single},System.Collections.Generic.Dictionary{System.String,System.Single})">
            <summary>
            Compare two rows and return difference
            </summary>
            <param name="row1">row 1</param>
            <param name="row2">row 2</param>
            <returns>difference between two rows</returns>
        </member>
        <member name="M:ArtificialArt.Markov.Matrix.CompareRows(System.Collections.Generic.Dictionary{System.String,System.Single},System.Collections.Generic.Dictionary{System.String,System.Single},System.Boolean)">
            <summary>
            Compare two rows and return difference
            </summary>
            <param name="row1">row 1</param>
            <param name="row2">row 2</param>
            <param name="isSecondRowLarger">whether second row is larger</param>
            <returns>difference between two rows</returns>
        </member>
        <member name="M:ArtificialArt.Markov.Matrix.CompareRowsSingleWay(System.Collections.Generic.Dictionary{System.String,System.Single},System.Collections.Generic.Dictionary{System.String,System.Single})">
            <summary>
            Compare two rows and return difference
            </summary>
            <param name="row1">row 1</param>
            <param name="row2">row 2</param>
            <returns>difference between two rows</returns>
        </member>
        <member name="M:ArtificialArt.Markov.Matrix.NormalizeValue(System.Single,System.Collections.Generic.Dictionary{System.String,System.Single})">
            <summary>
            Get normalized value from row
            </summary>
            <param name="value">value</param>
            <param name="row">row</param>
            <returns>normalized value</returns>
        </member>
        <member name="P:ArtificialArt.Markov.Matrix.Item(System.String,System.String)">
            <summary>
            Try get normal value
            </summary>
            <param name="concept1">subject concept name</param>
            <param name="concept2">other concept name</param>
            <returns>current value</returns>
        </member>
        <member name="P:ArtificialArt.Markov.Matrix.NormalData">
            <summary>
            Normal matrix representation
            </summary>
        </member>
        <member name="P:ArtificialArt.Markov.Matrix.ReversedData">
            <summary>
            90 degree rotated matrix representation
            </summary>
        </member>
        <member name="M:ArtificialArt.Markov.WordMatrix.LearnFromLine(System.String)">
            <summary>
            Learn from text line
            </summary>
            <param name="textLine">source text line</param>
        </member>
        <member name="M:ArtificialArt.Markov.WordMatrix.LearnFromFile(System.String)">
            <summary>
            Learn from text file
            </summary>
            <param name="fileName">file's name</param>
        </member>
        <member name="M:ArtificialArt.Markov.WordMatrix.GenerateSentence(System.Random)">
            <summary>
            Generate sentence from matrix
            </summary>
            <param name="random">random number generator</param>
            <returns>generated sentence</returns>
        </member>
        <member name="M:ArtificialArt.Markov.WordMatrix.HardTrim(System.String)">
            <summary>
            Remove undesired characters from text
            </summary>
            <param name="text">text</param>
            <returns>Clean text</returns>
        </member>
        <member name="T:ArtificialArt.Lyrics.AbstractVerseFactory">
            <summary>
            Abstract verse factory
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.AbstractVerseFactory.Build(ArtificialArt.Lyrics.Verse)">
            <summary>
            Build a verse
            </summary>
            <param name="previousVerse">previous verse</param>
            <returns>verse</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.AbstractVerseFactory.Build">
            <summary>
            Build a verse
            </summary>
            <returns>verse</returns>
        </member>
        <member name="P:ArtificialArt.Lyrics.AbstractVerseFactory.LanguageCode">
            <summary>
            Language code
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseFactoryWords.defaultLanguageCode">
            <summary>
            Default language code
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseFactoryWords.verseConstructionSettings">
            <summary>
            Verse construction settings
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseFactoryWords.creationMemory">
            <summary>
            Creation memory
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseFactoryWords.languageCode">
            <summary>
            Language Code
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseFactoryWords.#ctor(ArtificialArt.Lyrics.VerseConstructionSettings,ArtificialArt.Lyrics.CreationMemory)">
            <summary>
            Constructor
            </summary>
            <param name="verseConstructionSettings">verse construction settings</param>
            <param name="creationMemory">creation memory (to remember which themes were used the most</param>
        </member>
        <member name="P:ArtificialArt.Lyrics.VerseFactoryWords.LanguageCode">
            <summary>
            Language Code
            </summary>
        </member>
        <member name="T:ArtificialArt.Linguistics.LanguageMatrixCollection">
            <summary>
            Collection of predefined language matrixes
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LanguageMatrixCollection.languageList">
            <summary>
            List of languages
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LanguageMatrixCollection.xmlMatrixSaverLoader">
            <summary>
            Xml Matrix Saver Loader
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageMatrixCollection.#ctor">
            <summary>
            Initialize languages
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageMatrixCollection.AddLanguage(System.String,System.String)">
            <summary>
            Add language
            </summary>
            <param name="languageName">language name</param>
            <param name="resource">string resource xml file content</param>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageMatrixCollection.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageMatrixCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="P:ArtificialArt.Linguistics.LanguageMatrixCollection.Item(System.String)">
            <summary>
            Return language matrix from language name
            </summary>
            <param name="languageName">language's name</param>
            <returns>language matrix from language name</returns>
        </member>
        <member name="P:ArtificialArt.Linguistics.LanguageMatrixCollection.Keys">
            <summary>
            Language name list
            </summary>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.Analysis">
            <summary>
            For linguistic and semantical analysis
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.Analysis.subjectObjectDetector">
            <summary>
            Manages I and YOU
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.Analysis.verbManager">
            <summary>
            Manages analysis of verbs
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.Analysis.pronounList">
            <summary>
            List of pronouns
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.Analysis.prepositionList">
            <summary>
            List of prepositions
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.Analysis.postpositionList">
            <summary>
            List of postpositions
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.Analysis.questionBeginList">
            <summary>
            List of words like "when, why, how, where"
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.Analysis.questionEndingList">
            <summary>
            List of words like "when, why, how, where" for question endings
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.Analysis.subordinatingConjunctionBeforeSubjectList">
            <summary>
            List of subordinating conjunctions that can be put before subject. For instance: while, if
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Analysis.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Analysis.CountWords(System.String)">
            <summary>
            Count how many words in string
            </summary>
            <param name="originalString"></param>
            <returns></returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Analysis.IsVerb(System.String)">
            <summary>
            Whether the word is a verb
            </summary>
            <param name="word">word</param>
            <returns>Whether the word is a verb</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Analysis.IsModalVerb(System.String)">
            <summary>
            Whether the word is a modal verb
            </summary>
            <param name="word">word</param>
            <returns>Whether the word is a modal verb</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Analysis.IsPronoun(System.String)">
            <summary>
            Whether the word is a pronoun
            </summary>
            <param name="word">word</param>
            <returns>Whether the word is a pronoun</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Analysis.IsPreposition(System.String)">
            <summary>
            Whether word is a preposition
            </summary>
            <param name="word">word</param>
            <returns>Whether word is a preposition</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Analysis.IsPostposition(System.String)">
            <summary>
            Whether word is a postposition
            </summary>
            <param name="word">word</param>
            <returns>Whether word is a preposition</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Analysis.IsSubjectNotObject(ArtificialArt.Linguistics.Word)">
            <summary>
            Whether word is a subject rather than an object (from the context)
            </summary>
            <param name="word">word</param>
            <returns>Whether word is a subject rather than an object (from the context)</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Analysis.IsQuestionBeginWord(System.String)">
            <summary>
            Whether word is a word like: "how, when, where, why" etc
            </summary>
            <param name="word">word</param>
            <returns>Whether word is a word like: "how, when, where, why" etc</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Analysis.IsQuestionEndingWord(System.String)">
            <summary>
            Whether word is a word like: "how, when, where, why" for question ending
            </summary>
            <param name="word">word</param>
            <returns>Whether word is a word like: "how, when, where, why" etc</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Analysis.IsSubordinatingConjunctionBeforeSubject(System.String)">
            <summary>
            Whether word is a subordinating conjunction that can be put before a verb
            </summary>
            <param name="word">word to analyze</param>
            <returns>Whether word is a subordinating conjunction that can be put before a verb</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Analysis.ContainsVerb(System.String)">
            <summary>
            Whether text contains verb
            </summary>
            <param name="text">text to analyze</param>
            <returns>Whether text contains verb</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.ScaleChooserException">
            <summary>
            Thrown when scale selection fails
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.ScaleChooserException.#ctor(System.String)">
            <summary>
            Thrown when scale selection fails
            </summary>
            <param name="message">exception message</param>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.MidiEvent">
            <summary>
            Midi events
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MidiEvent.AbsoluteTicks">
            <summary>
            Absolute ticks
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MidiEvent.DeltaTicks">
            <summary>
            Delta ticks
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MidiEvent.MidiMessage">
            <summary>
            Midi message
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.ChannelStopper">
            <summary>
            Channel stopper
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelStopper.#ctor">
            <summary>
            Build channel stopper
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelStopper.Process(ArtificialArt.Audio.Midi.ChannelMessage)">
            <summary>
            Process
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelStopper.AllSoundOff">
            <summary>
            All sound off
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelStopper.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelStopper.OnStopped(ArtificialArt.Audio.Midi.StoppedEventArgs)">
            <summary>
            When stopped
            </summary>
            <param name="e">stopped event args</param>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.ChannelStopper.Stopped">
            <summary>
            When stopped
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.SongPositionPointerBuilder">
            <summary>
            Provides functionality for building song position pointer messages.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.IMessageBuilder">
            <summary>
            Represents functionality for building MIDI messages.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.IMessageBuilder.Build">
            <summary>
            Builds the MIDI message.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SongPositionPointerBuilder.#ctor">
            <summary>
            Initializes a new instance of the SongPositionPointerBuilder class.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SongPositionPointerBuilder.#ctor(ArtificialArt.Audio.Midi.SysCommonMessage)">
            <summary>
            Initializes a new instance of the SongPositionPointerBuilder class
            with the specified song position pointer message.
            </summary>
            <param name="message">
            The song position pointer message to use for initializing the 
            SongPositionPointerBuilder.
            </param>
            <exception cref="T:System.ArgumentException">
            If message is not a song position pointer message.
            </exception>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SongPositionPointerBuilder.Initialize(ArtificialArt.Audio.Midi.SysCommonMessage)">
            <summary>
            Initializes the SongPositionPointerBuilder with the specified 
            SysCommonMessage.
            </summary>
            <param name="message">
            The SysCommonMessage to use to initialize the 
            SongPositionPointerBuilder.
            </param>
            <exception cref="T:System.ArgumentException">
            If the SysCommonMessage is not a song position pointer message.
            </exception>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SongPositionPointerBuilder.Build">
            <summary>
            Builds a song position pointer message.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SongPositionPointerBuilder.PositionInTicks">
            <summary>
            Gets or sets the sequence position in ticks.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Value is set to less than zero.
            </exception>
            <remarks>
            Note: the position in ticks value is converted to the song position
            pointer value. Since the song position pointer has a lower 
            resolution than the position in ticks, there is a probable loss of 
            resolution when setting the position in ticks value.
            </remarks>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SongPositionPointerBuilder.Ppqn">
            <summary>
            Gets or sets the PulsesPerQuarterNote object.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Value is not a multiple of 24.
            </exception>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SongPositionPointerBuilder.SongPosition">
            <summary>
            Gets or sets the song position.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Value is set to less than zero.
            </exception>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SongPositionPointerBuilder.Result">
            <summary>
            Gets the built song position pointer message.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.PpqnClock">
            <summary>
            Provides basic functionality for generating tick events with pulses per 
            quarter note resolution.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.PpqnClock.DefaultTempo">
            <summary>
            The default tempo in microseconds: 120bpm.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.PpqnClock.PpqnMinValue">
            <summary>
            The minimum pulses per quarter note value.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.PpqnClock.running">
            <summary>
            Indicates whether the clock is running.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.PpqnClock.#ctor(System.Int32)">
            <summary>
            Create Ppqn Clock
            </summary>
            <param name="timerPeriod">timer period</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.PpqnClock.GetTempo">
            <summary>
            Get tempo
            </summary>
            <returns>tempo</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.PpqnClock.SetTempo(System.Int32)">
            <summary>
            Set tempo
            </summary>
            <param name="tempo">tempo</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.PpqnClock.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.PpqnClock.GenerateTicks">
            <summary>
            General ticks
            </summary>
            <returns>General ticks</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.PpqnClock.OnTick(System.EventArgs)">
            <summary>
            On tick
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.PpqnClock.OnStarted(System.EventArgs)">
            <summary>
            When started
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.PpqnClock.OnStopped(System.EventArgs)">
            <summary>
            On stopped
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.PpqnClock.OnContinued(System.EventArgs)">
            <summary>
            When continued
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.PpqnClock.Ppqn">
            <summary>
            Ppqn
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.PpqnClock.Ticks">
            <summary>
            Ticks
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.PpqnClock.TicksPerClock">
            <summary>
            Ticks per clock
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.PpqnClock.Tick">
            <summary>
            When ticks
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.PpqnClock.Started">
            <summary>
            When started
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.PpqnClock.Continued">
            <summary>
            When continued
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.PpqnClock.Stopped">
            <summary>
            When stopped
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.PpqnClock.IsRunning">
            <summary>
            Whether is running
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.RiffBuilderException">
            <summary>
            Exception thrown when building riff fails
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffBuilderException.#ctor(System.String)">
            <summary>
            Exception thrown when building riff fails
            </summary>
            <param name="message">exception message</param>
        </member>
        <member name="T:ArtificialArt.Markov.XmlMatrixSaverLoader">
            <summary>
            Xml matrix saver loader
            </summary>
        </member>
        <member name="M:ArtificialArt.Markov.XmlMatrixSaverLoader.Save(ArtificialArt.Markov.Matrix,System.String)">
            <summary>
            Save matrix to XML file
            </summary>
            <param name="matrix">matrix to save</param>
            <param name="fileName">file name</param>
        </member>
        <member name="M:ArtificialArt.Markov.XmlMatrixSaverLoader.Load(System.String)">
            <summary>
            Load matrix from XML file
            </summary>
            <param name="fileName">file name</param>
            <returns>Loaded matrix</returns>
        </member>
        <member name="M:ArtificialArt.Markov.XmlMatrixSaverLoader.LoadString(System.String)">
            <summary>
            Load matrix from string containing xml data
            </summary>
            <param name="xmlData">xmlData</param>
            <returns>Xml matrix</returns>
        </member>
        <member name="M:ArtificialArt.Markov.XmlMatrixSaverLoader.XmlWriteData(System.Xml.XmlTextWriter,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Single}})">
            <summary>
            Write xml data
            </summary>
            <param name="textWriter">text writer</param>
            <param name="data">data to write</param>
        </member>
        <member name="M:ArtificialArt.Markov.XmlMatrixSaverLoader.XmlWriteRow(System.Xml.XmlTextWriter,System.String,System.Collections.Generic.Dictionary{System.String,System.Single})">
            <summary>
            Write xml row
            </summary>
            <param name="textWriter">text writer</param>
            <param name="from">from word</param>
            <param name="row">row to write</param>
        </member>
        <member name="M:ArtificialArt.Markov.XmlMatrixSaverLoader.LoadMatrixFromTextReader(System.Xml.XmlTextReader)">
            <summary>
            Load matrix from xml text reader
            </summary>
            <param name="textReader">xml text reader</param>
            <returns>XML Matrix</returns>
        </member>
        <member name="T:ArtificialArt.Waves.WavePack">
            <summary>
            Represents a wave pack
            </summary>
        </member>
        <member name="T:ArtificialArt.Waves.IWave">
            <summary>
            Represents a wave or a wave pack
            </summary>
        </member>
        <member name="M:ArtificialArt.Waves.IWave.Normalize">
            <summary>
            Normalize the wave
            </summary>
            <returns>Normalized wave</returns>
        </member>
        <member name="P:ArtificialArt.Waves.IWave.Item(System.Double)">
            <summary>
            Get amplitude momentum Y value at X
            </summary>
            <param name="x">x coordinates</param>
            <returns>amplitude momentum Y value at X</returns>
        </member>
        <member name="F:ArtificialArt.Waves.WavePack.JunctionAdd">
            <summary>
            Junction type for when we add two waves
            </summary>
        </member>
        <member name="F:ArtificialArt.Waves.WavePack.JunctionMultiply">
            <summary>
            Junction type for when we multiply two waves
            </summary>
        </member>
        <member name="F:ArtificialArt.Waves.WavePack.waveList">
            <summary>
            Internal list of waves
            </summary>
        </member>
        <member name="F:ArtificialArt.Waves.WavePack.normalizationMultiplicator">
            <summary>
            Normalization multiplicator
            </summary>
        </member>
        <member name="F:ArtificialArt.Waves.WavePack.waveCache">
            <summary>
            Wave cache to improve performances
            </summary>
        </member>
        <member name="F:ArtificialArt.Waves.WavePack.junctionType">
            <summary>
            Current junction type (to add or multiply waves)
            </summary>
        </member>
        <member name="M:ArtificialArt.Waves.WavePack.#ctor(System.Int32)">
            <summary>
            Create a wave pack with selected junction type (add or multiply) default: add
            </summary>
            <param name="junctionType">junction type (add or multiply) default: add</param>
        </member>
        <member name="M:ArtificialArt.Waves.WavePack.#ctor">
            <summary>
            Create a wave pack for which waves will be added
            </summary>
        </member>
        <member name="M:ArtificialArt.Waves.WavePack.#ctor(ArtificialArt.Waves.IWave)">
            <summary>
            Create a wave pack from existing wave or wave pack
            </summary>
            <param name="wave">existing wave or wave pack</param>
        </member>
        <member name="M:ArtificialArt.Waves.WavePack.op_Addition(ArtificialArt.Waves.WavePack,ArtificialArt.Waves.IWave)">
            <summary>
            Add two wave or wave packs
            </summary>
            <param name="wavePack1">wave[pack] 1</param>
            <param name="wave2">wave 2</param>
            <returns>joined wave pack</returns>
        </member>
        <member name="M:ArtificialArt.Waves.WavePack.Add(ArtificialArt.Waves.IWave)">
            <summary>
            Add component wave to pack
            </summary>
            <param name="item">component wave</param>
        </member>
        <member name="M:ArtificialArt.Waves.WavePack.Clear">
            <summary>
            Remove all component waves
            </summary>
        </member>
        <member name="M:ArtificialArt.Waves.WavePack.Contains(ArtificialArt.Waves.IWave)">
            <summary>
            Whether wave pack contains specified component wave
            </summary>
            <param name="item">specified component wave</param>
            <returns>Whether wave pack contains specified component wave</returns>
        </member>
        <member name="M:ArtificialArt.Waves.WavePack.CopyTo(ArtificialArt.Waves.IWave[],System.Int32)">
            <summary>
            Copy to an array of waves
            </summary>
            <param name="array">array of waves</param>
            <param name="arrayIndex">array index</param>
        </member>
        <member name="M:ArtificialArt.Waves.WavePack.Remove(ArtificialArt.Waves.IWave)">
            <summary>
            Remove component wave
            </summary>
            <param name="item">component wave</param>
            <returns>if removal succeeded</returns>
        </member>
        <member name="M:ArtificialArt.Waves.WavePack.GetEnumerator">
            <summary>
            Needed to do foreach iteration
            </summary>
            <returns>Wave iterator</returns>
        </member>
        <member name="M:ArtificialArt.Waves.WavePack.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Needed to do foreach iteration
            </summary>
            <returns>Wave iterator</returns>
        </member>
        <member name="M:ArtificialArt.Waves.WavePack.IndexOf(ArtificialArt.Waves.IWave)">
            <summary>
            Returns the index of selected wave component
            </summary>
            <param name="item">selected wave component</param>
            <returns>index of selected wave component</returns>
        </member>
        <member name="M:ArtificialArt.Waves.WavePack.Insert(System.Int32,ArtificialArt.Waves.IWave)">
            <summary>
            Insert component wave at selected index
            </summary>
            <param name="index">selected index</param>
            <param name="item">component wave[pack]</param>
        </member>
        <member name="M:ArtificialArt.Waves.WavePack.RemoveAt(System.Int32)">
            <summary>
            Removes component wave at selected index
            </summary>
            <param name="index">selected index</param>
        </member>
        <member name="M:ArtificialArt.Waves.WavePack.Equals(ArtificialArt.Waves.IWave)">
            <summary>
            Whether wave or wavepack equals the other
            </summary>
            <param name="other">other wave</param>
            <returns>Whether wave or wavepack equals the other</returns>
        </member>
        <member name="M:ArtificialArt.Waves.WavePack.Normalize">
            <summary>
            Normalize the wave pack
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtificialArt.Waves.WavePack.GetRandomJunctionType(System.Random)">
            <summary>
            Return a random wave junction type (add or multiply)
            </summary>
            <param name="random">random number generator</param>
            <returns>random wave junction type (add or multiply)</returns>
        </member>
        <member name="P:ArtificialArt.Waves.WavePack.Count">
            <summary>
            Count how many component waves
            </summary>
        </member>
        <member name="P:ArtificialArt.Waves.WavePack.IsReadOnly">
            <summary>
            Whether wave pack is read only
            </summary>
        </member>
        <member name="P:ArtificialArt.Waves.WavePack.Item(System.Int32)">
            <summary>
            Returns component wave at index
            </summary>
            <param name="index">index</param>
            <returns>component wave at index</returns>
        </member>
        <member name="P:ArtificialArt.Waves.WavePack.Item(System.Double)">
            <summary>
            Get amplitude at position/time x
            </summary>
            <param name="x">x</param>
            <returns>amplitude at position/time x</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.StringManipulations">
            <summary>
            Used for generic string manipulations
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.StringManipulations.keepCaseReplacer">
            <summary>
            Used to replace word in string while keeping original case structure
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.StringManipulations.wordSequenceReplacer">
            <summary>
            Manages replace of word sequences
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.StringManipulations.wordRemover">
            <summary>
            Used to remove words from strings
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.StringManipulations.wordDelimiterList">
            <summary>
            List of possible word delimiters
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.StringManipulations.wordDelimiterHash">
            <summary>
            HashSet of possible word delimiters
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.StringManipulations.wordInsertionManager">
            <summary>
            Manages insertions of words
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.StringManipulations.wordInversionManager">
            <summary>
            Manages inversions of words
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.StringManipulations.#cctor">
            <summary>
            Initialization of default data
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.StringManipulations.ReplaceWordKeepCase(System.String,System.String,System.String)">
            <summary>
            Replace content in string but keep original case
            </summary>
            <param name="original">original</param>
            <param name="from">to replace</param>
            <param name="to">to replace to</param>
            <returns>String with replaced content with case kept</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.StringManipulations.InvertWordKeepCase(System.String,System.String,System.String)">
            <summary>
            Invert two word occurence in a string but keep original case
            </summary>
            <param name="original">original string</param>
            <param name="word1">word 1</param>
            <param name="word2">word 2</param>
            <returns>String with occurences inverted with case kept</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.StringManipulations.IsUpperCase(System.Char)">
            <summary>
            Whether a char is upperCase
            </summary>
            <param name="letter">char</param>
            <returns>Whether a char is upperCase</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.StringManipulations.ToUpper(System.Char)">
            <summary>
            Convert a char to upperCase
            </summary>
            <param name="letter">char</param>
            <returns>UpperCase version of char</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.StringManipulations.ToLower(System.Char)">
            <summary>
            Convert a char to lowerCase
            </summary>
            <param name="letter">char</param>
            <returns>lowerCase version</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.StringManipulations.ContainsWord(System.String,System.String)">
            <summary>
            Whether string contains specified word
            </summary>
            <param name="text">text to analyze</param>
            <param name="word">word to find in text</param>
            <returns>Whether string contains specified word</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.StringManipulations.RemoveWord(System.String,System.String)">
            <summary>
            Remove word from string
            </summary>
            <param name="original">original string</param>
            <param name="wordToRemove">word to remove</param>
            <returns>String with specified word removed</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.StringManipulations.RemoveWord(System.String,System.String,System.Int32)">
            <summary>
            Remove word from string by word name
            </summary>
            <param name="original">original string</param>
            <param name="wordToRemove">word to remove</param>
            <param name="occurenceCount">how many times we remove it (default: infinite: 0)</param>
            <returns>String with specified word removed</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.StringManipulations.RemoveWord(System.String,System.Int32,System.Boolean)">
            <summary>
            Remove word from string by word position
            </summary>
            <param name="original">original string</param>
            <param name="wordPosition">position of word to remove (starting at 0)</param>
            <param name="isKeepDelimiterAfterNotBefore">true: keep delimiter after removed word, false: keep delimiter before word to remove</param>
            <returns>String with removed word at specified position with specified delimiter kept</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.StringManipulations.InsertWords(System.String,System.String,System.Int32)">
            <summary>
            Insert a word or a groupe of word at provided index (0: before everything)
            </summary>
            <param name="originalString">original string</param>
            <param name="wordsToInsert">words to insert</param>
            <param name="positionIndex">position index</param>
            <returns>new string with inserted words</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.StringManipulations.InvertWordPosition(System.String,System.Int32,System.Int32)">
            <summary>
            Invert word positions in string
            </summary>
            <param name="originalString">original string</param>
            <param name="wordPosition1">word1's position</param>
            <param name="wordPosition2">word2's position</param>
            <returns>String with position of word 1 and word 2 inverted</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.StringManipulations.ReplaceWordSequence(System.String,System.String,System.String)">
            <summary>
            Replace a word sequence in proposition
            </summary>
            <param name="originalProposition">original proposition (case insensitive)</param>
            <param name="fromSequence">from word sequence (case insensitive, delimiter insensitive)</param>
            <param name="toSequence">from word sequence (case insensitive, delimiter insensitive)</param>
            <returns>proposition with replaced word sequences</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.StringManipulations.ReplaceWordSequence(System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Replace word sequence
            </summary>
            <param name="original">original proposition</param>
            <param name="startWordSequence">begining of the word sequence</param>
            <param name="midWordCount">how many unknown words in middle of sequence to replace</param>
            <param name="endWordSequence">ending of word sequence</param>
            <param name="startReplace">begining of replaced word sequence</param>
            <param name="endReplace">ending of replaced word sequence</param>
            <returns>Text with replaced word sequences</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.StringManipulations.ReverseString(System.String)">
            <summary>
            Receives string and returns the string with its letters reversed.
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.StringManipulations.ReplaceWordInsensitiveLower(System.String,System.String,System.String)">
            <summary>
            Convert string to all lowercase and replace word from to
            </summary>
            <param name="original">original string</param>
            <param name="from">from word</param>
            <param name="to">to word</param>
            <returns>lowcase string with replaced words</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.StringManipulations.IsWordDelimiter(System.Char)">
            <summary>
            Whether character is a word delimiter
            </summary>
            <param name="letter">character</param>
            <returns>Whether character is a word delimiter</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.Mutator.LanguageMutator">
            <summary>
            Convert a text to something that looks like another language
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.Mutator.LanguageMutator.forceSameLetterGroupProbability">
            <summary>
            Probability to force same letter group
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.Mutator.LanguageMutator.languageDetector">
            <summary>
            Language Detector
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.Mutator.LanguageMutator.languageMatrixCollection">
            <summary>
            Language matrix collection
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.Mutator.LanguageMutator.#ctor(ArtificialArt.Linguistics.LanguageDetector,ArtificialArt.Linguistics.LanguageMatrixCollection)">
            <summary>
            Create language mutator
            </summary>
            <param name="languageDetector">language detector</param>
            <param name="languageMatrixCollection">language matrix collection</param>
        </member>
        <member name="M:ArtificialArt.Linguistics.Mutator.LanguageMutator.Translate(System.String,System.String,System.Random)">
            <summary>
            Convert a text to something that looks like another language
            </summary>
            <param name="textSource">text source</param>
            <param name="desiredLanguageName">name of the desired language</param>
            <param name="random">random number generator</param>
            <returns>something that looks like another language</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Track">
            <summary>
            Represents a collection of MidiEvents and a MIDI track within a 
            Sequence.
            </summary>
            <summary>
            Track
            </summary>
            <summary>
            Track
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Track.#ctor">
            <summary>
            Build track
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Track.Insert(System.Int32,ArtificialArt.Audio.Midi.IMidiMessage)">
            <summary>
            Inserts an IMidiMessage at the specified position in absolute ticks.
            </summary>
            <param name="position">
            The position in the Track in absolute ticks in which to insert the
            IMidiMessage.
            </param>
            <param name="message">
            The IMidiMessage to insert.
            </param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Track.Clear">
            <summary>
            Clears all of the MidiEvents, with the exception of the end of track
            message, from the Track.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Track.Merge(ArtificialArt.Audio.Midi.Track)">
            <summary>
            Merges the specified Track with the current Track.
            </summary>
            <param name="trk">
            The Track to merge with.
            </param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Track.RemoveAt(System.Int32)">
            <summary>
            Removes the MidiEvent at the specified index.
            </summary>
            <param name="index">
            The index into the Track at which to remove the MidiEvent.
            </param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Track.GetMidiEvent(System.Int32)">
            <summary>
            Gets the MidiEvent at the specified index.
            </summary>
            <param name="index">
            The index of the MidiEvent to get.
            </param>
            <returns>
            The MidiEvent at the specified index.
            </returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Track.Move(ArtificialArt.Audio.Midi.MidiEvent,System.Int32)">
            <summary>
            Move
            </summary>
            <param name="e">midi event</param>
            <param name="newPosition">new position</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Track.Test">
            <summary>
            Test
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Track.TestInsert">
            <summary>
            Test insert
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Track.Iterator">
            <summary>
            Midi event iterator
            </summary>
            <returns>Midi event iterator</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Track.DispatcherIterator(ArtificialArt.Audio.Midi.MessageDispatcher)">
            <summary>
            Dispatcher iterator
            </summary>
            <param name="dispatcher">dispatcher</param>
            <returns>Dispatcher iterator</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Track.TickIterator(System.Int32,ArtificialArt.Audio.Midi.ChannelChaser,ArtificialArt.Audio.Midi.MessageDispatcher)">
            <summary>
            Tick iterator
            </summary>
            <param name="startPosition">start position</param>
            <param name="chaser">chaser</param>
            <param name="dispatcher">dispatcher</param>
            <returns>Tick iterator</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Track.Count">
            <summary>
            Gets the number of MidiEvents in the Track.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Track.Length">
            <summary>
            Gets the length of the Track in ticks.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Track.EndOfTrackOffset">
            <summary>
            Gets or sets the end of track meta message position offset.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Track.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the Track.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.SysCommonMessageEventArgs">
            <summary>
            Build System comment message event arguments
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysCommonMessageEventArgs.message">
            <summary>
            Message
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysCommonMessageEventArgs.#ctor(ArtificialArt.Audio.Midi.SysCommonMessage)">
            <summary>
            System comment message event arguments
            </summary>
            <param name="message">message</param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysCommonMessageEventArgs.Message">
            <summary>
            System common message
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.NoOpEventArgs">
            <summary>
            No op event arguments
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.NoOpEventArgs.data">
            <summary>
            Data
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.NoOpEventArgs.#ctor(System.Int32)">
            <summary>
            No Op event arguments
            </summary>
            <param name="data">data</param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.NoOpEventArgs.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.MidiOutCaps">
            <summary>
            Represents MIDI output device capabilities.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiOutCaps.mid">
            <summary>
            Manufacturer identifier of the device driver for the Midi output 
            device. 
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiOutCaps.pid">
            <summary>
            Product identifier of the Midi output device. 
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiOutCaps.driverVersion">
            <summary>
            Version number of the device driver for the Midi output device. The 
            high-order byte is the major version number, and the low-order byte 
            is the minor version number. 
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiOutCaps.name">
            <summary>
            Product name.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiOutCaps.technology">
            <summary>
            Flags describing the type of the Midi output device. 
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiOutCaps.voices">
            <summary>
            Number of voices supported by an internal synthesizer device. If 
            the device is a port, this member is not meaningful and is set 
            to 0. 
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiOutCaps.notes">
            <summary>
            Maximum number of simultaneous notes that can be played by an 
            internal synthesizer device. If the device is a port, this member 
            is not meaningful and is set to 0. 
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiOutCaps.channelMask">
            <summary>
            Channels that an internal synthesizer device responds to, where the 
            least significant bit refers to channel 0 and the most significant 
            bit to channel 15. Port devices that transmit on all channels set 
            this member to 0xFFFF. 
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiOutCaps.support">
            <summary>
            Optional functionality supported by the device. 
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.MidiDeviceException">
            <summary>
            The base class for all MIDI device exception classes.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiDeviceException.MIDIERR_UNPREPARED">
            <summary>
            Midi error unperpared
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiDeviceException.MIDIERR_STILLPLAYING">
            <summary>
            Midi error still playing
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiDeviceException.MIDIERR_NOMAP">
            <summary>
            Midi error no map
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiDeviceException.MIDIERR_NOTREADY">
            <summary>
            Midi error not ready
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiDeviceException.MIDIERR_NODEVICE">
            <summary>
            Midi error no device
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiDeviceException.MIDIERR_INVALIDSETUP">
            <summary>
            Midi error invalid setup
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiDeviceException.MIDIERR_BADOPENMODE">
            <summary>
            Midi error bad open mode
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiDeviceException.MIDIERR_DONT_CONTINUE">
            <summary>
            Midi error don't continue
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiDeviceException.MIDIERR_LASTERROR">
            <summary>
            Midi error last error
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiDeviceException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the DeviceException class with the
            specified error code.
            </summary>
            <param name="errCode">
            The error code.
            </param>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit">
            <summary>
            Builds time split rythm patterns
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.random">
            <summary>
            Random number generator
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.desiredRythmLength">
            <summary>
            Desired rythm length
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.minimumNoteLength">
            <summary>
            Minimum note length
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.maximumNoteLength">
            <summary>
            Maximum note length
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.ternaryProbability">
            <summary>
            Probability to have ternary rythm
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.quinternaryProbability">
            <summary>
            Probability to have quiternary probability
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.dottedProbability">
            <summary>
            Probability to have a dotted note
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.isAllowedTernary">
            <summary>
            Whether we allow ternary beats
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.isAllowedQuinternary">
            <summary>
            Whether we allow quiternary beats
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.#ctor">
            <summary>
            Build time split rythm pattern builder
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.Build">
            <summary>
            Build rythm pattern
            </summary>
            <returns>rythm pattern</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.ResetConstructionSettings">
            <summary>
            Reset construction settings
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.TrySplit(ArtificialArt.Audio.Midi.Generator.RythmPattern)">
            <summary>
            Try split notes in shorter notes
            </summary>
            <param name="oldRythmPattern">pattern for which we split notes</param>
            <returns>new rythm pattern</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.IsDotted(System.Double)">
            <summary>
            Whether time interval matches dotted note
            </summary>
            <param name="scalar">time interval</param>
            <returns>Whether time interval matches dotted note</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.IsQuinternary(System.Double)">
            <summary>
            Whether time interval is quinternary
            </summary>
            <param name="scalar">time interval</param>
            <returns>Whether time interval is quinternary</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.IsTernary(System.Double)">
            <summary>
            Whether time interval is ternary
            </summary>
            <param name="scalar">time interval</param>
            <returns>Whether time interval is ternary</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.DesiredRythmLength">
            <summary>
            Desired rythm length
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.MinimumNoteLength">
            <summary>
            Minimum note length
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.MaximumNoteLength">
            <summary>
            Maximum note length
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.TernaryProbability">
            <summary>
            Probability to have ternary note
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.QuinternaryProbability">
            <summary>
            Probability to have a quinternary note
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.DottedProbability">
            <summary>
            Probability to have a dotted note
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.Random">
            <summary>
            Random number generator
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.IsAllowedTernary">
            <summary>
            Whether we allow ternary notes
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RythmPatternBuilderTimeSplit.IsAllowedQuinternary">
            <summary>
            Whether we allow quinternary notes
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.RiffPack">
            <summary>
            Roff pack
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPack.#ctor">
            <summary>
            Create riff pack
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPack.#ctor(ArtificialArt.Audio.Midi.Generator.IRiff)">
            <summary>
            Create riff pack from riff
            </summary>
            <param name="iRiff">riff</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPack.op_Addition(ArtificialArt.Audio.Midi.Generator.RiffPack,ArtificialArt.Audio.Midi.Generator.IRiff)">
            <summary>
            Add two riffs
            </summary>
            <param name="riffPack1">riff 1</param>
            <param name="riff2">riff 2</param>
            <returns>summ of two riffs as a riff pack</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPack.Clear">
            <summary>
            Remove all riffs
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPack.Insert(System.Int32,ArtificialArt.Audio.Midi.Generator.IRiff)">
            <summary>
            Insert riff at index
            </summary>
            <param name="index">index</param>
            <param name="item">riff</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPack.RemoveAt(System.Int32)">
            <summary>
            Remove riff at specified index
            </summary>
            <param name="index">specified index</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPack.Add(ArtificialArt.Audio.Midi.Generator.IRiff)">
            <summary>
            Add riff to riff pack
            </summary>
            <param name="item">riff to add</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPack.CopyTo(ArtificialArt.Audio.Midi.Generator.IRiff[],System.Int32)">
            <summary>
            Copy to array
            </summary>
            <param name="array">array</param>
            <param name="arrayIndex">array index</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPack.GetEnumerator">
            <summary>
            Riff enumerator
            </summary>
            <returns>Riff enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPack.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Riff enumerator
            </summary>
            <returns>Riff enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPack.Contains(ArtificialArt.Audio.Midi.Generator.IRiff)">
            <summary>
            Whether riffpack contains specified riff
            </summary>
            <param name="item">specified riff</param>
            <returns>Whether riffpack contains specified riff</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPack.IndexOf(ArtificialArt.Audio.Midi.Generator.IRiff)">
            <summary>
            Index of specified riff item
            </summary>
            <param name="item">riff item</param>
            <returns>Index of specified riff item</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPack.Remove(ArtificialArt.Audio.Midi.Generator.IRiff)">
            <summary>
            Remove riff from riff pack
            </summary>
            <param name="item">riff to remove</param>
            <returns>whether removal worked</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPack.Equals(ArtificialArt.Audio.Midi.Generator.IRiff)">
            <summary>
            Whether both riff packs are identical
            </summary>
            <param name="other">other</param>
            <returns>Whether both riff packs are identical</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffPack.Item(System.Int32)">
            <summary>
            Riff at specified index
            </summary>
            <param name="index">index</param>
            <returns>Riff at specified index</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffPack.Count">
            <summary>
            Riff count
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffPack.IsReadOnly">
            <summary>
            Whether riffpack is readonly
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffPack.Tempo">
            <summary>
            Tempo
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.PredefinedGeneratorTrack">
            <summary>
            Predefined generator track
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.PredefinedGeneratorTrack.metaRiffPackName">
            <summary>
            MetaRiffPack's name
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.PredefinedGeneratorTrack.internalList">
            <summary>
            Internal list of checkbox bools
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.PredefinedGeneratorTrack.#ctor(System.String,System.Int32)">
            <summary>
            Build predefined generator track
            </summary>
            <param name="metaRiffPackName">meta riff pack name</param>
            <param name="barCount">bar count</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.PredefinedGeneratorTrack.GetEnumerator">
            <summary>
            Checkbox bool enumerator
            </summary>
            <returns>Checkbox bool enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.PredefinedGeneratorTrack.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Checkbox bool enumerator
            </summary>
            <returns>Checkbox bool enumerator</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.PredefinedGeneratorTrack.Item(System.Int32)">
            <summary>
            Get check box's bool at index
            </summary>
            <param name="index">index (bar id)</param>
            <returns>check box's bool at index</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.PredefinedGeneratorTrack.MetaRiffPackName">
            <summary>
            MetaRiffPack's name
            </summary>
        </member>
        <member name="T:ArtificialArt.Lyrics.LyricSongFactory">
            <summary>
            Produces whole songs
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactory.defaultBarCount">
            <summary>
            How many bars to generate by default
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactory.defaultCharCountPerLine">
            <summary>
            How many letter per line by default
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactory.defaultBarCountPerChorus">
            <summary>
            How many bar per chorus by default
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactory.defaultLanguageCode">
            <summary>
            Default language code
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactory.listBarIntensity">
            <summary>
            For each bar, the level of intensity (0 means nothing 0.5 means moderate verse, 0.75 means intense verse, 1 means chorus)
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactory.listBarLetterCount">
            <summary>
            For each bar, how many letter to set
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactory.barCount">
            <summary>
            How many bar to generate
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactory.barCountPerChorus">
            <summary>
            How many bar per chorus
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactory.verseFactory">
            <summary>
            Builds verses
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactory.lyricSourceFileName">
            <summary>
            Lyric source file name
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactory.lineCountPerBar">
            <summary>
            How many line per bar
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactory.languageCode">
            <summary>
            Language code
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactory.lyricSourcePath">
            <summary>
            Lyric source path
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactory.#ctor(System.String,System.String)">
            <summary>
            Create a song factory from lyric source file name
            </summary>
            <param name="lyricSourcePath">lyric source path</param>
            <param name="languageCode">language code</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactory.AddTheme(System.String)">
            <summary>
            Add theme to construction settings
            </summary>
            <param name="themeName">theme to add</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactory.CensorTheme(System.String)">
            <summary>
            Censor a theme in construction settings
            </summary>
            <param name="themeName">theme to censor</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactory.SetBarSettings(System.Int32,System.Single,System.Int16)">
            <summary>
            Specify the bar settings at specified index
            </summary>
            <param name="barIndex">index</param>
            <param name="intensity">intensity</param>
            <param name="letterCount">how many letter in bar</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactory.SetBarLetterCount(System.Int32,System.Int16)">
            <summary>
            Specify the bar char count at specified index
            </summary>
            <param name="barIndex">index</param>
            <param name="letterCount">intensity</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactory.SetBarIntensity(System.Int32,System.Single)">
            <summary>
            Specify the bar intensity at specified index
            </summary>
            <param name="barIndex">index</param>
            <param name="intensity">intensity</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactory.GetBarLetterCount(System.Int32)">
            <summary>
            Bar's letter count
            </summary>
            <param name="barIndex">bar's index</param>
            <returns>Bar's letter count</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactory.GetBarIntensity(System.Int32)">
            <summary>
            Bar's intensity
            </summary>
            <param name="barIndex">bar's index</param>
            <returns>Bar's intensity</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactory.Build">
            <summary>
            Build song from selected themes
            </summary>
            <returns>List of string for each line</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactory.ClearThemes">
            <summary>
            Clear desired and undesired themes
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.LyricSongFactory.SelectableThemeNameList">
            <summary>
            Theme name list
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.LyricSongFactory.BarCount">
            <summary>
            How many bars to generate
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.LyricSongFactory.CharCountPerLine">
            <summary>
            Desired length in char for verse
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.LyricSongFactory.BarCountPerChorus">
            <summary>
            How many bar per chorus
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.LyricSongFactory.ThemeList">
            <summary>
            Desired themes
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.LyricSongFactory.ThemeBlackList">
            <summary>
            Undesired themes
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.LyricSongFactory.LyricSourceFileName">
            <summary>
            Lyric source file name
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.LyricSongFactory.LineCountPerBar">
            <summary>
            Line count per bar
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.LyricSongFactory.LanguageCode">
            <summary>
            Current language code
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.LyricSongFactory.LyricSourcePath">
            <summary>
            Lyric source folder
            </summary>
        </member>
        <member name="T:ArtificialArt.Logic.LogicDerivation">
            <summary>
            Represents a logic derivation
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.LogicDerivation.propositionList">
            <summary>
            List of propositions
            </summary>
        </member>
        <member name="M:ArtificialArt.Logic.LogicDerivation.#ctor">
            <summary>
            Build logic derivation
            </summary>
        </member>
        <member name="M:ArtificialArt.Logic.LogicDerivation.#ctor(ArtificialArt.Logic.LogicDerivation)">
            <summary>
            Build logic derivation from existing one
            </summary>
            <param name="toClone">to clone</param>
        </member>
        <member name="M:ArtificialArt.Logic.LogicDerivation.Add(ArtificialArt.Parsing.TreeExpression)">
            <summary>
            Add a proposition to the list
            </summary>
            <param name="treeExpression">tree expression</param>
            <returns>whether could add proposition</returns>
        </member>
        <member name="M:ArtificialArt.Logic.LogicDerivation.GetEnumerator">
            <summary>
            Get enumerator
            </summary>
            <returns>Get enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Logic.LogicDerivation.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get enumerator
            </summary>
            <returns>Get enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Logic.LogicDerivation.Clear">
            <summary>
            Clear the list of propositions
            </summary>
        </member>
        <member name="M:ArtificialArt.Logic.LogicDerivation.Contains(ArtificialArt.Parsing.TreeExpression)">
            <summary>
            Whether logic derivation contains tree expression
            </summary>
            <param name="treeExpression">tree expression</param>
            <returns>Whether logic derivation contains tree expression</returns>
        </member>
        <member name="P:ArtificialArt.Logic.LogicDerivation.Count">
            <summary>
            How many propositions
            </summary>
        </member>
        <member name="P:ArtificialArt.Logic.LogicDerivation.Item(System.String)">
            <summary>
            Get tree proposition from its string value
            </summary>
            <param name="stringValue">string value</param>
            <returns>tree proposition</returns>
        </member>
        <member name="T:ArtificialArt.Logic.ModusPonensManager">
            <summary>
            To validate and apply implication propositions
            (modus ponens)
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.ModusPonensManager.evaluator">
            <summary>
            To evaluate statements
            </summary>
        </member>
        <member name="M:ArtificialArt.Logic.ModusPonensManager.#ctor(ArtificialArt.Logic.Evaluator)">
            <summary>
            Build modus ponens manager
            </summary>
            <param name="evaluator">evaluator</param>
        </member>
        <member name="M:ArtificialArt.Logic.ModusPonensManager.BuildModusPonens(ArtificialArt.Parsing.TreeExpression,ArtificialArt.Logic.LogicDerivation)">
            <summary>
            Add implications to logic derivation
            (modus ponens)
            </summary>
            <param name="proposition">proposition</param>
            <param name="logicDerivation">logic derivation</param>
            <returns>whether could create new implications or not</returns>
        </member>
        <member name="T:ArtificialArt.Logic.HypotheticalSyllogismManager">
            <summary>
            Manages hypothetical syllogism
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.HypotheticalSyllogismManager.evaluator">
            <summary>
            To evaluate statements
            </summary>
        </member>
        <member name="M:ArtificialArt.Logic.HypotheticalSyllogismManager.#ctor(ArtificialArt.Logic.Evaluator)">
            <summary>
            Build hypothetical syllogism manager
            </summary>
            <param name="evaluator">evaluator</param>
        </member>
        <member name="M:ArtificialArt.Logic.HypotheticalSyllogismManager.BuildHypotheticalSyllogism(ArtificialArt.Parsing.TreeExpression,ArtificialArt.Logic.LogicDerivation,System.Collections.Generic.IEnumerable{ArtificialArt.Parsing.TreeExpression})">
            <summary>
            Expand logic derivation by building hypothetical syllogisms
            </summary>
            <param name="proposition">proposition</param>
            <param name="logicDerivation"></param>
            <param name="listToIterate">list to iterate</param>
            <returns>Whether could expand logic derivation</returns>
        </member>
        <member name="T:ArtificialArt.Logic.Evaluator">
            <summary>
            Evaluates whether proposition are true or false
            </summary>
        </member>
        <member name="M:ArtificialArt.Logic.Evaluator.IsSatisfied(ArtificialArt.Parsing.TreeExpression,ArtificialArt.Logic.LogicDerivation)">
            <summary>
            Whether composite tree expression is satisfied
            </summary>
            <param name="treeExpression">tree expression</param>
            <param name="logicDerivation">logic derivation</param>
            <returns>Whether composite expression is satisfied</returns>
        </member>
        <member name="M:ArtificialArt.Logic.Evaluator.IsSatisfied(ArtificialArt.Parsing.TreeExpression,ArtificialArt.Logic.LogicDerivation,System.Collections.Generic.IEnumerable{ArtificialArt.Parsing.TreeExpression}@)">
            <summary>
            Whether composite tree expression is satisfied
            </summary>
            <param name="treeExpression">tree expression</param>
            <param name="logicDerivation">logic derivation</param>
            <param name="proof">proof (facultative), can be null if no proof was found</param>
            <returns>Whether composite expression is satisfied</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.WordStream">
            <summary>
            Represents a stream of words that can be extracted and manipulated form a string
            </summary>
        </member>
        <member name="T:ArtificialArt.Linguistics.WordStringStream">
            <summary>
            Represents a stream of words (as strings) that can be extracted form a string
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.WordStringStream.pointer">
            <summary>
            Current pointer in word list
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.WordStringStream.wordListAsString">
            <summary>
            List of words
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.WordStringStream.wordListAsStringLowerCase">
            <summary>
            List of words in lowercase
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.WordStringStream.firstDelimiter">
            <summary>
            First delimiter before first word
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.WordStringStream.delimiterList">
            <summary>
            List of other delimiters
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.WordStringStream.listSentenceBegin">
            <summary>
            List of word indexes that correspound to begining of sentences
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordStringStream.#ctor(System.String)">
            <summary>
            Create a word stream from a source text
            </summary>
            <param name="sourceText">source text</param>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordStringStream.TryGetNextWord(System.String@,System.String@)">
            <summary>
            Try get next word and delimiter from word stream
            </summary>
            <param name="nextWord">next word</param>
            <param name="nextDelimiter">next word delimiter (can be null if it's the last word)</param>
            <returns>whether there are still words to get</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordStringStream.TryGetNextWord(System.String@,System.String@,System.Boolean@)">
            <summary>
            Try get next word and delimiter from word stream
            </summary>
            <param name="nextWord">next word</param>
            <param name="nextDelimiter">next word delimiter (can be null if it's the last word)</param>
            <param name="isSentenceBegin">whether current word is the begining of a sentence</param>
            <returns>whether there are still words to get</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordStringStream.PeekNextWord">
            <summary>
            Try to get next word without advancing pointer
            Null if no word left
            </summary>
            <returns>next word or null if none available</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordStringStream.PeekNextDelimiter">
            <summary>
            Try to get next delimiter without advancing pointer
            Null if no delimiter left
            </summary>
            <returns>next delimiter or null if none available</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordStringStream.Reset">
            <summary>
            Reset the word pointer
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordStringStream.ContainsWord(System.String)">
            <summary>
            Whether word stream contains specified word
            </summary>
            <param name="word">specified word</param>
            <returns>Whether word stream contains specified word</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordStringStream.CountWords">
            <summary>
            Word count
            </summary>
            <returns>word count</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordStringStream.GetEnumerator">
            <summary>
            To iterate in word string stream
            </summary>
            <returns>word string stream iterator</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordStringStream.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            To iterate in word string stream
            </summary>
            <returns>word string stream iterator</returns>
        </member>
        <member name="P:ArtificialArt.Linguistics.WordStringStream.FirstDelimiter">
            <summary>
            First delimiter before first word
            </summary>
        </member>
        <member name="P:ArtificialArt.Linguistics.WordStringStream.Item(System.Int32)">
            <summary>
            Get word as string at specified index
            </summary>
            <param name="index">specified index</param>
            <returns>word as string at specified index</returns>
        </member>
        <member name="F:ArtificialArt.Linguistics.WordStream.wordList">
            <summary>
            List of words
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordStream.#ctor(System.String)">
            <summary>
            Create a word stream
            </summary>
            <param name="originalText">original text</param>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordStream.TryGetNextWord(ArtificialArt.Linguistics.Word@)">
            <summary>
            Try to get next word and advance pointer
            </summary>
            <param name="word">next word (can be null if none available</param>
            <returns>Whether could get next word or not</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordStream.ToString">
            <summary>
            Convert word stream to string
            </summary>
            <returns>converted to string</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordStream.GetEnumerator">
            <summary>
            To iterate in word stream, returns a word iterator
            </summary>
            <returns>To iterate in word stream, returns a word iterator</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordStream.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            To iterate in word stream, returns a word iterator
            </summary>
            <returns>To iterate in word stream, returns a word iterator</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordStream.Last">
            <summary>
            Last word
            </summary>
            <returns>Last word</returns>
        </member>
        <member name="P:ArtificialArt.Linguistics.WordStream.Item(System.Int32)">
            <summary>
            Word at specified index
            </summary>
            <param name="index">specified index</param>
            <returns>Word at specified index</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.QuestionManagerByModalVerb">
            <summary>
            Manages questions that are questions because they begin with modal verbs
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionManagerByModalVerb.IsQuestion(System.String)">
            <summary>
            Whether question was detected becayse proposition begins with modal verb
            </summary>
            <param name="originalProposition">original proposition</param>
            <returns>Whether question was detected becayse proposition begins with modal verb</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionManagerByModalVerb.RemoveQuestion(System.String)">
            <summary>
            Remove question from proposition
            </summary>
            <param name="proposition">proposition</param>
            <returns>proposition with removed question</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.UI.PianoKeyEventArgs">
            <summary>
            Piano key event arguments
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.PianoKeyEventArgs.#ctor(System.Int32)">
            <summary>
            Piano keu event args
            </summary>
            <param name="noteID">note id</param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.UI.PianoKeyEventArgs.NoteID">
            <summary>
            Note ID
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.SysCommonType">
            <summary>
            Defines constants representing the various system common message types.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysCommonType.MidiTimeCode">
            <summary>
            Represents the MTC system common message type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysCommonType.SongPositionPointer">
            <summary>
            Represents the song position pointer type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysCommonType.SongSelect">
            <summary>
            Represents the song select type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysCommonType.TuneRequest">
            <summary>
            Represents the tune request type.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.SysCommonMessage">
            <summary>
            Represents MIDI system common messages.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysCommonMessage.#ctor(ArtificialArt.Audio.Midi.SysCommonType)">
            <summary>
            Initializes a new instance of the SysCommonMessage class with the
            specified type.
            </summary>
            <param name="type">
            The type of SysCommonMessage.
            </param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysCommonMessage.#ctor(ArtificialArt.Audio.Midi.SysCommonType,System.Int32)">
            <summary>
            Initializes a new instance of the SysCommonMessage class with the 
            specified type and the first data value.
            </summary>
            <param name="type">
            The type of SysCommonMessage.
            </param>
            <param name="data1">
            The first data value.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If data1 is less than zero or greater than 127.
            </exception>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysCommonMessage.#ctor(ArtificialArt.Audio.Midi.SysCommonType,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the SysCommonMessage class with the 
            specified type, first data value, and second data value.
            </summary>
            <param name="type">
            The type of SysCommonMessage.
            </param>
            <param name="data1">
            The first data value.
            </param>
            <param name="data2">
            The second data value.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If data1 or data2 is less than zero or greater than 127.
            </exception>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysCommonMessage.GetHashCode">
            <summary>
            Returns a value for the current SysCommonMessage suitable for use 
            in hashing algorithms.
            </summary>
            <returns>
            A hash code for the current SysCommonMessage.
            </returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysCommonMessage.Equals(System.Object)">
            <summary>
            Determines whether two SysCommonMessage instances are equal.
            </summary>
            <param name="obj">
            The SysCommonMessage to compare with the current SysCommonMessage.
            </param>
            <returns>
            <b>true</b> if the specified SysCommonMessage is equal to the 
            current SysCommonMessage; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysCommonMessage.SysCommonType">
            <summary>
            Gets the SysCommonType.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysCommonMessage.Data1">
            <summary>
            Gets the first data value.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysCommonMessage.Data2">
            <summary>
            Gets the second data value.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysCommonMessage.MessageType">
            <summary>
            Gets the MessageType.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.MetaTextBuilder">
            <summary>
            Provides functionality for building meta text messages.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MetaTextBuilder.#ctor">
            <summary>
            Initializes a new instance of the MetaMessageTextBuilder class.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MetaTextBuilder.#ctor(ArtificialArt.Audio.Midi.MetaType)">
            <summary>
            Initializes a new instance of the MetaMessageTextBuilder class with the 
            specified type.
            </summary>
            <param name="type">
            The type of MetaMessage.
            </param>
            <exception cref="T:System.ArgumentException">
            If the MetaMessage type is not a text based type.
            </exception>
            <remarks>
            The MetaMessage type must be one of the following text based 
            types:
            <list>
            <item>
            Copyright
            </item>
            <item>
            Cuepoint
            </item>
            <item>
            DeviceName
            </item>
            <item>
            InstrumentName
            </item>
            <item>
            Lyric
            </item>
            <item>
            Marker
            </item>
            <item>
            ProgramName
            </item>
            <item>
            Text
            </item>
            <item>
            TrackName
            </item>
            </list>
            If the MetaMessage is not a text based type, an exception 
            will be thrown.
            </remarks>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MetaTextBuilder.#ctor(ArtificialArt.Audio.Midi.MetaType,System.String)">
            <summary>
            Initializes a new instance of the MetaMessageTextBuilder class with the 
            specified type.
            </summary>
            <param name="type">
            The type of MetaMessage.
            </param>
            <exception cref="T:System.ArgumentException">
            If the MetaMessage type is not a text based type.
            </exception>
            <remarks>
            The MetaMessage type must be one of the following text based 
            types:
            <list>
            <item>
            Copyright
            </item>
            <item>
            Cuepoint
            </item>
            <item>
            DeviceName
            </item>
            <item>
            InstrumentName
            </item>
            <item>
            Lyric
            </item>
            <item>
            Marker
            </item>
            <item>
            ProgramName
            </item>
            <item>
            Text
            </item>
            <item>
            TrackName
            </item>
            </list>
            If the MetaMessage is not a text based type, an exception 
            will be thrown.
            <param name="text">text</param>
            </remarks>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MetaTextBuilder.#ctor(ArtificialArt.Audio.Midi.MetaMessage)">
            <summary>
            Initializes a new instance of the MetaMessageTextBuilder class with the
            specified MetaMessage.
            </summary>
            <param name="message">
            The MetaMessage to use for initializing the MetaMessageTextBuilder.
            </param>
            <exception cref="T:System.ArgumentException">
            If the MetaMessage is not a text based type.
            </exception>
            <remarks>
            The MetaMessage must be one of the following text based types:
            <list>
            <item>
            Copyright
            </item>
            <item>
            Cuepoint
            </item>
            <item>
            DeviceName
            </item>
            <item>
            InstrumentName
            </item>
            <item>
            Lyric
            </item>
            <item>
            Marker
            </item>
            <item>
            ProgramName
            </item>
            <item>
            Text
            </item>
            <item>
            TrackName
            </item>
            </list>
            If the MetaMessage is not a text based type, an exception will be 
            thrown.
            </remarks>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MetaTextBuilder.Initialize(ArtificialArt.Audio.Midi.MetaMessage)">
            <summary>
            Initializes the MetaMessageTextBuilder with the specified MetaMessage.
            </summary>
            <param name="message">
            The MetaMessage to use for initializing the MetaMessageTextBuilder.
            </param>
            <exception cref="T:System.ArgumentException">
            If the MetaMessage is not a text based type.
            </exception>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MetaTextBuilder.IsTextType(ArtificialArt.Audio.Midi.MetaType)">
            <summary>
            Indicates whether or not the specified MetaType is a text based 
            type.
            </summary>
            <param name="type">
            The MetaType to test.
            </param>
            <returns>
            <b>true</b> if the MetaType is a text based type; 
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MetaTextBuilder.Build">
            <summary>
            Builds the text MetaMessage.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MetaTextBuilder.Text">
            <summary>
            Gets or sets the text for the MetaMessage.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MetaTextBuilder.Type">
            <summary>
            Gets or sets the MetaMessage type.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the type is not a text based type.
            </exception>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MetaTextBuilder.Result">
            <summary>
            Gets the built MetaMessage.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.ChannelMessageEventArgs">
            <summary>
            Channel message event arguments
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ChannelMessageEventArgs.message">
            <summary>
            Channel message
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelMessageEventArgs.#ctor(ArtificialArt.Audio.Midi.ChannelMessage)">
            <summary>
            Channel message event arguments
            </summary>
            <param name="message">message</param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.ChannelMessageEventArgs.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.ChannelCommand">
            <summary>
            Defines constants for ChannelMessage types.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ChannelCommand.NoteOff">
            <summary>
            Represents the note-off command type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ChannelCommand.NoteOn">
            <summary>
            Represents the note-on command type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ChannelCommand.PolyPressure">
            <summary>
            Represents the poly pressure (aftertouch) command type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ChannelCommand.Controller">
            <summary>
            Represents the controller command type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ChannelCommand.ProgramChange">
            <summary>
            Represents the program change command type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ChannelCommand.ChannelPressure">
            <summary>
            Represents the channel pressure (aftertouch) command 
            type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ChannelCommand.PitchWheel">
            <summary>
            Represents the pitch wheel command type.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.ControllerType">
            <summary>
            Defines constants for controller types.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.BankSelect">
            <summary>
            The Bank Select coarse.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.ModulationWheel">
            <summary>
            The Modulation Wheel coarse.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.BreathControl">
            <summary>
            The Breath Control coarse.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.FootPedal">
            <summary>
            The Foot Pedal coarse.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.PortamentoTime">
            <summary>
            The Portamento Time coarse.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.DataEntrySlider">
            <summary>
            The Data Entry Slider coarse.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.Volume">
            <summary>
            The Volume coarse.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.Balance">
            <summary>
            The Balance coarse.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.Pan">
            <summary>
            The Pan position coarse.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.Expression">
            <summary>
            The Expression coarse.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.EffectControl1">
            <summary>
            The Effect Control 1 coarse.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.EffectControl2">
            <summary>
            The Effect Control 2 coarse.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.GeneralPurposeSlider1">
            <summary>
            The General Puprose Slider 1
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.GeneralPurposeSlider2">
            <summary>
            The General Puprose Slider 2
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.GeneralPurposeSlider3">
            <summary>
            The General Puprose Slider 3
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.GeneralPurposeSlider4">
            <summary>
            The General Puprose Slider 4
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.BankSelectFine">
            <summary>
            The Bank Select fine.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.ModulationWheelFine">
            <summary>
            The Modulation Wheel fine.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.BreathControlFine">
            <summary>
            The Breath Control fine.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.FootPedalFine">
            <summary>
            The Foot Pedal fine.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.PortamentoTimeFine">
            <summary>
            The Portamento Time fine.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.DataEntrySliderFine">
            <summary>
            The Data Entry Slider fine.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.VolumeFine">
            <summary>
            The Volume fine.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.BalanceFine">
            <summary>
            The Balance fine.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.PanFine">
            <summary>
            The Pan position fine.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.ExpressionFine">
            <summary>
            The Expression fine.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.EffectControl1Fine">
            <summary>
            The Effect Control 1 fine.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.EffectControl2Fine">
            <summary>
            The Effect Control 2 fine.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.HoldPedal1">
            <summary>
            The Hold Pedal 1.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.Portamento">
            <summary>
            The Portamento.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.SustenutoPedal">
            <summary>
            The Sustenuto Pedal.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.SoftPedal">
            <summary>
            The Soft Pedal.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.LegatoPedal">
            <summary>
            The Legato Pedal.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.HoldPedal2">
            <summary>
            The Hold Pedal 2.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.SoundVariation">
            <summary>
            The Sound Variation.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.SoundTimbre">
            <summary>
            The Sound Timbre.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.SoundReleaseTime">
            <summary>
            The Sound Release Time.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.SoundAttackTime">
            <summary>
            The Sound Attack Time.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.SoundBrightness">
            <summary>
            The Sound Brightness.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.SoundControl6">
            <summary>
            The Sound Control 6.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.SoundControl7">
            <summary>
            The Sound Control 7.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.SoundControl8">
            <summary>
            The Sound Control 8.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.SoundControl9">
            <summary>
            The Sound Control 9.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.SoundControl10">
            <summary>
            The Sound Control 10.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.GeneralPurposeButton1">
            <summary>
            The General Purpose Button 1.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.GeneralPurposeButton2">
            <summary>
            The General Purpose Button 2.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.GeneralPurposeButton3">
            <summary>
            The General Purpose Button 3.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.GeneralPurposeButton4">
            <summary>
            The General Purpose Button 4.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.EffectsLevel">
            <summary>
            The Effects Level.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.TremeloLevel">
            <summary>
            The Tremelo Level.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.ChorusLevel">
            <summary>
            The Chorus Level.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.CelesteLevel">
            <summary>
            The Celeste Level.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.PhaserLevel">
            <summary>
            The Phaser Level.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.DataButtonIncrement">
            <summary>
            The Data Button Increment.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.DataButtonDecrement">
            <summary>
            The Data Button Decrement.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.NonRegisteredParameterFine">
            <summary>
            The NonRegistered Parameter Fine.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.NonRegisteredParameterCoarse">
            <summary>
            The NonRegistered Parameter Coarse.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.RegisteredParameterFine">
            <summary>
            The Registered Parameter Fine.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.RegisteredParameterCoarse">
            <summary>
            The Registered Parameter Coarse.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.AllSoundOff">
            <summary>
            The All Sound Off.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.AllControllersOff">
            <summary>
            The All Controllers Off.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.LocalKeyboard">
            <summary>
            The Local Keyboard.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.AllNotesOff">
            <summary>
            The All Notes Off.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.OmniModeOff">
            <summary>
            The Omni Mode Off.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.OmniModeOn">
            <summary>
            The Omni Mode On.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.MonoOperation">
            <summary>
            The Mono Operation.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ControllerType.PolyOperation">
            <summary>
            The Poly Operation.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.ChannelMessage">
            <summary>
            Represents MIDI channel messages.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ChannelMessage.MidiChannelMaxValue">
            <summary>
            Maximum value allowed for MIDI channels.
            </summary> 
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelMessage.#ctor(ArtificialArt.Audio.Midi.ChannelCommand,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ChannelEventArgs class with the
            specified command, MIDI channel, and data 1 values.
            </summary>
            <param name="command">
            The command value.
            </param>
            <param name="midiChannel">
            The MIDI channel.
            </param>
            <param name="data1">
            The data 1 value.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If midiChannel is less than zero or greater than 15. Or if 
            data1 is less than zero or greater than 127.
            </exception>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelMessage.#ctor(ArtificialArt.Audio.Midi.ChannelCommand,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ChannelEventArgs class with the 
            specified command, MIDI channel, data 1, and data 2 values.
            </summary>
            <param name="command">
            The command value.
            </param>
            <param name="midiChannel">
            The MIDI channel.
            </param>
            <param name="data1">
            The data 1 value.
            </param>
            <param name="data2">
            The data 2 value.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If midiChannel is less than zero or greater than 15. Or if 
            data1 or data 2 is less than zero or greater than 127. 
            </exception>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelMessage.GetHashCode">
            <summary>
            Returns a value for the current ChannelEventArgs suitable for use in 
            hashing algorithms.
            </summary>
            <returns>
            A hash code for the current ChannelEventArgs.
            </returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelMessage.Equals(System.Object)">
            <summary>
            Determines whether two ChannelEventArgs instances are equal.
            </summary>
            <param name="obj">
            The ChannelMessageEventArgs to compare with the current ChannelEventArgs.
            </param>
            <returns>
            <b>true</b> if the specified object is equal to the current 
            ChannelMessageEventArgs; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelMessage.DataBytesPerType(ArtificialArt.Audio.Midi.ChannelCommand)">
            <summary>
            Returns a value indicating how many bytes are used for the 
            specified ChannelCommand.
            </summary>
            <param name="command">
            The ChannelCommand value to test.
            </param>
            <returns>
            The number of bytes used for the specified ChannelCommand.
            </returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelMessage.UnpackCommand(System.Int32)">
            <summary>
            Unpacks the command value from the specified integer channel 
            message.
            </summary>
            <param name="message">
            The message to unpack.
            </param>
            <returns>
            The command value for the packed message.
            </returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelMessage.UnpackMidiChannel(System.Int32)">
            <summary>
            Unpacks the MIDI channel from the specified integer channel 
            message.
            </summary>
            <param name="message">
            The message to unpack.
            </param>
            <returns>
            The MIDI channel for the pack message.
            </returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelMessage.PackMidiChannel(System.Int32,System.Int32)">
            <summary>
            Packs the MIDI channel into the specified integer message.
            </summary>
            <param name="message">
            The message into which the MIDI channel is packed.
            </param>
            <param name="midiChannel">
            The MIDI channel to pack into the message.
            </param>
            <returns>
            An integer message.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If midiChannel is less than zero or greater than 15.
            </exception>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelMessage.PackCommand(System.Int32,ArtificialArt.Audio.Midi.ChannelCommand)">
            <summary>
            Packs the command value into an integer message.
            </summary>
            <param name="message">
            The message into which the command is packed.
            </param>
            <param name="command">
            The command value to pack into the message.
            </param>
            <returns>
            An integer message.
            </returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.ChannelMessage.Command">
            <summary>
            Gets the channel command value.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.ChannelMessage.MidiChannel">
            <summary>
            Gets the MIDI channel.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.ChannelMessage.Data1">
            <summary>
            Gets the first data value.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.ChannelMessage.Data2">
            <summary>
            Gets the second data value.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.ChannelMessage.MessageType">
            <summary>
            Gets the EventType.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.Riff">
            <summary>
            Represents a single riff
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.Riff.noteList">
            <summary>
            Note list
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.Riff.midiInstrument">
            <summary>
            Midi instrument
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.Riff.isDrum">
            <summary>
            Whether riff is drum
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.Riff.tempo">
            <summary>
            Tempo
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Riff.op_Addition(ArtificialArt.Audio.Midi.Generator.Riff,ArtificialArt.Audio.Midi.Generator.IRiff)">
            <summary>
            Join two riff to make a riff pack
            </summary>
            <param name="riff1">riff 1</param>
            <param name="riff2">riff 2</param>
            <returns>riff pack</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Riff.Add(ArtificialArt.Audio.Midi.Generator.Note)">
            <summary>
            Add note
            </summary>
            <param name="item">note to add</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Riff.Clear">
            <summary>
            Remove all notes
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Riff.Contains(ArtificialArt.Audio.Midi.Generator.Note)">
            <summary>
            Whether contains note
            </summary>
            <param name="item">note</param>
            <returns>Whether contains note</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Riff.CopyTo(ArtificialArt.Audio.Midi.Generator.Note[],System.Int32)">
            <summary>
            Copy to array
            </summary>
            <param name="array">array</param>
            <param name="arrayIndex">array index</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Riff.Remove(ArtificialArt.Audio.Midi.Generator.Note)">
            <summary>
            Remove note
            </summary>
            <param name="item">note</param>
            <returns>whether removal worked</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Riff.GetEnumerator">
            <summary>
            Note enumerator
            </summary>
            <returns>Note enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Riff.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Note enumerator
            </summary>
            <returns>Note enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Riff.IndexOf(ArtificialArt.Audio.Midi.Generator.Note)">
            <summary>
            Index of note
            </summary>
            <param name="item">note</param>
            <returns>Index of note</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Riff.Insert(System.Int32,ArtificialArt.Audio.Midi.Generator.Note)">
            <summary>
            Insert note at index
            </summary>
            <param name="index">index</param>
            <param name="item">note</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Riff.RemoveAt(System.Int32)">
            <summary>
            Remove note at index
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Riff.Equals(ArtificialArt.Audio.Midi.Generator.IRiff)">
            <summary>
            Whether riffs are equal
            </summary>
            <param name="other">other riff</param>
            <returns>Whether riffs are equal</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Riff.MidiInstrument">
            <summary>
            Midi instrument
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Riff.IsDrum">
            <summary>
            Whether riff is drum
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Riff.Length">
            <summary>
            Riff's length
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Riff.Tempo">
            <summary>
            Tempo
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Riff.Count">
            <summary>
            How manu notes
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Riff.IsReadOnly">
            <summary>
            Whether riff is readonly
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Riff.Item(System.Int32)">
            <summary>
            Get note at index
            </summary>
            <param name="index">index</param>
            <returns>note at index</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.IntervalAnalyzer">
            <summary>
            Analyze interval between notes playing at the same time
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.IntervalAnalyzer.IsFoundInterval(System.Double,System.Double,System.Int32,System.Int32,ArtificialArt.Audio.Midi.Generator.RiffPack)">
            <summary>
            Whether interval is found in specified riff pack
            </summary>
            <param name="position">note position</param>
            <param name="length">note length</param>
            <param name="pitch">note pitch</param>
            <param name="intervalToFind">interval to find</param>
            <param name="riffPack">riff pack to look into</param>
            <returns>Whether interval is found in specified riff pack</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.IntervalAnalyzer.IsFoundInterval(System.Double,System.Double,System.Int32,System.Int32,ArtificialArt.Audio.Midi.Generator.Riff)">
            <summary>
            Whether interval is found in specified riff
            </summary>
            <param name="position">note position</param>
            <param name="length">note length</param>
            <param name="pitch">note pitch</param>
            <param name="intervalToFind">interval to find</param>
            <param name="riff">riff to look into</param>
            <returns>Whether interval is found in specified riff pack</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.IntervalAnalyzer.GetIntervalList(System.Double,System.Double,System.Int32,ArtificialArt.Audio.Midi.Generator.Riff)">
            <summary>
            Returns the list of intervals from simultaneous notes
            </summary>
            <param name="position">note position</param>
            <param name="length">note length</param>
            <param name="pitch">note pitch</param>
            <param name="riff">riff</param>
            <returns>list of intervals</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.IntervalAnalyzer.GetSimultaneousNotes(System.Double,System.Double,ArtificialArt.Audio.Midi.Generator.Riff)">
            <summary>
            Notes that are being played at the same time
            </summary>
            <param name="position">position</param>
            <param name="length">length</param>
            <param name="riff">riff</param>
            <returns>Notes that are being played at the same time</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.NotePlayer">
            <summary>
            Play midi notes
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.NotePlayer.Play(ArtificialArt.Audio.Midi.Generator.Note,ArtificialArt.Audio.Midi.OutputDevice,System.Int32)">
            <summary>
            Play midi notes
            </summary>
            <param name="note">note</param>
            <param name="outputDevice">output device</param>
            <param name="channel">midi channel</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.NotePlayer.NoteOn(ArtificialArt.Audio.Midi.Generator.Note,ArtificialArt.Audio.Midi.OutputDevice,System.Int32)">
            <summary>
            Note on
            </summary>
            <param name="note">note</param>
            <param name="outputDevice">midi output device</param>
            <param name="channel">midi channel</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.NotePlayer.NoteOff(ArtificialArt.Audio.Midi.Generator.Note,ArtificialArt.Audio.Midi.OutputDevice,System.Int32)">
            <summary>
            Note off
            </summary>
            <param name="note">note</param>
            <param name="outputDevice">midi output device</param>
            <param name="channel">midi channel</param>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Generator.NotePlayer.OnNoteOn">
            <summary>
            When playing note
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Generator.NotePlayer.OnNoteOff">
            <summary>
            When stopping note
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.MetaSong">
            <summary>
            Create random songs according to creation settings
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.MetaSong.riffPackBuilder">
            <summary>
            List of riff pack builders (to create song 
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.MetaSong.modulator">
            <summary>
            Key modulator
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.MetaSong.timeFrame">
            <summary>
            Time frame to turn on or off riffs in song
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaSong.#ctor(ArtificialArt.Audio.Midi.Generator.RiffPackBuilder,ArtificialArt.Audio.Midi.Generator.Modulator,ArtificialArt.Audio.Midi.Generator.TimeFrame)">
            <summary>
            Create metaSong (normally called by MetaSongBuilder)
            </summary>
            <param name="riffPackBuilder">riffPackBuilder (create metaRiffs deterministically)</param>
            <param name="modulator">key modulator</param>
            <param name="timeFrame">time frame</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaSong.BuildSong(System.Random)">
            <summary>
            Build a song that can be played
            </summary>
            <param name="random">random number generator</param>
            <returns>song that can be played</returns>
        </member>
        <member name="T:ArtificialArt.Waves.WaveFunction">
            <summary>
            Wave's function delegate type
            </summary>
            <param name="x">x</param>
            <returns>y</returns>
        </member>
        <member name="T:ArtificialArt.Waves.WaveFunctions">
            <summary>
            Represents wave functions like sine, square, saw, triangle etc
            </summary>
        </member>
        <member name="M:ArtificialArt.Waves.WaveFunctions.GetRandomWaveFunction(System.Random)">
            <summary>
            Random wave functions
            </summary>
            <param name="random">random number generator</param>
            <returns>Random wave functions</returns>
        </member>
        <member name="M:ArtificialArt.Waves.WaveFunctions.GetRandomWaveFunction(System.Random,System.Boolean)">
            <summary>
            Return random wave function
            </summary>
            <param name="random">random number generator</param>
            <param name="isOnlyContinuous">whether we only want continuous waves (default: false)</param>
            <returns>random wave function</returns>
        </member>
        <member name="P:ArtificialArt.Waves.WaveFunctions.Sine">
            <summary>
            Sine wave function
            </summary>
        </member>
        <member name="P:ArtificialArt.Waves.WaveFunctions.Square">
            <summary>
            Square wave function
            </summary>
        </member>
        <member name="P:ArtificialArt.Waves.WaveFunctions.Saw">
            <summary>
            Positive Saw wave function
            </summary>
        </member>
        <member name="P:ArtificialArt.Waves.WaveFunctions.NegativeSaw">
            <summary>
            Negative Saw wave function
            </summary>
        </member>
        <member name="T:ArtificialArt.Lyrics.Verse">
            <summary>
            Represents a song's verse
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.Verse.textValue">
            <summary>
            Text value
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.Verse._themeScore">
            <summary>
            Score for each theme (don't use directly: lazy initialization)
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.Verse.#ctor(System.String)">
            <summary>
            Create a verse
            </summary>
            <param name="textValue">text value</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.Verse.ToString">
            <summary>
            Get verse's text value
            </summary>
            <returns>verse's string value</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.Verse.Equals(ArtificialArt.Lyrics.Verse)">
            <summary>
            Whether verses are identical
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:ArtificialArt.Lyrics.Verse.Length">
            <summary>
            Verse's length
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.Verse.WordList">
            <summary>
            List of word in verse
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.Verse.ThemeScore">
            <summary>
            Score for teach theme
            </summary>
        </member>
        <member name="T:ArtificialArt.Lyrics.Theme">
            <summary>
            Theme (lexical field)
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.Theme.name">
            <summary>
            Theme's name
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.Theme.wordList">
            <summary>
            Word list
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.Theme.#ctor(System.String)">
            <summary>
            Create a theme
            </summary>
            <param name="name">theme's name</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.Theme.GetRandomWord(System.Random)">
            <summary>
            Returns random word from theme
            </summary>
            <param name="random">random number generator</param>
            <returns>random word from theme</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.Theme.Add(System.String)">
            <summary>
            Add word to theme
            </summary>
            <param name="item">word to add</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.Theme.Clear">
            <summary>
            Clear words from theme
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.Theme.Contains(System.String)">
            <summary>
            Whether theme contains word
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.Theme.CopyTo(System.String[],System.Int32)">
            <summary>
            Copy to an array of words
            </summary>
            <param name="array">array of words</param>
            <param name="arrayIndex">current index</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.Theme.Remove(System.String)">
            <summary>
            Remove word from theme
            </summary>
            <param name="item">word to remove</param>
            <returns>whether could remove</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.Theme.GetEnumerator">
            <summary>
            To iterate in words
            </summary>
            <returns>word iterator</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.Theme.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            To iterate in words
            </summary>
            <returns>word iterator</returns>
        </member>
        <member name="P:ArtificialArt.Lyrics.Theme.Name">
            <summary>
            Theme's name
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.Theme.Count">
            <summary>
            Word count
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.Theme.IsReadOnly">
            <summary>
            Whether theme is read only
            </summary>
        </member>
        <member name="T:ArtificialArt.Lyrics.LyricIO">
            <summary>
            Saves and loads lyric files
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricIO.Save(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Save lyrics
            </summary>
            <param name="lyrics">lyrics</param>
            <param name="xmlFileName">xml file name</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricIO.Load(System.String)">
            <summary>
            Load lyrics
            </summary>
            <param name="xmlFileName">xml file name</param>
            <returns>lyrics</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.VerbManager">
            <summary>
            Manages analysis of verbs
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.VerbManager.modalVerbList">
            <summary>
            List of modal verb
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.VerbManager.irregularVerbList">
            <summary>
            List of irregular verb
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.VerbManager.regularVerbList">
            <summary>
            List of regular verb
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.VerbManager.undefinedVerbList">
            <summary>
            List of undefined verb
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.VerbManager.#ctor">
            <summary>
            Create verb manager
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.VerbManager.IsVerb(System.String)">
            <summary>
            Whether the word is a verb
            </summary>
            <param name="word">word</param>
            <returns>Whether the word is a verb</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.VerbManager.IsModalVerb(System.String)">
            <summary>
            Whether the word is in modal verb list
            </summary>
            <param name="word">word</param>
            <returns>Whether the word is in modal verb list</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.VerbManager.IsIrregularVerb(System.String)">
            <summary>
            Whether the word is in irregular verb list
            </summary>
            <param name="word">word</param>
            <returns>Whether the word is in irregular verb list</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.VerbManager.IsRegularVerb(System.String)">
            <summary>
            Whether the word is in regular verb list
            </summary>
            <param name="word">word</param>
            <returns>Whether the word is in regular verb list</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.VerbManager.IsUndefinedVerb(System.String)">
            <summary>
            Whether the word is in undefined verb list
            </summary>
            <param name="word">word</param>
            <returns>Whether the word is in undefined verb list</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.Scales">
            <summary>
            Enumerations of scale presets
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Scales.#cctor">
            <summary>
            Build scales
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Scales.GetScale(System.String)">
            <summary>
            Get scape
            </summary>
            <param name="name">scale's name</param>
            <returns>scale</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Scales.GetNameList">
            <summary>
            Get name list
            </summary>
            <returns>name list</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.Major">
            <summary>
            Major
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.Minor">
            <summary>
            Minor
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.MinorHarmonic">
            <summary>
            Minor harmonic
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.Chinese">
            <summary>
            Chinese
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.Japanese">
            <summary>
            Japanese
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.Indian">
            <summary>
            Indian
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.Indonesian">
            <summary>
            Indonesian
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.Arabic">
            <summary>
            Arabic
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.ArabicPentatonic">
            <summary>
            Arabic pentatonic
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.Gypsy">
            <summary>
            Gypsy
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.GypsyPentatonic">
            <summary>
            Gypsy Pentatonic
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.Hungarian">
            <summary>
            Hungarian
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.Spanish">
            <summary>
            Spanish
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.Blues">
            <summary>
            Blues
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.Hexatonic">
            <summary>
            Hexatonic
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.Octatonic">
            <summary>
            Octatonic
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.Dodecaphonic">
            <summary>
            Dodecaphonic
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.MajorPentatonic">
            <summary>
            Major pentatonic
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scales.MinorPentatonic">
            <summary>
            Minor pentatonic
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.UI.PianoControl">
            <summary>
            Piano control
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.PianoControl.#cctor">
            <summary>
            Piano control
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.PianoControl.#ctor">
            <summary>
            Build piano control
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.PianoControl.Send(ArtificialArt.Audio.Midi.ChannelMessage)">
            <summary>
            Send message
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.PianoControl.PressPianoKey(System.Int32)">
            <summary>
            Press piano key
            </summary>
            <param name="noteID">note's id</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.PianoControl.ReleasePianoKey(System.Int32)">
            <summary>
            Release piano key
            </summary>
            <param name="noteID">note's id</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.PianoControl.PressPianoKey(System.Windows.Forms.Keys)">
            <summary>
            Press piano key
            </summary>
            <param name="k">key</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.PianoControl.ReleasePianoKey(System.Windows.Forms.Keys)">
            <summary>
            Release piano key
            </summary>
            <param name="k">key</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.PianoControl.OnResize(System.EventArgs)">
            <summary>
            When resize
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.PianoControl.Dispose(System.Boolean)">
            <summary>
            When dispose
            </summary>
            <param name="disposing">is disposing</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.PianoControl.OnPianoKeyDown(ArtificialArt.Audio.Midi.UI.PianoKeyEventArgs)">
            <summary>
            When piano key down
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.PianoControl.OnPianoKeyUp(ArtificialArt.Audio.Midi.UI.PianoKeyEventArgs)">
            <summary>
            When piano key up
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.UI.PianoControl.PianoKeyDown">
            <summary>
            Piano key down
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.UI.PianoControl.PianoKeyUp">
            <summary>
            Piano key up
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.UI.PianoControl.LowNoteID">
            <summary>
            Low note ID
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.UI.PianoControl.HighNoteID">
            <summary>
            High note ID
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.UI.PianoControl.NoteOnColor">
            <summary>
            Note's color
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.KeySignatureBuilder">
            <summary>
            Builds key signature MetaMessages.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.KeySignatureBuilder.#ctor">
            <summary>
            Initializes a new instance of the KeySignatureBuilder class.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.KeySignatureBuilder.#ctor(ArtificialArt.Audio.Midi.MetaMessage)">
            <summary>
            Initializes a new instance of the KeySignatureBuilder class with 
            the specified key signature MetaMessage.
            </summary>
            <param name="message">
            The key signature MetaMessage to use for initializing the 
            KeySignatureBuilder class.
            </param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.KeySignatureBuilder.Initialize(ArtificialArt.Audio.Midi.MetaMessage)">
            <summary>
            Initializes the KeySignatureBuilder with the specified MetaMessage.
            </summary>
            <param name="message">
            The key signature MetaMessage to use for initializing the 
            KeySignatureBuilder.
            </param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.KeySignatureBuilder.Build">
            <summary>
            Builds the key signature MetaMessage.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.KeySignatureBuilder.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.KeySignatureBuilder.Result">
            <summary>
            The build key signature MetaMessage.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.MidiInCaps">
            <summary>
            Represents MIDI input device capabilities.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiInCaps.mid">
            <summary>
            Manufacturer identifier of the device driver for the Midi output 
            device. 
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiInCaps.pid">
            <summary>
            Product identifier of the Midi output device. 
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiInCaps.driverVersion">
            <summary>
            Version number of the device driver for the Midi output device. The 
            high-order byte is the major version number, and the low-order byte 
            is the minor version number. 
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiInCaps.name">
            <summary>
            Product name.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiInCaps.support">
            <summary>
            Optional functionality supported by the device. 
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.InputDeviceException">
            <summary>
            The exception that is thrown when a error occurs with the InputDevice
            class.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InputDeviceException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the InputDeviceException class with
            the specified error code.
            </summary>
            <param name="errCode">
            The error code.
            </param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.InputDeviceException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.MidiInternalClock">
            <summary>
            Generates clock events internally.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiInternalClock.#ctor">
            <summary>
            Initializes a new instance of the MidiInternalClock class.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiInternalClock.#ctor(System.Int32)">
            <summary>
            Midi internal clock
            </summary>
            <param name="timerPeriod">timer period</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiInternalClock.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the MidiInternalClock class with the 
            specified IContainer.
            </summary>
            <param name="container">
            The IContainer to which the MidiInternalClock will add itself.
            </param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiInternalClock.Start">
            <summary>
            Starts the MidiInternalClock.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiInternalClock.Continue">
            <summary>
            Resumes tick generation from the current position.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiInternalClock.Stop">
            <summary>
            Stops the MidiInternalClock.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiInternalClock.SetTicks(System.Int32)">
            <summary>
            Set ticks
            </summary>
            <param name="ticks">ticks</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiInternalClock.Process(ArtificialArt.Audio.Midi.MetaMessage)">
            <summary>
            Process
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiInternalClock.OnDisposed(System.EventArgs)">
            <summary>
            When disposed
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiInternalClock.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MidiInternalClock.Tempo">
            <summary>
            Gets or sets the tempo in microseconds per beat.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MidiInternalClock.Ticks">
            <summary>
            Ticks
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.MidiInternalClock.Disposed">
            <summary>
            Disposed
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MidiInternalClock.Site">
            <summary>
            Site
            </summary>
        </member>
        <member name="T:ArtificialArt.WebServices.TranslationException">
            <summary>
            Exception thrown when translation fails
            </summary>
        </member>
        <member name="M:ArtificialArt.WebServices.TranslationException.#ctor(System.String)">
            <summary>
            Exception thrown when translation fails
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="T:ArtificialArt.WebServices.AbstractTranslationBot">
            <summary>
            Represents a remote translation bot
            </summary>
        </member>
        <member name="M:ArtificialArt.WebServices.AbstractTranslationBot.Translate(System.String,System.String,System.String)">
            <summary>
            Translate a string
            May throw TranslationException
            </summary>
            <param name="textSource">text to translate</param>
            <param name="fromLanguageCode">from language code</param>
            <param name="toLanguageCode">to language code</param>
            <returns>translated text</returns>
        </member>
        <member name="M:ArtificialArt.WebServices.AbstractTranslationBot.Translate(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean)">
            <summary>
            Translate a chunk of strings
            May throw TranslationException
            </summary>
            <param name="textChunkSource">text to translate</param>
            <param name="fromLanguageCode">from language code</param>
            <param name="toLanguageCode">to language code</param>
            <param name="ignoreChunkSizeMissmatch">ignore chunk size miss match, default: false</param>
            <returns>translated string chunk</returns>
        </member>
        <member name="M:ArtificialArt.WebServices.AbstractTranslationBot.Translate(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Translate a chunk of strings
            May throw TranslationException
            </summary>
            <param name="textChunkSource">text to translate</param>
            <param name="fromLanguageCode">from language code</param>
            <param name="toLanguageCode">to language code</param>
            <returns>translated string chunk</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.WordInversionManager">
            <summary>
            Manages inversions of words
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordInversionManager.InvertWordPosition(System.String,System.Int32,System.Int32)">
            <summary>
            Invert word positions in string
            </summary>
            <param name="originalString">original string</param>
            <param name="wordPosition1">word1's position</param>
            <param name="wordPosition2">word2's position</param>
            <returns>String with position of word 1 and word 2 inverted</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.Transformations">
            <summary>
            Used for linguistic transformations
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.Transformations.firstSecondPersonManager">
            <summary>
            Manages words such as you, me, I, yours mine, my, mines etc...
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.Transformations.negationAndAntonymManager">
            <summary>
            Performs negation of proposions
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.Transformations.synonymManager">
            <summary>
            Manages operations and analysys on synonyms and antonyms
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.Transformations.questionManager">
            <summary>
            Manages operations and analysis on questions
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.Transformations.imperativeManager">
            <summary>
            Manages operation and analysis on imperative sentences
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Transformations.InvertFirstSecondPerson(System.String)">
            <summary>
            Invert "YOU" and "I" from string (your and my etc...)
            </summary>
            <param name="originalText">original text</param>
            <returns>Text with YOU and I inverted (your and my etc...)</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Transformations.InvertNegation(System.String)">
            <summary>
            Invert negation of proposition by removing or adding words like "not" or by replacing a word to an antonym
            </summary>
            <param name="originalProposition">original proposition</param>
            <returns>Proposition with inverted negation or with antonyms</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Transformations.TryFindBestSynonym(System.String)">
            <summary>
            Try find best synonym for word or return null if none found
            </summary>
            <param name="word">word</param>
            <returns>best synonym found for word or return null if none found</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Transformations.TryConvertTextToSynonym(System.String)">
            <summary>
            Try replace each word of text to a valid synonym
            </summary>
            <param name="text">text</param>
            <returns>text with replaced each word of text to a valid synonym</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Transformations.TryFindBestAntonym(System.String)">
            <summary>
            Try find best antonym for word or return null if none found
            </summary>
            <param name="word">word</param>
            <returns>best antonym found for word or return null if none found</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Transformations.TryConvertTextToAntonym(System.String)">
            <summary>
            Try replace each word of text to a valid antonym
            </summary>
            <param name="text">text</param>
            <returns>text with replaced each word of text to a valid antonym</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Transformations.InvertAntonym(System.String,System.Int32)">
            <summary>
            Invert words to their antonym in proposition
            </summary>
            <param name="originalProposition">original proposition</param>
            <param name="desiredOccurenceReplacement">desired occurence replacement</param>
            <returns>Proposition with inverted antonym</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Transformations.ContainsAntonym(System.String)">
            <summary>
            Whether there is a know antonym to replace a word in original proposition
            </summary>
            <param name="originalProposition">original proposition</param>
            <returns>Whether there is a know antonym to replace a word in original proposition</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Transformations.IsQuestion(System.String)">
            <summary>
            Whether provied proposition is question or not
            </summary>
            <param name="originalProposition">provided proposition</param>
            <returns>Whether provied proposition is question or not</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Transformations.InvertQuestion(System.String)">
            <summary>
            Convert original proposition to question if it's not and to affirmation or negation if it's a question
            </summary>
            <param name="originalProposition">original proposition</param>
            <returns>Converted original proposition to question if it wasn't and to affirmation or negation if was a question</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.Transformations.IsImperative(System.String)">
            <summary>
            Whether original proposition is imperative
            </summary>
            <param name="originalProposition">original proposition</param>
            <returns>Whether original proposition is imperative</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.OutputDeviceBase">
            <summary>
            Output device base
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.OutputDeviceBase.MOM_OPEN">
            <summary>
            MOM_OPEN
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.OutputDeviceBase.MOM_CLOSE">
            <summary>
            MOM_DONE
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.OutputDeviceBase.MOM_DONE">
            <summary>
            MOM_DONE
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.midiOutReset(System.Int32)">
            <summary>
            midi out reset
            </summary>
            <param name="handle">handle</param>
            <returns>midi out reset</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.midiOutShortMsg(System.Int32,System.Int32)">
            <summary>
            midi out short message
            </summary>
            <param name="handle">handle</param>
            <param name="message">message</param>
            <returns>midi out short message</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.midiOutPrepareHeader(System.Int32,System.IntPtr,System.Int32)">
            <summary>
            midi out prepare header
            </summary>
            <param name="handle">handle</param>
            <param name="headerPtr">header pointer</param>
            <param name="sizeOfMidiHeader">size of midi header</param>
            <returns>midi out prepare header</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.midiOutUnprepareHeader(System.Int32,System.IntPtr,System.Int32)">
            <summary>
            midi out unprepare header
            </summary>
            <param name="handle">handle</param>
            <param name="headerPtr">header pointer</param>
            <param name="sizeOfMidiHeader">size of midi header</param>
            <returns>midi out unprepare header</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.midiOutLongMsg(System.Int32,System.IntPtr,System.Int32)">
            <summary>
            midi out long message
            </summary>
            <param name="handle">handle</param>
            <param name="headerPtr">header pointer</param>
            <param name="sizeOfMidiHeader">size of midi header</param>
            <returns>midi out long message</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.midiOutGetDevCaps(System.Int32,ArtificialArt.Audio.Midi.MidiOutCaps@,System.Int32)">
            <summary>
            Get midi out get device caps
            </summary>
            <param name="deviceID">device id</param>
            <param name="caps">caps</param>
            <param name="sizeOfMidiOutCaps">size of midi out caps</param>
            <returns>midi out get device caps</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.midiOutGetNumDevs">
            <summary>
            get midi out get nummber devices
            </summary>
            <returns>midi device numbers</returns>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.OutputDeviceBase.delegateQueue">
            <summary>
            For releasing buffers.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.OutputDeviceBase.lockObject">
            <summary>
            Lock object
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.OutputDeviceBase.bufferCount">
            <summary>
            The number of buffers still in the queue.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.OutputDeviceBase.headerBuilder">
            <summary>
            Builds MidiHeader structures for sending system exclusive messages.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.OutputDeviceBase.hndle">
            <summary>
            Device handle
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.#ctor(System.Int32)">
            <summary>
            Get output device
            </summary>
            <param name="deviceID">device id</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.Finalize">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">is disposing</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.Send(ArtificialArt.Audio.Midi.ChannelMessage)">
            <summary>
            Send message
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.Send(ArtificialArt.Audio.Midi.SysExMessage)">
            <summary>
            Send message
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.Send(ArtificialArt.Audio.Midi.SysCommonMessage)">
            <summary>
            Send message
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.Send(ArtificialArt.Audio.Midi.SysRealtimeMessage)">
            <summary>
            Send message
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.Send(System.Int32)">
            <summary>
            Send message
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.GetDeviceCapabilities(System.Int32)">
            <summary>
            Get device capabilities
            </summary>
            <param name="deviceID">device id</param>
            <returns>device capabilities</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.HandleMessage(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handle windows messages
            </summary>
            <param name="handle">handle</param>
            <param name="msg">message</param>
            <param name="instance">instance</param>
            <param name="param1">param 1</param>
            <param name="param2">param 2</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.ReleaseBuffer(System.Object)">
            <summary>
            Release buffer
            </summary>
            <param name="state">state</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceBase.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.OutputDeviceBase.Handle">
            <summary>
            Handle
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.OutputDeviceBase.DeviceCount">
            <summary>
            Device count
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.OutputDeviceBase.GenericDelegate`1">
            <summary>
            Generic delegate
            </summary>
            <typeparam name="T">type</typeparam>
            <param name="args">arguments</param>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.OutputDeviceBase.MidiOutProc">
            <summary>
            Represents the method that handles messages from Windows.
            </summary>
            <param name="handle">handle</param>
            <param name="msg">message</param>
            <param name="instance">instance</param>
            <param name="param1">parameter 1</param>
            <param name="param2">parameter 2</param>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.BarBlock">
            <summary>
            Bar block
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.BarBlock.internalList">
            <summary>
            List of number
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.BarBlock.#ctor">
            <summary>
            Create bar block
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.BarBlock.#ctor(System.Int32)">
            <summary>
            Create bar block
            </summary>
            <param name="valueToAdd">value to add</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.BarBlock.#ctor(ArtificialArt.Audio.Midi.Generator.BarBlock)">
            <summary>
            Create bar block
            </summary>
            <param name="toClone">bar block to clone</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.BarBlock.IndexOf(System.Int32)">
            <summary>
            Index of item
            </summary>
            <param name="item">item</param>
            <returns>Index of item</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.BarBlock.Insert(System.Int32,System.Int32)">
            <summary>
            Insert number at index
            </summary>
            <param name="index">index</param>
            <param name="item">number at index</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.BarBlock.RemoveAt(System.Int32)">
            <summary>
            Remove number at index
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.BarBlock.Add(System.Int32)">
            <summary>
            Add number
            </summary>
            <param name="item">number</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.BarBlock.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.BarBlock.Contains(System.Int32)">
            <summary>
            Whether contains number
            </summary>
            <param name="item">number</param>
            <returns>contains number</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.BarBlock.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copy to array
            </summary>
            <param name="array">array</param>
            <param name="arrayIndex">array index</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.BarBlock.Remove(System.Int32)">
            <summary>
            Remove number
            </summary>
            <param name="item">number</param>
            <returns>whether removal worked</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.BarBlock.GetEnumerator">
            <summary>
            Number enumerator
            </summary>
            <returns>Number enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.BarBlock.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Number enumerator
            </summary>
            <returns>Number enumerator</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.BarBlock.Item(System.Int32)">
            <summary>
            Number at index
            </summary>
            <param name="index">index</param>
            <returns>Number at index</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.BarBlock.Count">
            <summary>
            How many bar
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.BarBlock.IsReadOnly">
            <summary>
            Whether bar block is read only
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.MetaRiffLoader">
            <summary>
            Loads meta riff from their name
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.MetaRiffLoader.metaRiffClassNameList">
            <summary>
            metaRiff class name list
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiffLoader.#ctor">
            <summary>
            Build metariff loader
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiffLoader.Load(System.String)">
            <summary>
            Load metaRiff
            </summary>
            <param name="metaRiffName">metaRiff's name</param>
            <returns>metaRiff</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiffLoader.GetEnumerator">
            <summary>
            MetaRiff name enumerator
            </summary>
            <returns>MetaRiff name enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiffLoader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            MetaRiff name enumerator
            </summary>
            <returns>MetaRiff name enumerator</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.MidiGeneratorIO">
            <summary>
            Saves and loads predefined midi generators
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MidiGeneratorIO.Save(ArtificialArt.Audio.Midi.Generator.PredefinedGenerator,System.String)">
            <summary>
            Save predefined midi generator
            </summary>
            <param name="generator">generator</param>
            <param name="xmlFileName">xml file name</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MidiGeneratorIO.Load(System.String)">
            <summary>
            Load predefined midi generator
            </summary>
            <param name="xmlFileName">xml file name</param>
            <returns>predefined midi generator</returns>
        </member>
        <member name="T:ArtificialArt.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.antonymList">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;wordMatrix&gt;
                &lt;fromWord name=&quot;abatable&quot;&gt;
                    &lt;toWord name=&quot;unstoppable&quot; statisticValue=&quot;1&quot; /&gt;
                &lt;/fromWord&gt;
                &lt;fromWord name=&quot;abdicable&quot;&gt;
                    &lt;toWord name=&quot;wanted&quot; statisticValue=&quot;1&quot; /&gt;
                &lt;/fromWord&gt;
                &lt;fromWord name=&quot;abdominous&quot;&gt;
                    &lt;toWord name=&quot;thin&quot; statisticValue=&quot;1&quot; /&gt;
                    &lt;toWord name=&quot;lean&quot; statisticValue=&quot;1&quot; /&gt;
                &lt;/fromWord&gt;
                &lt;fromWord name=&quot;abeyant&quot;&gt;
                    &lt;toWord name=&quot;active&quot; statisticValue=&quot;1&quot; /&gt;
                &lt;/fromW [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.dutch_language_matrix">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;wordMatrix&gt;
                &lt;fromWord name=&quot; N&quot;&gt;
                    &lt;toWord name=&quot;E&quot; statisticValue=&quot;701&quot; /&gt;
                    &lt;toWord name=&quot;O&quot; statisticValue=&quot;636&quot; /&gt;
                    &lt;toWord name=&quot;A&quot; statisticValue=&quot;1405&quot; /&gt;
                    &lt;toWord name=&quot;U&quot; statisticValue=&quot;82&quot; /&gt;
                    &lt;toWord name=&quot;I&quot; statisticValue=&quot;611&quot; /&gt;
                    &lt;toWord name=&quot;.&quot; statisticValue=&quot;19&quot; /&gt;
                    &lt;toWord name=&quot;S&quot; statisticValue=&quot;5&quot; /&gt;
                    &lt;toWord name=&quot;R&quot; statisticValue=&quot;1&quot; /&gt;
                    &lt;toWord name=&quot;L&quot; statisticVal [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.dutch_language_matrix1">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;wordMatrix&gt;
                &lt;fromWord name=&quot; N&quot;&gt;
                    &lt;toWord name=&quot;E&quot; statisticValue=&quot;701&quot; /&gt;
                    &lt;toWord name=&quot;O&quot; statisticValue=&quot;636&quot; /&gt;
                    &lt;toWord name=&quot;A&quot; statisticValue=&quot;1405&quot; /&gt;
                    &lt;toWord name=&quot;U&quot; statisticValue=&quot;82&quot; /&gt;
                    &lt;toWord name=&quot;I&quot; statisticValue=&quot;611&quot; /&gt;
                    &lt;toWord name=&quot;.&quot; statisticValue=&quot;19&quot; /&gt;
                    &lt;toWord name=&quot;S&quot; statisticValue=&quot;5&quot; /&gt;
                    &lt;toWord name=&quot;R&quot; statisticValue=&quot;1&quot; /&gt;
                    &lt;toWord name=&quot;L&quot; statisticVal [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.english_language_matrix">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;wordMatrix&gt;
                &lt;fromWord name=&quot; T&quot;&gt;
                    &lt;toWord name=&quot;H&quot; statisticValue=&quot;12672&quot; /&gt;
                    &lt;toWord name=&quot;O&quot; statisticValue=&quot;3124&quot; /&gt;
                    &lt;toWord name=&quot;E&quot; statisticValue=&quot;366&quot; /&gt;
                    &lt;toWord name=&quot;A&quot; statisticValue=&quot;316&quot; /&gt;
                    &lt;toWord name=&quot;R&quot; statisticValue=&quot;757&quot; /&gt;
                    &lt;toWord name=&quot;U&quot; statisticValue=&quot;121&quot; /&gt;
                    &lt;toWord name=&quot;I&quot; statisticValue=&quot;292&quot; /&gt;
                    &lt;toWord name=&quot;W&quot; statisticValue=&quot;178&quot; /&gt;
                    &lt;toWord name=&quot;Y&quot; stat [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.french_language_matrix">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;wordMatrix&gt;
                &lt;fromWord name=&quot; H&quot;&gt;
                    &lt;toWord name=&quot;I&quot; statisticValue=&quot;53&quot; /&gt;
                    &lt;toWord name=&quot;U&quot; statisticValue=&quot;73&quot; /&gt;
                    &lt;toWord name=&quot;A&quot; statisticValue=&quot;219&quot; /&gt;
                    &lt;toWord name=&quot;O&quot; statisticValue=&quot;450&quot; /&gt;
                    &lt;toWord name=&quot;É&quot; statisticValue=&quot;77&quot; /&gt;
                    &lt;toWord name=&quot;E&quot; statisticValue=&quot;123&quot; /&gt;
                    &lt;toWord name=&quot;Ô&quot; statisticValue=&quot;5&quot; /&gt;
                    &lt;toWord name=&quot;Y&quot; statisticValue=&quot;8&quot; /&gt;
                    &lt;toWord name=&quot;.&quot; statisticValue [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.german_language_matrix">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;wordMatrix&gt;
                &lt;fromWord name=&quot; G&quot;&gt;
                    &lt;toWord name=&quot;E&quot; statisticValue=&quot;2407&quot; /&gt;
                    &lt;toWord name=&quot;R&quot; statisticValue=&quot;1102&quot; /&gt;
                    &lt;toWord name=&quot;O&quot; statisticValue=&quot;108&quot; /&gt;
                    &lt;toWord name=&quot;A&quot; statisticValue=&quot;257&quot; /&gt;
                    &lt;toWord name=&quot;I&quot; statisticValue=&quot;139&quot; /&gt;
                    &lt;toWord name=&quot;L&quot; statisticValue=&quot;115&quot; /&gt;
                    &lt;toWord name=&quot;U&quot; statisticValue=&quot;69&quot; /&gt;
                    &lt;toWord name=&quot;Ä&quot; statisticValue=&quot;5&quot; /&gt;
                    &lt;toWord name=&quot;N&quot; statisti [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.irregularVerbList">
             <summary>
               Looks up a localized string similar to is
            am
            are
            awake	awoke	awoken
            be	was  were	been
            beat	beat	beaten
            become	became	become
            begin	began	begun
            bend	bent	bent
            bet	bet	bet
            bid	bid	bid
            bite	bit	bitten
            blow	blew	blown
            break	broke	broken
            bring	brought	brought
            broadcast	broadcast	broadcast
            build	built	built
            burn	burned burnt	burned burnt
            buy	bought	bought
            catch	caught	caught
            choose	chose	chosen
            come	came	come
            cost	cost	cost
            cut	cut	cut
            dig	dug	dug
            do	did	done
            draw	drew	drawn
            dream	dreamed dreamt	dreamed dreamt
            drive	drove	dr [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.italian_language_matrix">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;wordMatrix&gt;
                &lt;fromWord name=&quot; L&quot;&gt;
                    &lt;toWord name=&quot;&apos;&quot; statisticValue=&quot;1669&quot; /&gt;
                    &lt;toWord name=&quot;E&quot; statisticValue=&quot;1223&quot; /&gt;
                    &lt;toWord name=&quot;A&quot; statisticValue=&quot;3263&quot; /&gt;
                    &lt;toWord name=&quot;I&quot; statisticValue=&quot;407&quot; /&gt;
                    &lt;toWord name=&quot;O&quot; statisticValue=&quot;642&quot; /&gt;
                    &lt;toWord name=&quot;U&quot; statisticValue=&quot;280&quot; /&gt;
                    &lt;toWord name=&quot;À&quot; statisticValue=&quot;5&quot; /&gt;
                    &lt;toWord name=&quot;Y&quot; statisticValue=&quot;2&quot; /&gt;
                    &lt;toWord name=&quot;Ì&quot; statisti [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.modalVerbList">
             <summary>
               Looks up a localized string similar to can
            shall
            will
            must
            may
            could
            might
            ought
            should
            would.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.polish_language_matrix">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;wordMatrix&gt;
                &lt;fromWord name=&quot; P&quot;&gt;
                    &lt;toWord name=&quot;O&quot; statisticValue=&quot;5244&quot; /&gt;
                    &lt;toWord name=&quot;A&quot; statisticValue=&quot;1223&quot; /&gt;
                    &lt;toWord name=&quot;Ó&quot; statisticValue=&quot;322&quot; /&gt;
                    &lt;toWord name=&quot;R&quot; statisticValue=&quot;3324&quot; /&gt;
                    &lt;toWord name=&quot;I&quot; statisticValue=&quot;456&quot; /&gt;
                    &lt;toWord name=&quot;L&quot; statisticValue=&quot;167&quot; /&gt;
                    &lt;toWord name=&quot;U&quot; statisticValue=&quot;93&quot; /&gt;
                    &lt;toWord name=&quot;.&quot; statisticValue=&quot;90&quot; /&gt;
                    &lt;toWord name=&quot;S&quot; statis [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.portuguese_language_matrix">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;wordMatrix&gt;
                &lt;fromWord name=&quot; P&quot;&gt;
                    &lt;toWord name=&quot;O&quot; statisticValue=&quot;2767&quot; /&gt;
                    &lt;toWord name=&quot;A&quot; statisticValue=&quot;2333&quot; /&gt;
                    &lt;toWord name=&quot;E&quot; statisticValue=&quot;1748&quot; /&gt;
                    &lt;toWord name=&quot;R&quot; statisticValue=&quot;2619&quot; /&gt;
                    &lt;toWord name=&quot;I&quot; statisticValue=&quot;215&quot; /&gt;
                    &lt;toWord name=&quot;Á&quot; statisticValue=&quot;30&quot; /&gt;
                    &lt;toWord name=&quot;L&quot; statisticValue=&quot;140&quot; /&gt;
                    &lt;toWord name=&quot;Y&quot; statisticValue=&quot;2&quot; /&gt;
                    &lt;toWord name=&quot;Ó&quot; statis [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.postpositionList">
             <summary>
               Looks up a localized string similar to ago
            apart
            aside
            away
            hence
            notwithstanding
            on
            through.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.prepositionList">
             <summary>
               Looks up a localized string similar to aboard
            about
            above
            absent
            across
            after
            against
            of
            along
            alongside
            amid
            amidst
            among
            around
            as
            at
            atop
            before
            behind
            below
            beneath
            beside
            between
            by
            despite
            down
            during
            except
            following
            for
            from
            in
            inside
            like
            mid
            minus
            near
            next
            notwithstanding
            of
            off
            on
            onto
            opposite
            outside
            over
            past
            plus
            regarding
            round
            save
            since
            than
            through
            throughout
            till
            times
            to
            toward
            under
            underneath
            until
            up
            upon
            with
            to
            within
            without
            aboard
            about
            above
            acro [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.pronounList">
             <summary>
               Looks up a localized string similar to all   another   any   anybody   anyone   anything
            both
            each   each other   either   everybody   everyone   everything
            few
            he   her   hers   herself   him   himself   his
            I   it   its   itself
            little
            many   me   mine   more   most   much   myself
            neither   no one   nobody   none   nothing
            one   one another   other   others   ours   ourselves
            several   she   some   somebody   someone   something
            that   theirs   them   themselves   these   they   this   those
            us
            we   what   whatever   which   whic [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.questionBeginWordList">
             <summary>
               Looks up a localized string similar to what
            when
            where
            which
            who
            whom
            whose
            why
            how
            do
            does
            is
            are
            isn&apos;t
            aren&apos;t
            won&apos;t
            shan&apos;t
            am
            were
            did
            didn&apos;t.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.questionEndingWordList">
             <summary>
               Looks up a localized string similar to what
            who
            whom
            whose.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.regularVerbList">
             <summary>
               Looks up a localized string similar to accept
            add
            admire
            admit
            advise
            afford
            agree
            alert
            allow
            amuse
            analyse
            announce
            annoy
            answer
            apologise
            appear
            applaud
            appreciate
            approve
            argue
            arrange
            arrest
            arrive
            ask
            attach
            attack
            attempt
            attend
            attract
            avoid
             
            back
            bake
            balance
            ban
            bang
            bare
            bat
            bathe
            battle
            beam
            beg
            behave
            belong
            bleach
            bless
            blind
            blink
            blot
            blush
            boast
            boil
            bolt
            bomb
            book
            bore
            borrow
            bounce
            bow
            box
            brake
            brake
            branch
            breathe
            bruise
            brush
            bubble
            bump
            burn
            bury
            buzz
             [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.spanish_language_matrix">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;wordMatrix&gt;
                &lt;fromWord name=&quot; L&quot;&gt;
                    &lt;toWord name=&quot;A&quot; statisticValue=&quot;7870&quot; /&gt;
                    &lt;toWord name=&quot;O&quot; statisticValue=&quot;3170&quot; /&gt;
                    &lt;toWord name=&quot;L&quot; statisticValue=&quot;396&quot; /&gt;
                    &lt;toWord name=&quot;I&quot; statisticValue=&quot;467&quot; /&gt;
                    &lt;toWord name=&quot;U&quot; statisticValue=&quot;272&quot; /&gt;
                    &lt;toWord name=&quot;E&quot; statisticValue=&quot;482&quot; /&gt;
                    &lt;toWord name=&quot;Í&quot; statisticValue=&quot;102&quot; /&gt;
                    &lt;toWord name=&quot;&apos;&quot; statisticValue=&quot;2&quot; /&gt;
                    &lt;toWord name=&quot;Ó&quot; statist [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.subordinatingConjunctionBeforeSubjectList">
             <summary>
               Looks up a localized string similar to although
            because
            time
            though
            if
            case
            that
            once
            since
            though
            unless
            until
            when 
            whenever
            whereas
            while
            whether
            wherever
            who.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.synonymList">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;wordMatrix&gt;
                &lt;fromWord name=&quot;aah&quot;&gt;
                    &lt;toWord name=&quot;ooh&quot; statisticValue=&quot;1&quot; /&gt;
                    &lt;toWord name=&quot;exclaim&quot; statisticValue=&quot;1&quot; /&gt;
                    &lt;toWord name=&quot;cry&quot; statisticValue=&quot;1&quot; /&gt;
                    &lt;toWord name=&quot;cry out&quot; statisticValue=&quot;1&quot; /&gt;
                    &lt;toWord name=&quot;outcry&quot; statisticValue=&quot;1&quot; /&gt;
                    &lt;toWord name=&quot;call out&quot; statisticValue=&quot;1&quot; /&gt;
                    &lt;toWord name=&quot;shout&quot; statisticValue=&quot;1&quot; /&gt;
                &lt;/fromWord&gt;
                &lt;fromWord name=&quot;abacinate&quot;&gt;
                    &lt;toWo [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.themeFile_themes_en">
             <summary>
               Looks up a localized string similar to &lt;theme name=&quot;love&quot;&gt;
            love, baby, feel, need, girl, 
            girlfriend, heart, care, kiss, kisses, 
            kissed, lips, honey, darling, darlin, 
            together, loves, respect, lovers, kissing, 
            gurl, gal, romance, tender, adore, 
            jealousy, relationship, virgin, sweetheart, girlfriends, 
            cherish, romantic, flirt, loving, trust, 
            miss, desire, beauty, feelings, loved, 
            pure, embrace, dear, passion, lover, 
            emotions, babe, soft, precious, couple, 
            desires, lovin, lovely, delight, mary, 
            emotion, caress, embraced, comp [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.themeFile_themes_fr">
             <summary>
               Looks up a localized string similar to &lt;theme name=&quot;love&quot;&gt;
            amour, coeur, deux, destin, aime, 
            ensemble, aiment, donnez, aimez, sourire, 
            rouge, confiance, sentiment, coeurs, doux, 
            aimer, amoureux, sentiments, cher, chaleur, 
            passion, douce, charme, bébé, aimé, 
            baisé, épouse, pur, embrassez, émotions, 
            étreinte, embrasser, doucement, embrassé, pure, 
            aimons, chéri, roses, désirs, amie, 
            rose, émotion, partager, embrasse, harmonie, 
            baisers, confort, précieux, pardonnez, romance, 
            compassion, mariée, pureté, caresse, charmes, 
            aimabl [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.undefinedVerbList">
             <summary>
               Looks up a localized string similar to used
            united
            turned
            wanted
            involved
            based
            expected
            concerned
            provided
            led
            added
            decided
            tried
            followed
            described
            moved
            allowed
            carried
            considered
            received
            increased
            produced
            continued
            worked
            developed
            included
            reached
            reported
            established
            opened
            changed
            played
            suggested
            appeared
            feed
            offered
            passed
            published
            showed
            announced
            prepared
            limited
            raised
            returned
            married
            designed
            closed
            stopped
            walked
            failed
            associated
            remained
            interested
            accepted
            killed
            arriv [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ArtificialArt.Properties.Resources.wordToPutNotAfterList">
             <summary>
               Looks up a localized string similar to is
            are
            can
            shall
            will
            must
            may
            could
            might
            ought
            should
            would
            it&apos;s
            he&apos;s
            she&apos;s
            you&apos;re
            they&apos;re
            we&apos;re.
             </summary>
        </member>
        <member name="T:ArtificialArt.PathFinding.PathFinder">
            <summary>
            Represents an AStar path finder
            </summary>
        </member>
        <member name="F:ArtificialArt.PathFinding.PathFinder.closedList">
            <summary>
            List of closed nodes
            </summary>
        </member>
        <member name="F:ArtificialArt.PathFinding.PathFinder.openList">
            <summary>
            List of open nodes
            </summary>
        </member>
        <member name="M:ArtificialArt.PathFinding.PathFinder.#ctor">
            <summary>
            Build AStar Path Finder
            </summary>
        </member>
        <member name="M:ArtificialArt.PathFinding.PathFinder.GetOptimalNode">
            <summary>
            Get optimal node
            </summary>
        </member>
        <member name="P:ArtificialArt.PathFinding.PathFinder.OpenList">
            <summary>
            Open list
            </summary>
        </member>
        <member name="P:ArtificialArt.PathFinding.PathFinder.ClosedList">
            <summary>
            Closed list
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseConstructionSettings.AlgorithmStraight">
            <summary>
            Identifies straight algorithm
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseConstructionSettings.AlgorithmSplice">
            <summary>
            Identifies splicing based algorithm
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseConstructionSettings.AlgorithmCryptic">
            <summary>
            Identifies cryptic char based markov chain algorithm
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseConstructionSettings.AlgorithmAnalogy">
            <summary>
            Identifies algorithm working with analogies
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseConstructionSettings.AlgorithmInterleavedAnalogy">
            <summary>
            Identifies algorithm working with interleaved analogies
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseConstructionSettings.AlgorithmRhyme">
            <summary>
            Identifies algorithm working with rhymes
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseConstructionSettings.AlgorithmWords">
            <summary>
            Identifies algorithm working with words
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseConstructionSettings.DefaultDesiredLength">
            <summary>
            Default desired length in char
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseConstructionSettings.reversedLyricsFileName">
            <summary>
            Reversed order lyrics file name
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseConstructionSettings.defaultLanguageCode">
            <summary>
            Default language code
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseConstructionSettings.algorithm">
            <summary>
            Current algorithm
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseConstructionSettings.desiredLength">
            <summary>
            Desired length for verse
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseConstructionSettings.themeList">
            <summary>
            Internal theme list, do not use directly : lazy initialization
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseConstructionSettings.themeBlackList">
            <summary>
            Internal theme black list, do not use directly : lazy initialization
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseConstructionSettings.lyricSource">
            <summary>
            Straight ordered lyrics
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseConstructionSettings.random">
            <summary>
            Random number generator
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseConstructionSettings.languageCode">
            <summary>
            Language Code
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseConstructionSettings.ResetThemes">
            <summary>
            Reset current selected themes
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseConstructionSettings.AddTheme(ArtificialArt.Lyrics.Theme)">
            <summary>
            Add a theme to current theme list
            </summary>
            <param name="theme">theme to add</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseConstructionSettings.CensorTheme(ArtificialArt.Lyrics.Theme)">
            <summary>
            Censor a theme 
            </summary>
            <param name="theme">theme to censor</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseConstructionSettings.ClearThemes">
            <summary>
            Clear desired and undesired themes
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseConstructionSettings.SetLanguageCode(System.String,System.String,ArtificialArt.Lyrics.ThemeLoader)">
            <summary>
            Set language code
            </summary>
            <param name="lyricSourcePath">lyric source directory</param>
            <param name="languageCode">language code</param>
            <param name="themeLoader">theme loader</param>
        </member>
        <member name="P:ArtificialArt.Lyrics.VerseConstructionSettings.Algorithm">
            <summary>
            Set which algorithm to use
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.VerseConstructionSettings.DesiredLength">
            <summary>
            Desired length in char for verse
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.VerseConstructionSettings.LyricSource">
            <summary>
            Ordered lyric source
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.VerseConstructionSettings.ThemeList">
            <summary>
            Desired themes
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.VerseConstructionSettings.ThemeBlackList">
            <summary>
            Undesired themes
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.VerseConstructionSettings.Random">
            <summary>
            Random number generator
            </summary>
        </member>
        <member name="T:ArtificialArt.Logic.Deriver">
            <summary>
            Makes logic derivations
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.Deriver.parser">
            <summary>
            Logic parser
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.Deriver.temporaryPropositionList">
            <summary>
            Temporary list of propositions
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.Deriver.modusPonensManager">
            <summary>
            To validate and apply implication propositions
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.Deriver.modusTollensManager">
            <summary>
            To create new propositions by applying modus tollens
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.Deriver.hypotheticalSyllogismManager">
            <summary>
            Hypothetical syllogism manager
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.Deriver.disjunctiveSyllogismManager">
            <summary>
            Disjunctive syllogism manager
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.Deriver.splitAndOperatorManager">
            <summary>
            Creates new proposition by splitting exsting propositions for which the immediate operator is and
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.Deriver.trueImplyFalseManager">
            <summary>
            Manages stuff like P->!P, therefore !P, and !P->P, therefor P
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.Deriver.aImplyBAndCManager">
            <summary>
            Manages stuff like A->BandC, therefore A->B, A->C
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.Deriver.aOrBImplyCManager">
            <summary>
            Manages stuff like A||B->C, therefore A->C, B->C
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.Deriver.evaluator">
            <summary>
            Evaluator
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.Deriver.negator">
            <summary>
            To negate propositions in a clean way
            </summary>
        </member>
        <member name="M:ArtificialArt.Logic.Deriver.#ctor">
            <summary>
            Makes logic derivations
            </summary>
        </member>
        <member name="M:ArtificialArt.Logic.Deriver.Derive(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create brand new propositions from original one
            </summary>
            <param name="expressionList">list of propositions</param>
            <returns>logic derivation</returns>
        </member>
        <member name="M:ArtificialArt.Logic.Deriver.TryProove(ArtificialArt.Logic.LogicDerivation,System.String,ArtificialArt.Logic.SolvingMethod,System.Collections.Generic.IEnumerable{ArtificialArt.Parsing.TreeExpression}@)">
            <summary>
            Try to proove a statement using the provided solving method
            can sometimes throw LogicDerivationNoConclusionException
            </summary>
            <param name="derivation">logic derivation</param>
            <param name="statement">statement to prove or disprove</param>
            <param name="solvingMethog">solving method</param>
            <param name="proof">proof or refutation (can be null if no proof was found)</param>
            <returns>whether the statement was true or false
            can sometimes throw LogicDerivationNoConclusionException</returns>
        </member>
        <member name="M:ArtificialArt.Logic.Deriver.Derive(ArtificialArt.Logic.LogicDerivation)">
            <summary>
            Expand new proposition from logic derivation
            </summary>
            <param name="logicDerivation">logic derivation</param>
        </member>
        <member name="T:ArtificialArt.Linguistics.WordRemover">
            <summary>
            Used to remove words from strings
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordRemover.RemoveWord(System.String,System.String,System.Int32)">
            <summary>
            Remove word from string
            </summary>
            <param name="original">original string</param>
            <param name="wordToRemove">word to remove</param>
            <param name="desiredOccurenceCount">how many times we remove it (default: infinite: 0)</param>
            <returns>String with specified word removed</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordRemover.RemoveWord(System.String,System.Int32,System.Boolean)">
            <summary>
            Remove word from string by word position
            </summary>
            <param name="original">original string</param>
            <param name="wordPosition">position of word to remove (starting at 0)</param>
            <param name="isKeepDelimiterAfterNotBefore">true: keep delimiter after removed word, false: keep delimiter before word to remove</param>
            <returns>String with removed word at specified position with specified delimiter kept</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordRemover.GetLongestDelimiter(System.String,System.String)">
            <summary>
            From two delimiters, return the longest one
            </summary>
            <param name="delimiter1">delimiter 1</param>
            <param name="delimiter2">delemiter 2</param>
            <returns>longest of the two</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.WordInsertionManager">
            <summary>
            Manages insertions of words
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordInsertionManager.InsertWords(System.String,System.String,System.Int32)">
            <summary>
            Insert a word or a groupe of word at provided index (0: before everything)
            </summary>
            <param name="originalString">original string</param>
            <param name="wordsToInsert">words to insert</param>
            <param name="desiredIndex">desired position index</param>
            <returns>new string with inserted words</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.LanguageManager">
            <summary>
            Manages language detection and conversion
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LanguageManager.languageDetector">
            <summary>
            Language detector
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LanguageManager.languageParodyTextGenerator">
            <summary>
            Text generator
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LanguageManager.languageMutator">
            <summary>
            Convert a text to something that looks like another language
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageManager.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageManager.DetectLanguage(System.String)">
            <summary>
            Detect language from text string
            </summary>
            <param name="text">text string</param>
            <returns>detected language</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageManager.GenerateLanguageParodyText(ArtificialArt.Linguistics.LanguageNames,System.Int32,System.Random)">
            <summary>
            Generate language parody text
            </summary>
            <param name="languageName">language</param>
            <param name="letterCount">how many letter</param>
            <param name="random">random number generator</param>
            <returns>random text</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageManager.TranslateByParody(System.String,ArtificialArt.Linguistics.LanguageNames,System.Random)">
            <summary>
            Translate a text to something that looks like something from another language
            </summary>
            <param name="textSource">text source</param>
            <param name="desiredLanguageName">desired language name</param>
            <param name="random">random number generator</param>
            <returns>something that looks like something from another language</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageManager.GetLanguageNameString(ArtificialArt.Linguistics.LanguageNames)">
            <summary>
            Build language name as string
            </summary>
            <param name="languageName">language name from enum</param>
            <returns>language name as string</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.UI.PianoControlDialog">
            <summary>
            Piano control dialog
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.UI.PianoControlDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.PianoControlDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.PianoControlDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.PianoControlDialog.#ctor">
            <summary>
            Build piano control dialog
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.UI.PianoControlDialog.LowNoteID">
            <summary>
            Low note ID
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.UI.PianoControlDialog.HighNoteID">
            <summary>
            High note ID
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.MetaMessageEventArgs">
            <summary>
            Meta Message event args
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MetaMessageEventArgs.message">
            <summary>
            Meta message
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MetaMessageEventArgs.#ctor(ArtificialArt.Audio.Midi.MetaMessage)">
            <summary>
            Meta message event arguments
            </summary>
            <param name="message">message</param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MetaMessageEventArgs.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.GeneralMidiInstrument">
            <summary>
            Defines constants representing the General MIDI instrument set.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.AcousticGrandPiano">
            <summary>
            Acoustic grand piano
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.BrightAcousticPiano">
            <summary>
            Bright acoustic piano
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.ElectricGrandPiano">
            <summary>
            Electric grand piano
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.HonkyTonkPiano">
            <summary>
            Honky tonk piano
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.ElectricPiano1">
            <summary>
            Electric piano 1
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.ElectricPiano2">
            <summary>
            Electric piano 2
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Harpsichord">
            <summary>
            Harpsichord
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Clavinet">
            <summary>
            Clavinet
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Celesta">
            <summary>
            Celesta
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Glockenspiel">
            <summary>
            Glockenspiel
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.MusicBox">
            <summary>
            Music box
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Vibraphone">
            <summary>
            Vibraphone
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Marimba">
            <summary>
            Marimba
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Xylophone">
            <summary>
            Xylophone
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.TubularBells">
            <summary>
            Tubular bells
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Dulcimer">
            <summary>
            Dulcimer
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.DrawbarOrgan">
            <summary>
            Draw bar organ
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.PercussiveOrgan">
            <summary>
            Percussive organ
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.RockOrgan">
            <summary>
            Rock organ
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.ChurchOrgan">
            <summary>
            Church organ
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.ReedOrgan">
            <summary>
            Reed organ
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Accordion">
            <summary>
            Accordion
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Harmonica">
            <summary>
            Harmonica
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.TangoAccordion">
            <summary>
            Tango accordion
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.AcousticGuitarNylon">
            <summary>
            Acoustic guitar nylon
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.AcousticGuitarSteel">
            <summary>
            Acoustic guitar steel
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.ElectricGuitarJazz">
            <summary>
            Electric guitar jazz
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.ElectricGuitarClean">
            <summary>
            Electric guitar clean
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.ElectricGuitarMuted">
            <summary>
            Electric guitar muted
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.OverdrivenGuitar">
            <summary>
            Overdriven guitar
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.DistortionGuitar">
            <summary>
            Distortion guitar
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.GuitarHarmonics">
            <summary>
            Guitar harmonics
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.AcousticBass">
            <summary>
            Acoustic bass
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.ElectricBassFinger">
            <summary>
            Electric bass finger
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.ElectricBassPick">
            <summary>
            Electric bass pick
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.FretlessBass">
            <summary>
            Fretless bass
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.SlapBass1">
            <summary>
            Slap bass 1
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.SlapBass2">
            <summary>
            Slap bass 2
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.SynthBass1">
            <summary>
            Synth bass 1
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.SynthBass2">
            <summary>
            Synth bass 2
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Violin">
            <summary>
            Violin
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Viola">
            <summary>
            Viola
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Cello">
            <summary>
            Cello
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Contrabass">
            <summary>
            Contrabass
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.TremoloStrings">
            <summary>
            Tremolo strings
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.PizzicatoStrings">
            <summary>
            Pizzicato strings
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.OrchestralHarp">
            <summary>
            Orchestra harp
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Timpani">
            <summary>
            Timpani
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.StringEnsemble1">
            <summary>
            String ensembles 1
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.StringEnsemble2">
            <summary>
            String ensembles 2
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.SynthStrings1">
            <summary>
            Synth string 1
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.SynthStrings2">
            <summary>
            Synth strings 2
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.ChoirAahs">
            <summary>
            Choir aah
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.VoiceOohs">
            <summary>
            Voice ooh
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.SynthVoice">
            <summary>
            Synth voice
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.OrchestraHit">
            <summary>
            Orchestra hit
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Trumpet">
            <summary>
            Trumpet
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Trombone">
            <summary>
            Trombone
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Tuba">
            <summary>
            Tuba
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.MutedTrumpet">
            <summary>
            Muted trumped
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.FrenchHorn">
            <summary>
            French horn
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.BrassSection">
            <summary>
            Brass section
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.SynthBrass1">
            <summary>
            Synth brass 1
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.SynthBrass2">
            <summary>
            Synth brass 2
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.SopranoSax">
            <summary>
            Soprano sax
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.AltoSax">
            <summary>
            Alto sax
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.TenorSax">
            <summary>
            Tenor sax
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.BaritoneSax">
            <summary>
            Baritone sax
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Oboe">
            <summary>
            Oboe
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.EnglishHorn">
            <summary>
            English horn
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Bassoon">
            <summary>
            Bassoon
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Clarinet">
            <summary>
            Clarinet
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Piccolo">
            <summary>
            Piccolo
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Flute">
            <summary>
            Flute
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Recorder">
            <summary>
            Recorder
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.PanFlute">
            <summary>
            Pan flute
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.BlownBottle">
            <summary>
            Blown bottle
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Shakuhachi">
            <summary>
            Shakuhachi
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Whistle">
            <summary>
            Whistle
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Ocarina">
            <summary>
            Ocarina
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Lead1Square">
            <summary>
            Lead 1 square
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Lead2Sawtooth">
            <summary>
            Lead 2 sawtooth
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Lead3Calliope">
            <summary>
            Lead 3 calliope
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Lead4Chiff">
            <summary>
            Lead 4 chiff
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Lead5Charang">
            <summary>
            Lead 5 charang
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Lead6Voice">
            <summary>
            Lead 6 voice
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Lead7Fifths">
            <summary>
            Lead 7 fifths
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Lead8BassAndLead">
            <summary>
            Lead 8 bass and lead
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Pad1NewAge">
            <summary>
            Pad 1 new age
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Pad2Warm">
            <summary>
            Pad 2 warm
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Pad3Polysynth">
            <summary>
            Pad 3 polysynth
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Pad4Choir">
            <summary>
            Pad 4 choir
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Pad5Bowed">
            <summary>
            Pad 5 bowed
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Pad6Metallic">
            <summary>
            Pad 6 metallic
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Pad7Halo">
            <summary>
            Pad 7 halo
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Pad8Sweep">
            <summary>
            Pad 8 sweep
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Fx1Rain">
            <summary>
            Fx1 rain
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Fx2Soundtrack">
            <summary>
            Fx2 Sound track
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Fx3Crystal">
            <summary>
            Fx 3 Crystal
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Fx4Atmosphere">
            <summary>
            Fx4 atmosphere
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Fx5Brightness">
            <summary>
            Fx5 brightness
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Fx6Goblins">
            <summary>
            Fx6 goblins
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Fx7Echoes">
            <summary>
            Fx7 echoes
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Fx8SciFi">
            <summary>
            Fx8 sci fi
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Sitar">
            <summary>
            Sitar
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Banjo">
            <summary>
            Banjo
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Shamisen">
            <summary>
            Shamisen
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Koto">
            <summary>
            Koto
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Kalimba">
            <summary>
            Kalimba
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.BagPipe">
            <summary>
            Bag pipe
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Fiddle">
            <summary>
            Fiddle
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Shanai">
            <summary>
            Shanai
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.TinkleBell">
            <summary>
            Tinkle bell
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Agogo">
            <summary>
            Agogo
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.SteelDrums">
            <summary>
            Steel drums
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Woodblock">
            <summary>
            Wood block
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.TaikoDrum">
            <summary>
            Taiko drum
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.MelodicTom">
            <summary>
            Melodic drum
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.SynthDrum">
            <summary>
            Synth drum
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.ReverseCymbal">
            <summary>
            Reverse cymbal
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.GuitarFretNoise">
            <summary>
            Guitar fret noise
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.BreathNoise">
            <summary>
            Breath noise
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Seashore">
            <summary>
            Sea shore
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.BirdTweet">
            <summary>
            Bird tweet
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.TelephoneRing">
            <summary>
            Telephone ring
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Helicopter">
            <summary>
            Helicopter
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Applause">
            <summary>
            Applause
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.GeneralMidiInstrument.Gunshot">
            <summary>
            Gun shot
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.OutputStream">
            <summary>
            Output stream
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputStream.#ctor(System.Int32)">
            <summary>
            Output Stream
            </summary>
            <param name="deviceID">device id</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputStream.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">whether is disposing</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputStream.Close">
            <summary>
            Close
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputStream.StartPlaying">
            <summary>
            Start playing
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputStream.PausePlaying">
            <summary>
            Pause playing
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputStream.StopPlaying">
            <summary>
            Stop playing
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputStream.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputStream.Write(ArtificialArt.Audio.Midi.MidiEvent)">
            <summary>
            Write
            </summary>
            <param name="e">Midi event</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputStream.WriteNoOp(System.Int32,System.Int32)">
            <summary>
            Write no op
            </summary>
            <param name="deltaTicks">delta ticks</param>
            <param name="data">delta</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputStream.Flush">
            <summary>
            Flush
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputStream.GetTime(Sanford.Multimedia.Timers.TimeType)">
            <summary>
            Get time
            </summary>
            <param name="type">time type</param>
            <returns>time</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputStream.OnNoOpOccurred(ArtificialArt.Audio.Midi.NoOpEventArgs)">
            <summary>
            When no opp occured
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputStream.HandleMessage(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handle messages
            </summary>
            <param name="handle">handle</param>
            <param name="msg">message</param>
            <param name="instance">instance</param>
            <param name="param1">parameter 1</param>
            <param name="param2">parameter 2</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputStream.HandleNoOp(System.Object)">
            <summary>
            Handle no op
            </summary>
            <param name="state"></param>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.OutputStream.NoOpOccurred">
            <summary>
            When no op occured
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.OutputStream.Division">
            <summary>
            Division
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.OutputStream.Tempo">
            <summary>
            Tempo
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.RiffBuilder">
            <summary>
            Build music riff
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.drumVelocityHacker">
            <summary>
            To reduce volume of cymbals and stuff like that
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.desiredRiffLength">
            <summary>
            desired riff length (how many bars)
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.pitchWave">
            <summary>
            Pitch wave
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.velocityWave">
            <summary>
            Velocity wave
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.rythmPattern">
            <summary>
            Rythm pattern
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.scale">
            <summary>
            Music scale
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.midPitch">
            <summary>
            Mid pitch
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.radius">
            <summary>
            Pitch radius
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.midiInstrument">
            <summary>
            Midi instrument number (0 to 127)
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.minimumVelocity">
            <summary>
            Minimum velocity
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.maximumVelocity">
            <summary>
            Maximum velocity
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.defaultKey">
            <summary>
            Default modulation key
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.tempo">
            <summary>
            Tempo (bpm)
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.isDrum">
            <summary>
            Whether riff is drum or not
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.isUltraRigidDrum">
            <summary>
            Whether riff is ultra rigid drum (snare, kick etc) or not
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.modulator">
            <summary>
            Key modulator
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.timeFrame">
            <summary>
            Time frame (sometimes riffs are on or off)
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.isOverrideKey">
            <summary>
            Whether we override key
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffBuilder.forcedModulationOffset">
            <summary>
            Facultative key to override (only works if IsOverrideKey)
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffBuilder.Build(System.Int32)">
            <summary>
            Build riff
            </summary>
            <param name="currentRiffId">current id in riffPack (facultative)</param>
            <returns></returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffBuilder.GetMatchedMidPitch(System.Int32,System.Int32)">
            <summary>
            Return a pitch position that matches the other (same music key, but may not be same octave)
            </summary>
            <param name="toMatch">pitch to be matched</param>
            <param name="toMatchWith">pitch to match with</param>
            <returns>matched pitch</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffBuilder.BuildPitch(System.Double,ArtificialArt.Waves.IWave,ArtificialArt.Audio.Midi.Generator.Scale,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Build note pitch
            </summary>
            <param name="currentPosition">current time position</param>
            <param name="wave">wave</param>
            <param name="scale">scale</param>
            <param name="midPitch">mid pitch</param>
            <param name="radius">pitch radius</param>
            <param name="isDrum">whether is drum</param>
            <returns>Note's pitch</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffBuilder.BuildVelocity(System.Double,ArtificialArt.Waves.IWave,System.Int32,System.Int32)">
            <summary>
            Build velocity
            </summary>
            <param name="currentPosition">current time</param>
            <param name="wave">velocity wave</param>
            <param name="minimumVelocity">minimum velocity</param>
            <param name="maximumVelocity">maximum velocity</param>
            <returns>velocity</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.PitchWave">
            <summary>
            Pitch wave
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.VelocityWave">
            <summary>
            Velocity wave
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.RythmPattern">
            <summary>
            Rythm pattern
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.Scale">
            <summary>
            Desired scale
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.DesiredRiffLength">
            <summary>
            Desired riff length
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.MidPitch">
            <summary>
            Mid pitch
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.Radius">
            <summary>
            Pitch radius
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.MidiInstrument">
            <summary>
            Midi instrument (0 to 127)
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.MinimumVelocity">
            <summary>
            Minimum velocity
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.MaximumVelocity">
            <summary>
            Maximum velocity
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.IsDrum">
            <summary>
            Drum or not
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.IsUltraRigidDrum">
            <summary>
            Ultra Rigid Drum (snare, kick etc) or not
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.Tempo">
            <summary>
            Desired tempo
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.Modulator">
            <summary>
            Key Modulator
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.TimeFrame">
            <summary>
            Time frame (sometimes riffs are on, sometimes they are off)
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.DefaultKey">
            <summary>
            Default modulation key
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.ForcedModulationOffset">
            <summary>
            Facultative key to override (only works if IsOverrideKey)
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffBuilder.IsOverrideKey">
            <summary>
            Whether we override key
            </summary>
        </member>
        <member name="T:ArtificialArt.Waves.WaveCache">
            <summary>
            To improve wave rendering performances
            </summary>
        </member>
        <member name="F:ArtificialArt.Waves.WaveCache.internalCache">
            <summary>
            Internal cache
            </summary>
        </member>
        <member name="M:ArtificialArt.Waves.WaveCache.ContainsKey(System.Double)">
            <summary>
            Whether cache contains value at x
            </summary>
            <param name="x">x</param>
            <returns>Whether cache contains value at x</returns>
        </member>
        <member name="M:ArtificialArt.Waves.WaveCache.Add(System.Double,System.Double)">
            <summary>
            Add key value pair to cache
            </summary>
            <param name="x">position/time index</param>
            <param name="value">value</param>
        </member>
        <member name="M:ArtificialArt.Waves.WaveCache.Get(System.Double)">
            <summary>
            Get value at position/time x
            </summary>
            <param name="x">position/time</param>
            <returns>value at position/time x</returns>
        </member>
        <member name="T:ArtificialArt.Parsing.UniversalParser">
            <summary>
            Converts string into tree like structures
            </summary>
        </member>
        <member name="F:ArtificialArt.Parsing.UniversalParser.operatorPriorityList">
            <summary>
            Operators and their priority (0 = first (low priority))
            </summary>
        </member>
        <member name="F:ArtificialArt.Parsing.UniversalParser.bracketPriorityList">
            <summary>
            Bracket definitions and their priority (0: outermost)
            </summary>
        </member>
        <member name="F:ArtificialArt.Parsing.UniversalParser.defaultBracketConcatenationOperator">
            <summary>
            Defaut bracket concatenation operator (default: *)
            </summary>
        </member>
        <member name="F:ArtificialArt.Parsing.UniversalParser.bracketStackConsistencyValidator">
            <summary>
            Validates bracket stack consistency
            </summary>
        </member>
        <member name="M:ArtificialArt.Parsing.UniversalParser.#ctor">
            <summary>
            Build universal parser
            </summary>
        </member>
        <member name="M:ArtificialArt.Parsing.UniversalParser.AddOperatorPriority(System.String[])">
            <summary>
            Add a list of operator to current priority level
            and increment current priority level
            </summary>
            <param name="operatorList">list of operator</param>
        </member>
        <member name="M:ArtificialArt.Parsing.UniversalParser.AddOperatorPriority(System.String)">
            <summary>
            Add a single operator to current priority level
            New operators added will override this priority so add least prioritary first
            </summary>
            <param name="operatorToAdd">operator to add</param>
        </member>
        <member name="M:ArtificialArt.Parsing.UniversalParser.AddBracketPriority(System.Char,System.Char)">
            <summary>
            Add bracket by priority (outer brackets first)
            </summary>
            <param name="beginMarkup">begining markup</param>
            <param name="endMarkup">end markup</param>
        </member>
        <member name="M:ArtificialArt.Parsing.UniversalParser.Parse(System.String)">
            <summary>
            Parse flat expression and return it as a tree
            Can throw argument exception if brackets are not consistant in expression
            </summary>
            <param name="expression">flat expression to parse</param>
            <returns>tree expression</returns>
        </member>
        <member name="M:ArtificialArt.Parsing.UniversalParser.AddDefaultBracketConcatenationOperator(System.String)">
            <summary>
            Add default bracket concatenation operator when needed
            </summary>
            <param name="expression">expression</param>
            <returns>repaired expression</returns>
        </member>
        <member name="M:ArtificialArt.Parsing.UniversalParser.RemoveBracketsFromBeginingAndIfConsistencyIsKept(System.String)">
            <summary>
            Remove brackets from begining and end if they are the only brackets
            </summary>
            <param name="expression">expression</param>
            <returns>repaired expression</returns>
        </member>
        <member name="P:ArtificialArt.Parsing.UniversalParser.DefaultBracketConcatenationOperator">
            <summary>
            Default bracket concatenation operator (default: *)
            May throw argument exception if value is null or empty
            </summary>
        </member>
        <member name="T:ArtificialArt.Parsing.BracketStackConsistencyValidator">
            <summary>
            Validates bracket stack consistency
            </summary>
        </member>
        <member name="F:ArtificialArt.Parsing.BracketStackConsistencyValidator.temporaryBracketDefinitionStack">
            <summary>
            Temporary bracket definition stack
            </summary>
        </member>
        <member name="M:ArtificialArt.Parsing.BracketStackConsistencyValidator.#ctor">
            <summary>
            Build bracket stack consistency validator
            </summary>
        </member>
        <member name="M:ArtificialArt.Parsing.BracketStackConsistencyValidator.IsBracketConsistant(System.String,System.Collections.Generic.IEnumerable{ArtificialArt.Parsing.BracketDefinition})">
            <summary>
            Whether expression's bracket are consistant
            </summary>
            <param name="expression">expression</param>
            <param name="bracketDefinitionList">bracket definition list</param>
            <returns>Whether expression's bracket are consistant</returns>
        </member>
        <member name="M:ArtificialArt.Parsing.BracketStackConsistencyValidator.GetStackHeight(System.String,System.Int32,System.Collections.Generic.IEnumerable{ArtificialArt.Parsing.BracketDefinition})">
            <summary>
            Get height in stack for element in expression at position
            </summary>
            <param name="expression">expression</param>
            <param name="position">position</param>
            <param name="bracketDefinitionList">bracket definition list</param>
            <returns>height in stack for element in expression at position</returns>
        </member>
        <member name="M:ArtificialArt.Parsing.BracketStackConsistencyValidator.GetBracketDefinition(System.Char,System.Collections.Generic.IEnumerable{ArtificialArt.Parsing.BracketDefinition})">
            <summary>
            Get bracket definition associated to specified character or null if none found
            </summary>
            <param name="character">character</param>
            <param name="bracketDefinitionList">bracket definition list</param>
            <returns>bracket definition associated to specified character</returns>
        </member>
        <member name="T:ArtificialArt.Lyrics.LyricSource">
            <summary>
            Represents a lyric source
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSource.fileName">
            <summary>
            File name
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSource.verseListCache">
            <summary>
            Verse list cache
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSource.#ctor(System.String)">
            <summary>
            Create a lyric source from file name
            </summary>
            <param name="fileName">file name</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSource.GetRandomSourceLine(System.Random)">
            <summary>
            Return random source line
            </summary>
            <param name="random">random number generator</param>
            <returns>random source line</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSource.GetRandomSourceLineList(System.Random,System.Int32)">
            <summary>
            Return random source lines
            </summary>
            <param name="random">random number generator</param>
            <param name="samplingSize">sampling size</param>
            <returns>random source lines</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSource.GetRandomContiguousSourceLineList(System.Random,System.Int32)">
            <summary>
            Return random contiguous line list
            </summary>
            <param name="random">random number generator</param>
            <param name="samplingSize">how many ling you want</param>
            <returns>random contiguous line list</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSource.GetRandomContiguousSourceLineList(System.Random,System.Int32,System.String,System.Boolean)">
            <summary>
            Return random contiguous line list
            </summary>
            <param name="random">random number generator</param>
            <param name="samplingSize">how many ling you want</param>
            <param name="startLine">line to start search on</param>
            <param name="isStartPointPositive">whether the start point is considered from begining of line or end of line</param>
            <returns>random contiguous line list</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSource.GetStartLinePosition(System.IO.FileStream,System.IO.StreamReader,System.Int64,System.String,System.Boolean)">
            <summary>
            Get start line position from previous verse
            </summary>
            <param name="fileStream">file stream</param>
            <param name="streamReader">stream reader</param>
            <param name="fileSize">file size</param>
            <param name="startLine">previous verse line</param>
            <param name="isStartPointPositive">if true: we use begining of previous verse line, else: we use the end of it</param>
            <returns>start line position</returns>
        </member>
        <member name="T:ArtificialArt.Lyrics.Evaluator">
            <summary>
            Use this to match strings with themes
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.Evaluator.notALetter">
            <summary>
            Anything but a letter
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.Evaluator.notALetterNorSpace">
            <summary>
            Anything but a letter or space
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.Evaluator.themeLoader">
            <summary>
            Theme Loader
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.Evaluator.GetScore(ArtificialArt.Lyrics.Verse,ArtificialArt.Lyrics.ThemeList,ArtificialArt.Lyrics.ThemeList,System.Int16,System.Random)">
            <summary>
            Get score for a verse according to desired and undesired themes
            </summary>
            <param name="currentVerse">current verse</param>
            <param name="themeList">desired theme list</param>
            <param name="blackThemeList">undesired theme list</param>
            <param name="desiredLength">desired length</param>
            <param name="random">random number generator</param>
            <returns>score for a verse according to desired and undesired themes</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.Evaluator.GetScore(ArtificialArt.Lyrics.Verse,ArtificialArt.Lyrics.ThemeList,ArtificialArt.Lyrics.ThemeList,System.Int16,ArtificialArt.Lyrics.CreationMemory,System.Random)">
            <summary>
            Get score for a verse according to desired and undesired themes
            </summary>
            <param name="currentVerse">current verse</param>
            <param name="themeList">desired theme list</param>
            <param name="blackThemeList">undesired theme list</param>
            <param name="desiredLength">desired length</param>
            <param name="creationMemory">creation memory (can be null)</param>
            <param name="random">random number generator</param>
            <returns>score for a verse according to desired and undesired themes</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.Evaluator.GetScore(ArtificialArt.Lyrics.Verse,ArtificialArt.Lyrics.ThemeList,ArtificialArt.Lyrics.ThemeList,System.Int16,ArtificialArt.Lyrics.CreationMemory,System.Collections.Generic.Queue{ArtificialArt.Lyrics.Verse},System.Random)">
            <summary>
            Get score for a verse according to desired and undesired themes
            </summary>
            <param name="currentVerse">current verse</param>
            <param name="themeList">desired theme list</param>
            <param name="blackThemeList">undesired theme list</param>
            <param name="desiredLength">desired length</param>
            <param name="creationMemory">creation memory (can be null)</param>
            <param name="versesToRhymeWith">facultative (can be null) list of verse to rhyme with</param>
            <param name="random">random number generator</param>
            <returns>score for a verse according to desired and undesired themes</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.Evaluator.GetScore(ArtificialArt.Lyrics.Verse,ArtificialArt.Lyrics.ThemeList,ArtificialArt.Lyrics.ThemeList)">
            <summary>
            Get score for a verse according to desired and undesired themes
            </summary>
            <param name="currentVerse">current verse</param>
            <param name="themeList">desired theme list</param>
            <param name="blackThemeList">undesired theme list</param>
            <returns>score for a verse according to desired and undesired themes</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.Evaluator.GetScore(ArtificialArt.Lyrics.Verse,ArtificialArt.Lyrics.ThemeList,ArtificialArt.Lyrics.ThemeList,ArtificialArt.Lyrics.CreationMemory)">
            <summary>
            Get score for a verse according to desired and undesired themes
            </summary>
            <param name="currentVerse">current verse</param>
            <param name="themeList">desired theme list</param>
            <param name="blackThemeList">undesired theme list</param>
            <param name="creationMemory">creation memory (can be null)</param>
            <returns>score for a verse according to desired and undesired themes</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.Evaluator.GetThemeWords(ArtificialArt.Lyrics.Verse,ArtificialArt.Lyrics.ThemeList)">
            <summary>
            Get theme words from verse
            </summary>
            <param name="verse">verse to parse</param>
            <param name="themeList">list of themes</param>
            <returns>theme words from verse</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.Evaluator.CountOccurencePerTheme(ArtificialArt.Lyrics.Verse,ArtificialArt.Lyrics.ThemeList)">
            <summary>
            Count how many of each theme per theme in verse
            </summary>
            <param name="verse">verse</param>
            <param name="themeList">theme list</param>
            <returns>how many of each theme per theme in verse</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.Evaluator.GetThemeList(System.String)">
            <summary>
            List of theme for word
            </summary>
            <param name="word">word</param>
            <returns>List of theme for word</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.Evaluator.Match(System.String,ArtificialArt.Lyrics.ThemeList)">
            <summary>
            How mutch the verse line matches provided theme list
            </summary>
            <param name="verseLine">verse line</param>
            <param name="themeList">provided theme list</param>
            <returns>how mutch the verse line matches provided theme list</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.Evaluator.Match(System.String,ArtificialArt.Lyrics.ThemeList,ArtificialArt.Lyrics.CreationMemory)">
            <summary>
            How mutch the verse line matches provided theme list
            </summary>
            <param name="verseLine">verse line</param>
            <param name="themeList">provided theme list</param>
            <param name="creationMemory">creation memory (can be null)</param>
            <returns>how mutch the verse line matches provided theme list</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.Evaluator.PickBestLength(System.Collections.Generic.IList{ArtificialArt.Lyrics.Verse},System.Int32)">
            <summary>
            From verses, pick the one with length closest to desired length
            </summary>
            <param name="verseList">verse list</param>
            <param name="desiredLength">desired length</param>
            <returns>from verses, pick the one with length closest to desired length</returns>
        </member>
        <member name="P:ArtificialArt.Lyrics.Evaluator.ThemeLoader">
            <summary>
            Theme loader
            </summary>
        </member>
        <member name="T:ArtificialArt.Logic.DisjunctiveSyllogismManager">
            <summary>
            Create new propositions by applying disjunctive syllogism manager
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.DisjunctiveSyllogismManager.evaluator">
            <summary>
            Evaluator
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.DisjunctiveSyllogismManager.negator">
            <summary>
            To negate or denegate in a clean way
            </summary>
        </member>
        <member name="M:ArtificialArt.Logic.DisjunctiveSyllogismManager.#ctor(ArtificialArt.Logic.Evaluator,ArtificialArt.Logic.Negator)">
            <summary>
            Disjunctive syllogism manager
            </summary>
            <param name="evaluator">evaluator</param>
            <param name="negator">negator</param>
        </member>
        <member name="M:ArtificialArt.Logic.DisjunctiveSyllogismManager.BuildDisjunctiveSyllogism(ArtificialArt.Parsing.TreeExpression,ArtificialArt.Logic.LogicDerivation)">
            <summary>
            Create new propositions by applying disjunctive syllogism
            </summary>
            <param name="proposition">source proposition</param>
            <param name="logicDerivation">logic derivation to expand</param>
            <returns>whether could expand logic derivation</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.WordListFromFile">
            <summary>
            Word list from file
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordListFromFile.#ctor(System.String)">
            <summary>
            Create word list from text file
            </summary>
            <param name="fileName">file name</param>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.NotManager">
            <summary>
            Manages operations on the word "not"
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.NotManager.wordToPutNotAfterList">
            <summary>
            List of words that can be followed by "not"
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.NotManager.AddNotBeforeFirstWordEndingWithIng(System.String)">
            <summary>
            Add word "not" before first word ending with "ing" or "in'"
            </summary>
            <param name="text">text to modify</param>
            <returns>text with added "not" before first word wnding with ing or in'</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.NotManager.ContaisnWordToPutNotAfter(System.String)">
            <summary>
            Whether there is a word that can be followed by "not" in original proposition
            </summary>
            <param name="originalProposition">original proposition</param>
            <returns>Whether there is a word that can be followed by "not" in original proposition</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.NotManager.AddNotAfterFirstWordForIt(System.String)">
            <summary>
            Add "not" before first word that can be followed by "not"
            </summary>
            <param name="originalProposition">original proposition</param>
            <returns>altered proposition</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.UI.InputDeviceDialog">
            <summary>
            Input device dialog
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.UI.InputDeviceDialog.inputDeviceID">
            <summary>
            Input device id
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.InputDeviceDialog.#ctor">
            <summary>
            Input device dialog
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.InputDeviceDialog.OnShown(System.EventArgs)">
            <summary>
            On shown
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.InputDeviceDialog.okButton_Click(System.Object,System.EventArgs)">
            <summary>
            Ok button click
            </summary>
            <param name="sender">sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.InputDeviceDialog.cancelButton_Click(System.Object,System.EventArgs)">
            <summary>
            Cancel button click
            </summary>
            <param name="sender">sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.UI.InputDeviceDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.InputDeviceDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.UI.InputDeviceDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.UI.InputDeviceDialog.InputDeviceID">
            <summary>
            Input device id
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.SysExMessageEventArgs">
            <summary>
            System Ex message event arguments
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysExMessageEventArgs.#ctor(ArtificialArt.Audio.Midi.SysExMessage)">
            <summary>
            Build System Ex message event arguments
            </summary>
            <param name="message">message</param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysExMessageEventArgs.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator">
            <summary>
            Represents a song generator preset that can be saved, load and used to build MetaSongs
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.maxTrackCount">
            <summary>
            Maximum track count
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.isOverrideTempo">
            <summary>
            Whether we override tempo
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.isOverrideScale">
            <summary>
            Whether we override scale
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.scaleName">
            <summary>
            Scale's name
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.tempo">
            <summary>
            Tempo
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.barCount">
            <summary>
            How many bars
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.modulation">
            <summary>
            Modulation
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.trackList">
            <summary>
            List of predefined generator track
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.lyricsToMusicPhase">
            <summary>
            0: start lyrics in same time as music
            -1: start 1 black note before music bar
            -2: start 1 black note before music bar
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.isOverrideKey">
            <summary>
            Whether we override key
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.forcedModulationOffset">
            <summary>
            Works only if IsOverrideKey
            Override default modulation offset
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.#ctor">
            <summary>
            Build predefined generator
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.GetEnumerator">
            <summary>
            Predefined generator track enumerator
            </summary>
            <returns>Predefined generator track enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Predefined generator track enumerator
            </summary>
            <returns>Predefined generator track enumerator</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.Count">
            <summary>
            How many tracks
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.IsOverrideTempo">
            <summary>
            Whether we override tempo
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.IsOverrideScale">
            <summary>
            Whether we override scale
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.ScaleName">
            <summary>
            Scale's name
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.Tempo">
            <summary>
            Get or set tempo
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.Modulation">
            <summary>
            Get or set modulation
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.BarCount">
            <summary>
            Get or set how many bars
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.Item(System.Int32)">
            <summary>
            Get predefined generator track at index
            </summary>
            <param name="index">index</param>
            <returns>predefined generator track at index</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.LyricsToMusicPhase">
            <summary>
            0: start lyrics in same time as music
            -1: start 1 black note before music bar
            -2: start 1 black note before music bar
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.IsOverrideKey">
            <summary>
            Whether we override key
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.PredefinedGenerator.ForcedModulationOffset">
            <summary>
            Works only if IsOverrideKey
            Override default modulation offset
            </summary>
        </member>
        <member name="T:ArtificialArt.Markov.LetterMatrix">
            <summary>
            Letter matrix
            </summary>
        </member>
        <member name="F:ArtificialArt.Markov.LetterMatrix.previousChar">
            <summary>
            Previous word
            </summary>
        </member>
        <member name="F:ArtificialArt.Markov.LetterMatrix.previousPreviousChar">
            <summary>
            Previous previous word
            </summary>
        </member>
        <member name="F:ArtificialArt.Markov.LetterMatrix.absoluteMatrix">
            <summary>
            Integer based letter matrix (key: starting pair of letter, value: (key: ending letter, value: count))
            </summary>
        </member>
        <member name="M:ArtificialArt.Markov.LetterMatrix.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="lineList">Line list</param>
        </member>
        <member name="M:ArtificialArt.Markov.LetterMatrix.GenerateNextChar(System.Random)">
            <summary>
            Build a verse from letter markov matrix
            </summary>
            <param name="random">random number generator</param>
            <returns>Verse</returns>
        </member>
        <member name="M:ArtificialArt.Markov.LetterMatrix.resetCursor">
            <summary>
            Reset cursor to begining
            </summary>
        </member>
        <member name="M:ArtificialArt.Markov.LetterMatrix.Learn(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.Char,System.Int32}},System.String)">
            <summary>
            Learn from text line
            </summary>
            <param name="absoluteMatrix">absolute matrix</param>
            <param name="textLine">text line</param>
        </member>
        <member name="T:ArtificialArt.Linguistics.Word">
            <summary>
            Represents a word as a wrapper to a string but with more functionalities
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.Word.stringValue">
            <summary>
            String value
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.Word.leftDelimiter">
            <summary>
            Delimiter before word
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.Word.rightDelimiter">
            <summary>
            Delimiter after word
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.Word.nextWord">
            <summary>
            Next word
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.Word.previousWord">
            <summary>
            Previous word
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.Word.isSentenceBegin">
            <summary>
            Whether the word is at the begining of a sentence
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.Word.#ctor(System.String)">
            <summary>
            Create a word from a string
            </summary>
            <param name="stringValue">string value</param>
        </member>
        <member name="M:ArtificialArt.Linguistics.Word.ToString">
            <summary>
            Get word's string value
            </summary>
            <returns>word's string value</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.Word.Equals(ArtificialArt.Linguistics.Word)">
            <summary>
            Whether word is the same as the other (case insensitive)
            </summary>
            <param name="other">other word</param>
            <returns>Whether word is the same as the other (case insensitive)</returns>
        </member>
        <member name="P:ArtificialArt.Linguistics.Word.LeftDelimiter">
            <summary>
            Delimiter before word
            </summary>
        </member>
        <member name="P:ArtificialArt.Linguistics.Word.RightDelimiter">
            <summary>
            Delimiter after word
            </summary>
        </member>
        <member name="P:ArtificialArt.Linguistics.Word.NextWord">
            <summary>
            Next word
            </summary>
        </member>
        <member name="P:ArtificialArt.Linguistics.Word.PreviousWord">
            <summary>
            Previous word
            </summary>
        </member>
        <member name="P:ArtificialArt.Linguistics.Word.IsSentenceBegin">
            <summary>
            Whether the word is at the begining of a sentence
            </summary>
        </member>
        <member name="P:ArtificialArt.Linguistics.Word.StringValue">
            <summary>
            String value
            </summary>
        </member>
        <member name="T:ArtificialArt.Linguistics.LanguageMatrix">
            <summary>
            Markov matrix representing a language
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageMatrix.#ctor(System.String)">
            <summary>
            Create language matrix from text source
            </summary>
            <param name="textSource">text source</param>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageMatrix.#ctor">
            <summary>
            Create language matrix
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageMatrix.#ctor(ArtificialArt.Markov.Matrix)">
            <summary>
            Create language matrix from matrix
            </summary>
            <param name="matrix">matrix</param>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageMatrix.Learn(System.String)">
            <summary>
            Learn from text source
            </summary>
            <param name="textSource"></param>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageMatrix.GetRandomStartingPair(System.Random)">
            <summary>
            Get random starting pair
            </summary>
            <param name="random">random number generator</param>
            <returns>random starting pair</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.QuestionManager">
            <summary>
            Manages operations and analysis on questions
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.QuestionManager.questionManagerByMarkOnly">
            <summary>
            Manages questions that are questions just because they contain ? for they wouldn't be questions otherwise
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.QuestionManager.questionManagerByStartingWithQuestionWord">
            <summary>
            Manages questions that are questions because they start with question starting words
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.QuestionManager.questionManagerByEndingWord">
            <summary>
            Manages questions that are questions because they end with a special word for questions
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.QuestionManager.questionManagerByModalVerb">
            <summary>
            Manages questions that are questions because they begin with modal verbs
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.QuestionManager.questionManagerStartingWithQuestionWordPlusVerb">
            <summary>
            Manages questions that are questions because they begin with question word plus verb
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.QuestionManager.questionAdder">
            <summary>
            Convert affirmation to question
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionManager.IsQuestion(System.String)">
            <summary>
            Whether provied proposition is question or not
            </summary>
            <param name="originalProposition">provided proposition</param>
            <returns>Whether provied proposition is question or not</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionManager.InvertQuestion(System.String)">
            <summary>
            Convert original proposition to question if it's not and to affirmation or negation if it's a question
            </summary>
            <param name="proposition">original proposition</param>
            <returns>Converted original proposition to question if it wasn't and to affirmation or negation if was a question</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionManager.RemoveApostropheSQuestion(System.String)">
            <summary>
            Remove apostrophe from question word
            </summary>
            <param name="proposition">proposition</param>
            <returns>replaced 's to is</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionManager.IsFirstWordDo(System.String)">
            <summary>
            Whether 1st word is "do"
            </summary>
            <param name="proposition">proposition</param>
            <returns>Whether 1st word is "do"</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionManager.IsSecondWordDo(System.String)">
            <summary>
            Whether 2nd word is "do"
            </summary>
            <param name="proposition">proposition</param>
            <returns>Whether 2nd word is "do"</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.TimeFrame">
            <summary>
            List of bar blocks
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.TimeFrame.internalList">
            <summary>
            List of bar blocks
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.TimeFrame.IndexOf(ArtificialArt.Audio.Midi.Generator.BarBlock)">
            <summary>
            Index of bar block
            </summary>
            <param name="item">bar block</param>
            <returns>Index of bar block</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.TimeFrame.Insert(System.Int32,ArtificialArt.Audio.Midi.Generator.BarBlock)">
            <summary>
            Insert bar block at index
            </summary>
            <param name="index">index</param>
            <param name="item">bar block</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.TimeFrame.RemoveAt(System.Int32)">
            <summary>
            Remove bar block at index
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.TimeFrame.Add(ArtificialArt.Audio.Midi.Generator.BarBlock)">
            <summary>
            Add bar block
            </summary>
            <param name="item">bar block</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.TimeFrame.AddRange(System.Collections.Generic.List{ArtificialArt.Audio.Midi.Generator.BarBlock})">
            <summary>
            Add list of bar blocks
            </summary>
            <param name="list">list of bar blocks</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.TimeFrame.Clear">
            <summary>
            Clear bar blocks
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.TimeFrame.Contains(ArtificialArt.Audio.Midi.Generator.BarBlock)">
            <summary>
            Whether contains bar block
            </summary>
            <param name="item">bar block</param>
            <returns>Whether contains bar block</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.TimeFrame.CopyTo(ArtificialArt.Audio.Midi.Generator.BarBlock[],System.Int32)">
            <summary>
            Copy to array
            </summary>
            <param name="array">array</param>
            <param name="arrayIndex">array index</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.TimeFrame.Remove(ArtificialArt.Audio.Midi.Generator.BarBlock)">
            <summary>
            Remove bar block
            </summary>
            <param name="item">bar block</param>
            <returns>whether removal worked</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.TimeFrame.GetEnumerator">
            <summary>
            Bar block enumerator
            </summary>
            <returns>Bar block enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.TimeFrame.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Bar block enumerator
            </summary>
            <returns>Bar block enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.TimeFrame.IsAllowTime(System.Double,System.Int32)">
            <summary>
            Whether riff is allowed in time range
            </summary>
            <param name="currentPosition">current position</param>
            <param name="currentRiffId">riff id</param>
            <returns>Whether riff is allowed in time range</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.TimeFrame.Trim">
            <summary>
            Trim
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.TimeFrame.Item(System.Int32)">
            <summary>
            Get bar block at index
            </summary>
            <param name="index">index</param>
            <returns>bar block at index</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.TimeFrame.Count">
            <summary>
            Count bar blocks
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.TimeFrame.IsReadOnly">
            <summary>
            Whether time frame is readonly
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.MetaRiffPackLoader">
            <summary>
            Loads metaRiffPacks
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiffPackLoader.#ctor">
            <summary>
            Build metaRiffPack loader
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiffPackLoader.Load(System.String)">
            <summary>
            Load metariff pack from name
            </summary>
            <param name="metaRiffPackName">name</param>
            <returns>metariff pack</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiffPackLoader.GetEnumerator">
            <summary>
            Riff pack name list
            </summary>
            <returns>Riff pack name list</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaRiffPackLoader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Riff pack name list
            </summary>
            <returns>Riff pack name list</returns>
        </member>
        <member name="T:ArtificialArt.Lyrics.VerseFactoryStraight">
            <summary>
            Create straight verses from existing verses
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseFactoryStraight.defaultLanguageCode">
            <summary>
            Default language code
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseFactoryStraight.samplingSize">
            <summary>
            Sampling size
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseFactoryStraight.verseConstructionSettings">
            <summary>
            Verse construction settings
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseFactoryStraight.creationMemory">
            <summary>
            Creation memory
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseFactoryStraight.languageCode">
            <summary>
            Language Code
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseFactoryStraight.#ctor(ArtificialArt.Lyrics.VerseConstructionSettings,ArtificialArt.Lyrics.CreationMemory)">
            <summary>
            Constructor
            </summary>
            <param name="verseConstructionSettings">verse construction settings</param>
            <param name="creationMemory">to remember which themes were used the most</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseFactoryStraight.Build(ArtificialArt.Lyrics.Verse)">
            <summary>
            Build a straight verse
            </summary>
            <param name="previousVerse">previous verse</param>
            <returns>straight verse</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseFactoryStraight.GetMostThemeRelatedVerseWithDesiredLength(System.Collections.Generic.IEnumerable{ArtificialArt.Lyrics.Verse},System.Int16)">
            <summary>
            Get best verse from verse list
            </summary>
            <param name="verseList">verse list</param>
            <param name="desiredLength">desired length</param>
            <returns>best verse</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseFactoryStraight.GetMostThemeRelatedVerseWithDesiredLength(System.Collections.Generic.IEnumerable{ArtificialArt.Lyrics.Verse},System.Int16,System.Collections.Generic.Queue{ArtificialArt.Lyrics.Verse})">
            <summary>
            Get best verse from verse list
            </summary>
            <param name="verseList">verse list</param>
            <param name="desiredLength">desired length</param>
            <param name="versesToRhymeWith">facultative verse to rhyme with (can be null)</param>
            <returns>best verse</returns>
        </member>
        <member name="P:ArtificialArt.Lyrics.VerseFactoryStraight.LanguageCode">
            <summary>
            Language Code
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.StringManipulations.notALetter">
            <summary>
            Anything but a letter
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.StringManipulations.notALetterNorSpace">
            <summary>
            Anything but a letter or space
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.StringManipulations.HardTrim(System.String)">
            <summary>
            Clean the string
            </summary>
            <param name="text">source string</param>
            <returns>cleaned string</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.StringManipulations.HardTrim(ArtificialArt.Lyrics.Verse)">
            <summary>
            Clean the verse
            </summary>
            <param name="verse">source verse</param>
            <returns>cleaned verse</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.LanguageNames">
            <summary>
            Available language name list
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LanguageNames.English">
            <summary>
            English
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LanguageNames.French">
            <summary>
            French
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LanguageNames.Spanish">
            <summary>
            Spanish
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LanguageNames.Dutch">
            <summary>
            Dutch
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LanguageNames.German">
            <summary>
            German
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LanguageNames.Italian">
            <summary>
            Italian
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LanguageNames.Portuguese">
            <summary>
            Portuguese
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LanguageNames.Polish">
            <summary>
            Polish
            </summary>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.QuestionManagerByStartingWithQuestionWord">
            <summary>
            Manages questions that are questions because they start with question starting words
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionManagerByStartingWithQuestionWord.IsQuestion(System.String)">
            <summary>
            Whether proposition is detected to be a question because it starts with a question word
            </summary>
            <param name="originalProposition">original proposition</param>
            <returns>Whether proposition is detected to be a question because it starts with a question word</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionManagerByStartingWithQuestionWord.RemoveQuestion(System.String)">
            <summary>
            Remove question from proposition
            </summary>
            <param name="proposition">original proposition</param>
            <returns>proposition with question removed</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionManagerByStartingWithQuestionWord.IsFirstAndSecondWordQuestionBeginWord(System.String)">
            <summary>
            Whether the two first words are question begining words
            </summary>
            <param name="proposition">proposition to analyze</param>
            <returns>Whether the two first words are question begining words</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.AintManager">
            <summary>
            Manages operations on the word "ain't"
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.AintManager.RemoveAintOnce(System.String)">
            <summary>
            Remove word "aint" from text
            </summary>
            <param name="text">text</param>
            <returns>Text with word "aint" removed once</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.ChasedEventArgs">
            <summary>
            Chased event arguments
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.ChasedEventArgs.messages">
            <summary>
            Messages
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChasedEventArgs.#ctor(System.Collections.ICollection)">
            <summary>
            Chased event args
            </summary>
            <param name="messages">messages</param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.ChasedEventArgs.Messages">
            <summary>
            Messages
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.OutputDevice">
            <summary>
            Represents a device capable of sending MIDI messages.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDevice.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the OutputDevice class.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDevice.Dispose(System.Boolean)">
            <summary>
            dispose
            </summary>
            <param name="disposing">is disposing</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDevice.Close">
            <summary>
            Closes the OutputDevice.
            </summary>
            <exception cref="T:ArtificialArt.Audio.Midi.OutputDeviceException">
            If an error occurred while closing the OutputDevice.
            </exception>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDevice.Reset">
            <summary>
            Resets the OutputDevice.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDevice.Send(ArtificialArt.Audio.Midi.ChannelMessage)">
            <summary>
            Send message
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDevice.Send(ArtificialArt.Audio.Midi.SysExMessage)">
            <summary>
            Send message
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDevice.Send(ArtificialArt.Audio.Midi.SysCommonMessage)">
            <summary>
            Send message to output device
            </summary>
            <param name="message">message</param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.OutputDevice.RunningStatusEnabled">
            <summary>
            Gets or sets a value indicating whether the OutputDevice uses
            a running status.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.OutputDeviceException">
            <summary>
            The exception that is thrown when a error occurs with the OutputDevice
            class.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.OutputDeviceException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the OutputDeviceException class with
            the specified error code.
            </summary>
            <param name="errCode">
            The error code.
            </param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.OutputDeviceException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer">
            <summary>
            RiffPack player (plays songs)
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer.timePrecision">
            <summary>
            Midi time precision
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer.timeMultiplicator">
            <summary>
            Midi time multiplicator
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer.notePlayer">
            <summary>
            Midi note player
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer.riffPackPlayerMemory">
            <summary>
            Remembers which notes are being played
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer.channelMemory">
            <summary>
            Remembers channel for each instrument
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer.isStopping">
            <summary>
            Whether is currently stopping
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer.isPlaying">
            <summary>
            Whether is playing
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer.#ctor">
            <summary>
            Build riff pack player
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer.Play(ArtificialArt.Audio.Midi.Generator.RiffPack,ArtificialArt.Audio.Midi.OutputDevice)">
            <summary>
            Play riffPack
            </summary>
            <param name="riffPack">song to play</param>
            <param name="outputDevice">midi device</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer.Stop">
            <summary>
            Stop music
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer.InitInstruments(ArtificialArt.Audio.Midi.Generator.RiffPack,ArtificialArt.Audio.Midi.OutputDevice)">
            <summary>
            Initialize midi instruments
            </summary>
            <param name="riffPack">riff pack</param>
            <param name="outputDevice">midi output device</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer.GetLongestRiffLength(ArtificialArt.Audio.Midi.Generator.RiffPack)">
            <summary>
            Get longest riff's length
            </summary>
            <param name="riffPack">riff pack</param>
            <returns>longest riff's length</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer.UpdateRiff(ArtificialArt.Audio.Midi.Generator.Riff,System.Double,ArtificialArt.Audio.Midi.OutputDevice,System.Int32)">
            <summary>
            Play a note or stop a note in riff
            </summary>
            <param name="riff">riff</param>
            <param name="currentTime">current time</param>
            <param name="outputDevice">midi output device</param>
            <param name="channel">midi channel</param>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer.OnNoteOn">
            <summary>
            When playing note
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer.OnNoteOff">
            <summary>
            When stopping note
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer.OnBlackNoteTimeElapsed">
            <summary>
            When black note time has passed
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffPackPlayer.IsPlaying">
            <summary>
            Whether is playing
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.RiffToSequenceConverter">
            <summary>
            Convert riffs and riff packs to midi sequences
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffToSequenceConverter.Convert(ArtificialArt.Audio.Midi.Generator.IRiff)">
            <summary>
            Convert a riff or riff pack to midi sequence
            </summary>
            <param name="riff">riff or riff pack</param>
            <returns>midi sequence</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffToSequenceConverter.ConvertRiffPack(ArtificialArt.Audio.Midi.Generator.RiffPack)">
            <summary>
            Convert riff pack to midi sequence
            </summary>
            <param name="riffPack">riff pack</param>
            <returns>midi sequence</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.MusicGenerator">
            <summary>
            Generates random music from presets
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MusicGenerator.#ctor(System.Random)">
            <summary>
            Create random music generator
            </summary>
            <param name="random">random number generator</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MusicGenerator.BuildSong(ArtificialArt.Audio.Midi.Generator.PredefinedGenerator)">
            <summary>
            Build riff pack from predefined generator
            </summary>
            <param name="predefinedGenerator">predefined generator</param>
            <returns>riff pack</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.ModulatorBuilder">
            <summary>
            Create key modulators
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.ModulatorBuilder.Build(System.Random,System.Double)">
            <summary>
            Create  modulator
            </summary>
            <param name="random">random number generator</param>
            <param name="modulationStrength">0: none 1: full</param>
            <returns>New key modulator</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.Modulator">
            <summary>
            Key modulator
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.Modulator.wave">
            <summary>
            Wave or wavePack
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.Modulator.modulationStrength">
            <summary>
            Modulation strength (from 0: none to 1: full)
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Modulator.#ctor(ArtificialArt.Waves.IWave,System.Double)">
            <summary>
            Create modulator
            </summary>
            <param name="wave">wave</param>
            <param name="modulationStrength">from 0 (none) to 1 (full)</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Modulator.GetModulationOffset(System.Double)">
            <summary>
            Return modulation value (from -6 to 6);
            </summary>
            <param name="position">position</param>
            <returns>modulation offset</returns>
        </member>
        <member name="T:ArtificialArt.Logic.SolvingMethod">
            <summary>
            Method of doing a derivation
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.SolvingMethod.Straight">
            <summary>
            Straight derivation
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.SolvingMethod.ReductioAdAbsurdum">
            <summary>
            By prooving that the negation of proposition implies contradictions
            </summary>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.QuestionManagerByMarkOnly">
            <summary>
            Manages questions that are questions just because they contain ? for they wouldn't be questions otherwise
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionManagerByMarkOnly.IsQuestion(System.String)">
            <summary>
            Whether question was detected by ?
            </summary>
            <param name="originalProposition">original proposition</param>
            <returns>Whether question was detected by ?</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionManagerByMarkOnly.RemoveQuestion(System.String)">
            <summary>
            Remove question mark
            </summary>
            <param name="originalProposition">originalProposition</param>
            <returns>proposition with question mark removed</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.FirstSecondPersonManager">
            <summary>
            Manages words such as you, me, I, yours mine, my, mines etc...
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.FirstSecondPersonManager.InvertFirstSecondPerson(System.String)">
            <summary>
            Invert "YOU" and "I" from string (your and my etc...)
            </summary>
            <param name="originalText">original text</param>
            <returns>Text with YOU and I inverted (your and my etc...)</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.FirstSecondPersonManager.FixCase(System.String,System.Boolean)">
            <summary>
            Fix the case for words: You, me and I
            </summary>
            <param name="youMeI">You, me or I</param>
            <param name="isSentenceBegin">whether the word is at the beginin of a sentence</param>
            <returns>word with fixed case</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.Scale">
            <summary>
            List of intervals
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.Scale.intervalList">
            <summary>
            List of intervals
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Scale.#ctor">
            <summary>
            Build scale
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Scale.Add(System.Int32)">
            <summary>
            Add interval to scale
            </summary>
            <param name="interval">interval</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Scale.GetRoundValue(System.Double,System.Int32)">
            <summary>
            Get rounded note from scalar
            </summary>
            <param name="scalar">scalar</param>
            <param name="radius">radius</param>
            <returns>rounded note from scalar</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Scale.GetFloorValue(System.Double,System.Int32)">
            <summary>
            Get rounded bottom note from scalar
            </summary>
            <param name="scalar">scalar</param>
            <param name="radius">radius</param>
            <returns>rounded bottom note from scalar</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Scale.GetCeilValue(System.Double,System.Int32)">
            <summary>
            Get rounded top note from scalar
            </summary>
            <param name="scalar">scalar</param>
            <param name="radius">radius</param>
            <returns>rounded top note from scalar</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Scale.GetEnumerator">
            <summary>
            Note interval enumerator
            </summary>
            <returns>Note interval enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Scale.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Note interval enumerator
            </summary>
            <returns>Note interval enumerator</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Scale.Count">
            <summary>
            How many interval in scale
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.RecordingSession">
            <summary>
            Recording session
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.RecordingSession.clock">
            <summary>
            Clock
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.RecordingSession.buffer">
            <summary>
            Buffer
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.RecordingSession.result">
            <summary>
            Resu;t
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.RecordingSession.#ctor(ArtificialArt.Audio.Midi.IClock)">
            <summary>
            Create rectording session
            </summary>
            <param name="clock">clock</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.RecordingSession.Build">
            <summary>
            Build 
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.RecordingSession.Clear">
            <summary>
            Clear buffer
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.RecordingSession.Record(ArtificialArt.Audio.Midi.ChannelMessage)">
            <summary>
            Record
            </summary>
            <param name="message">channel message</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.RecordingSession.Record(ArtificialArt.Audio.Midi.SysExMessage)">
            <summary>
            Record
            </summary>
            <param name="message">Sys Ex Message</param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.RecordingSession.Result">
            <summary>
            Result
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.RecordingSession.TimestampedMessage">
            <summary>
            TimeStampedMEssage
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.RecordingSession.TimestampComparer">
            <summary>
            TimeStamp comparer
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.ChannelChaser">
            <summary>
            Channel chaser
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelChaser.#ctor">
            <summary>
            Build chanel chaser
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelChaser.Process(ArtificialArt.Audio.Midi.ChannelMessage)">
            <summary>
            Process
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelChaser.Chase">
            <summary>
            Chase
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelChaser.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelChaser.OnChased(ArtificialArt.Audio.Midi.ChasedEventArgs)">
            <summary>
            When chased
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.ChannelChaser.Chased">
            <summary>
            When chased
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.MidiNoteConverter">
            <summary>
            Converts a MIDI note number to its corresponding frequency.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiNoteConverter.NoteIDMinValue">
            <summary>
            The minimum value a note ID can have.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiNoteConverter.NoteIDMaxValue">
            <summary>
            The maximum value a note ID can have.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiNoteConverter.NoteToFrequency(System.Int32)">
            <summary>
            Converts the specified note to a frequency.
            </summary>
            <param name="noteID">
            The ID of the note to convert.
            </param>
            <returns>
            The frequency of the specified note.
            </returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiNoteConverter.FrequencyToNote(System.Double)">
            <summary>
            Converts the specified frequency to a note.
            </summary>
            <param name="frequency">
            The frequency to convert.
            </param>
            <returns>
            The ID of the note closest to the specified frequency.
            </returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.TempoChangeBuilder">
            <summary>
            Provides functionality for building tempo messages.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.TempoChangeBuilder.#ctor">
            <summary>
            Initializes a new instance of the TempoChangeBuilder class.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.TempoChangeBuilder.#ctor(ArtificialArt.Audio.Midi.MetaMessage)">
            <summary>
            Initialize a new instance of the TempoChangeBuilder class with the 
            specified MetaMessage.
            </summary>
            <param name="e">meta message&gt;</param>
            <exception cref="T:System.ArgumentException">
            If the specified MetaMessage is not a tempo type.
            </exception>
            <remarks>
            The TempoChangeBuilder uses the specified MetaMessage to initialize 
            its property values.
            </remarks>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.TempoChangeBuilder.Initialize(ArtificialArt.Audio.Midi.MetaMessage)">
            <summary>
            Initializes the TempoChangeBuilder with the specified MetaMessage.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the specified MetaMessage is not a tempo type.
            </exception>
            <param name="e">meta message</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.TempoChangeBuilder.Build">
            <summary>
            Builds the tempo change MetaMessage.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.TempoChangeBuilder.Tempo">
            <summary>
            Gets or sets the tempo.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Value is set to less than zero.
            </exception>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.TempoChangeBuilder.Result">
            <summary>
            Gets the built message.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.MessageType">
            <summary>
            Defines constants representing MIDI message types.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MessageType.Channel">
            <summary>
            Channel
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MessageType.SystemExclusive">
            <summary>
            System exclusive
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MessageType.SystemCommon">
            <summary>
            System common
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MessageType.SystemRealtime">
            <summary>
            System real time
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MessageType.Meta">
            <summary>
            Meta
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.SysRealtimeMessageEventArgs">
            <summary>
            Sys realtime message event arguments
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeMessageEventArgs.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeMessageEventArgs.Continue">
            <summary>
            Continue
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeMessageEventArgs.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeMessageEventArgs.Clock">
            <summary>
            Clock
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeMessageEventArgs.Tick">
            <summary>
            Tick
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeMessageEventArgs.ActiveSense">
            <summary>
            Active sense
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeMessageEventArgs.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysRealtimeMessageEventArgs.message">
            <summary>
            Sys realtime message
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysRealtimeMessageEventArgs.#ctor(ArtificialArt.Audio.Midi.SysRealtimeMessage)">
            <summary>
            Sys realtime message event args
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysRealtimeMessageEventArgs.Message">
            <summary>
            Sys realtime message
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.InvalidSysExMessageEventArgs">
            <summary>
            Invalid sys ex message event args
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.InvalidSysExMessageEventArgs.#ctor(System.Byte[])">
            <summary>
            Invalid sys ex message event args
            </summary>
            <param name="messageData"></param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.InvalidSysExMessageEventArgs.MessageData">
            <summary>
            Message data
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.MidiHeader">
            <summary>
            Represents the Windows Multimedia MIDIHDR structure.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiHeader.data">
            <summary>
            Pointer to MIDI data.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiHeader.bufferLength">
            <summary>
            Size of the buffer.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiHeader.bytesRecorded">
            <summary>
            Actual amount of data in the buffer. This value should be less than 
            or equal to the value given in the dwBufferLength member.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiHeader.user">
            <summary>
            Custom user data.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiHeader.flags">
            <summary>
            Flags giving information about the buffer.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiHeader.next">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiHeader.reserved">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiHeader.offset">
            <summary>
            Offset into the buffer when a callback is performed. (This 
            callback is generated because the MEVT_F_CALLBACK flag is 
            set in the dwEvent member of the MidiEventArgs structure.) 
            This offset enables an application to determine which 
            event caused the callback. 
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.MidiHeader.reservedArray">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.Player">
            <summary>
            Facade to play midi content
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.Player.riffPackPlayer">
            <summary>
            Song player
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.Player.outputDevice">
            <summary>
            Midi output device
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.Player.iRiff">
            <summary>
            IRiff to play
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Player.#ctor">
            <summary>
            Build midi player
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Player.Play(System.Object)">
            <summary>
            Play a riff or a riff pack
            </summary>
            <param name="stateInfo">when method is started by threadPool</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Player.Stop">
            <summary>
            Stop music
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Player.ClearEventHandlers">
            <summary>
            Remove event listeners
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Generator.Player.OnNoteOn">
            <summary>
            When playing note
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Generator.Player.OnNoteOff">
            <summary>
            When stopping note
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Generator.Player.OnBlackNoteTimeElapsed">
            <summary>
            When black note time has passed
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Player.IRiff">
            <summary>
            IRiff to play
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Player.IsPlaying">
            <summary>
            Whether the player is playing
            </summary>
        </member>
        <member name="T:ArtificialArt.Waves.Wave">
            <summary>
            Represents a wave
            </summary>
        </member>
        <member name="F:ArtificialArt.Waves.Wave.amplitude">
            <summary>
            Amplitude (from 0 to 1)
            </summary>
        </member>
        <member name="F:ArtificialArt.Waves.Wave.frequency">
            <summary>
            Amount of wave cycle per common position/time span
            </summary>
        </member>
        <member name="F:ArtificialArt.Waves.Wave.phase">
            <summary>
            Phase, from -1 to 1
            </summary>
        </member>
        <member name="F:ArtificialArt.Waves.Wave.waveFunction">
            <summary>
            Wave's function
            </summary>
        </member>
        <member name="F:ArtificialArt.Waves.Wave.waveCache">
            <summary>
            To improve wave rendering performances
            </summary>
        </member>
        <member name="M:ArtificialArt.Waves.Wave.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a wave
            </summary>
            <param name="amplitude">Amplitude (from 0 to 1)</param>
            <param name="frequency">Amount of wave cycle per common position/time span</param>
            <param name="phase">Phase, from -1 to 1</param>
        </member>
        <member name="M:ArtificialArt.Waves.Wave.#ctor(System.Double,System.Double,System.Double,ArtificialArt.Waves.WaveFunction)">
            <summary>
            Create a wave
            </summary>
            <param name="amplitude">Amplitude (from 0 to 1)</param>
            <param name="frequency">Amount of wave cycle per common position/time span</param>
            <param name="phase">Phase, from -1 to 1</param>
            <param name="waveFunction">wave function (default: Math.sin)</param>
        </member>
        <member name="M:ArtificialArt.Waves.Wave.op_Addition(ArtificialArt.Waves.Wave,ArtificialArt.Waves.IWave)">
            <summary>
            Add two waves
            </summary>
            <param name="wave1">wave 1</param>
            <param name="wave2">wave 2</param>
            <returns>wave pack</returns>
        </member>
        <member name="M:ArtificialArt.Waves.Wave.Equals(ArtificialArt.Waves.IWave)">
            <summary>
            Whether waves are identical
            </summary>
            <param name="other">other wave</param>
            <returns>Whether waves are identical</returns>
        </member>
        <member name="M:ArtificialArt.Waves.Wave.Normalize">
            <summary>
            Normalize the wave to amplitude 1
            </summary>
        </member>
        <member name="P:ArtificialArt.Waves.Wave.Item(System.Double)">
            <summary>
            Get amplitude at position/time x
            </summary>
            <param name="x">x</param>
            <returns>amplitude at position/time x</returns>
        </member>
        <member name="T:ArtificialArt.Lyrics.CreationMemory">
            <summary>
            To remember previous verse theme words not to repeat them too often
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.CreationMemory.Clear">
            <summary>
            Clear creation memory
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.CreationMemory.Remember(ArtificialArt.Lyrics.Verse,ArtificialArt.Lyrics.VerseConstructionSettings)">
            <summary>
            Remember information from generated verse to avoid repitition
            </summary>
            <param name="verse">generated verse</param>
            <param name="verseConstructionSettings">verse construction settings</param>
        </member>
        <member name="T:ArtificialArt.Logic.ModusTollensManager">
            <summary>
            To create new propositions by applying modus tollens
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.ModusTollensManager.evaluator">
            <summary>
            Evaluator
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.ModusTollensManager.negator">
            <summary>
            To negate propositions in a clean way
            </summary>
        </member>
        <member name="M:ArtificialArt.Logic.ModusTollensManager.#ctor(ArtificialArt.Logic.Evaluator,ArtificialArt.Logic.Negator)">
            <summary>
            To create new propositions by applying modus tollens
            </summary>
            <param name="evaluator">evaluator</param>
            <param name="negator">to negate propositions in a clean way</param>
        </member>
        <member name="M:ArtificialArt.Logic.ModusTollensManager.BuildModusTollens(ArtificialArt.Parsing.TreeExpression,ArtificialArt.Logic.LogicDerivation)">
            <summary>
            Build propositions by applying modus tollens
            </summary>
            <param name="proposition">source proposition</param>
            <param name="logicDerivation">logic derivation</param>
            <returns>whether could create new propositions from modus tollens</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.LetterManager">
            <summary>
            Manages analysis on letters
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LetterManager.vowelList">
            <summary>
            List of vowels
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LetterManager.consonantList">
            <summary>
            List of consonants
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LetterManager.letterGroupList">
            <summary>
            List of letter groups
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LetterManager.letterPhoneticDistanceManager">
            <summary>
            Letter phonetic manager
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LetterManager.letterGroupCache">
            <summary>
            Letter group for each letter
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.LetterManager.#cctor">
            <summary>
            Build letter manager
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.LetterManager.BuildLetterGroupList">
            <summary>
            Build letter group list
            </summary>
            <returns>letter group list</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.LetterManager.BuildConsonantList">
            <summary>
            Build consonant list
            </summary>
            <returns>consonant list</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.LetterManager.BuildVowelList">
            <summary>
            Build vowel list
            </summary>
            <returns>vowel list</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.LetterManager.IsConsonant(System.Char)">
            <summary>
            Whether letter is consonant
            </summary>
            <param name="letter">letter</param>
            <returns>Whether letter is consonant</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.LetterManager.IsLetter(System.Char)">
            <summary>
            Whether character is letter
            </summary>
            <param name="character">character</param>
            <returns>Whether character is letter</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.LetterManager.IsVowel(System.Char)">
            <summary>
            Whether letter is vowel
            </summary>
            <param name="letter">letter</param>
            <returns>Whether letter is vowel</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.LetterManager.IsSameLetterGroup(System.Char,System.Char)">
            <summary>
            Whether both letters are of the same letter group (f and v, i and ì etc...)
            </summary>
            <param name="letter1">letter 1</param>
            <param name="letter2">letter 2</param>
            <returns>Whether both letters are of the same letter group</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.LetterManager.GetLetterPhoneticDistance(System.Char,System.Char)">
            <summary>
            Get phonetic distance between two letters
            </summary>
            <param name="letter1">letter 1</param>
            <param name="letter2">letter 2</param>
            <returns>phonetic distance</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.LetterManager.GetLetterGroup(System.Char)">
            <summary>
            Get letter group for letter
            </summary>
            <param name="letter">letter</param>
            <returns>letter group for letter</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.LanguageParodyTextGenerator">
            <summary>
            Generate text in various languages
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LanguageParodyTextGenerator.languageMatrixCollection">
            <summary>
            Language matrix collection
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageParodyTextGenerator.#ctor(ArtificialArt.Linguistics.LanguageMatrixCollection)">
            <summary>
            Build text generator from language matrix collection
            </summary>
            <param name="languageMatrixCollection">language matrix collection</param>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageParodyTextGenerator.GenerateText(ArtificialArt.Linguistics.LanguageNames,System.Int32,System.Random)">
            <summary>
            Generate text in specified language
            </summary>
            <param name="languageName">specified language</param>
            <param name="letterCount">how many letter</param>
            <param name="random">random number generator</param>
            <returns>generated text</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.LanguageDetector">
            <summary>
            Detects languages
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.LanguageDetector.languageMatrixCollection">
            <summary>
            Collection of language matrixes
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageDetector.#ctor(ArtificialArt.Linguistics.LanguageMatrixCollection)">
            <summary>
            Build text language detector from language matrix collection
            </summary>
            <param name="languageMatrixCollection">language matrix collection</param>
        </member>
        <member name="M:ArtificialArt.Linguistics.LanguageDetector.DetectLanguage(System.String)">
            <summary>
            Detect which language is present in text or null if nothing found
            </summary>
            <param name="text">text</param>
            <returns>language's name</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.NegationManager">
            <summary>
            Performs negation of proposions
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.NegationManager.ntManager">
            <summary>
            Manages words like "don't" and "didn't" and "doesn't"
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.NegationManager.notManager">
            <summary>
            Manages operations on the word "not"
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.NegationManager.aintManager">
            <summary>
            Manages operations on the word "ain't"
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.NegationManager.InvertNegation(System.String)">
            <summary>
            Invert negation of proposition by removing or adding words like "not" or by replacing a word to an antonym
            </summary>
            <param name="originalProposition">original proposition</param>
            <returns>Proposition with inverted negation or with antonyms</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.NegationManager.ContainsWordEndingWithIng(System.String)">
            <summary>
            Whether text contains a word ending with ing or in'
            </summary>
            <param name="text">text to analyze</param>
            <returns>Whether text contains a word ending with ing or in'</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.SubjectObjectDetector">
            <summary>
            Manages the difference between subjects and objects
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.SubjectObjectDetector.isSubject">
            <summary>
            When it is a subject
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.SubjectObjectDetector.isObject">
            <summary>
            When it is an object
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.SubjectObjectDetector.IsSubjectNotObject(ArtificialArt.Linguistics.Word)">
            <summary>
            Whether word is a subject and not an object according to provided context
            </summary>
            <param name="word">word</param>
            <returns>Whether word is a subject and not an object according to provided context</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.ScaleChooser">
            <summary>
            Used to choose among available music scales
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.ScaleChooser.scaleList">
            <summary>
            Internal list of music scales
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.ScaleChooser.BuildPreferedScale(System.Random)">
            <summary>
            Returns a scale from available scales
            </summary>
            <param name="random">random number generator</param>
            <returns>a scale from available scales</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.ScaleChooser.Add(ArtificialArt.Audio.Midi.Generator.Scale)">
            <summary>
            Add musical scale to scale list
            </summary>
            <param name="scale">music scale</param>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.RythmPattern">
            <summary>
            Rythm pattern
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RythmPattern.beatTimeList">
            <summary>
            List of beat times
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RythmPattern.position">
            <summary>
            Current position
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RythmPattern.Add(System.Double)">
            <summary>
            Add beat time
            </summary>
            <param name="beatTime">beat time</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RythmPattern.ResetPosition">
            <summary>
            Reset position
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RythmPattern.GetNextLength">
            <summary>
            Get next time length
            </summary>
            <returns>next time length</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RythmPattern.Min">
            <summary>
            Shortest time length in rythm pattern
            </summary>
            <returns>Shortest time length in rythm pattern</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RythmPattern.Clone">
            <summary>
            Clone rythm pattern
            </summary>
            <returns>identical rythm pattern</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RythmPattern.#ctor">
            <summary>
            Build rythm pattern
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RythmPattern.#ctor(ArtificialArt.Audio.Midi.Generator.RythmPattern,ArtificialArt.Audio.Midi.Generator.RythmPattern)">
            <summary>
            Build rythm pattern by joining two rythm patterns (one after one other)
            </summary>
            <param name="rythmPattern1">first</param>
            <param name="rythmPattern2">second</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RythmPattern.GetEnumerator">
            <summary>
            Time length enumerator
            </summary>
            <returns>Time length enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RythmPattern.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Time length enumerator
            </summary>
            <returns>Time length enumerator</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RythmPattern.Sum">
            <summary>
            Sum of time lenght of all beat times
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RythmPattern.Count">
            <summary>
            How many beat times
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RythmPattern.Item(System.Int32)">
            <summary>
            Get beat time at index
            </summary>
            <param name="index">index</param>
            <returns>beat time at index</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder">
            <summary>
            Build songs
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.internalList">
            <summary>
            Internal riffBuilder list
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.IndexOf(ArtificialArt.Audio.Midi.Generator.RiffBuilder)">
            <summary>
            Index of riff builder
            </summary>
            <param name="item">riff builder</param>
            <returns>Index of riff builder</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.Insert(System.Int32,ArtificialArt.Audio.Midi.Generator.RiffBuilder)">
            <summary>
            Insert riff builder at index
            </summary>
            <param name="index">index</param>
            <param name="item">riff builder</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.RemoveAt(System.Int32)">
            <summary>
            Remove riff builder at specified index
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.Add(ArtificialArt.Audio.Midi.Generator.RiffBuilder)">
            <summary>
            Add riff builder
            </summary>
            <param name="item">riff builder</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.Clear">
            <summary>
            Remove all riff builders
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.Contains(ArtificialArt.Audio.Midi.Generator.RiffBuilder)">
            <summary>
            Whether it contains riff builder
            </summary>
            <param name="item">riff builder</param>
            <returns>Whether it contains riff builder</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.CopyTo(ArtificialArt.Audio.Midi.Generator.RiffBuilder[],System.Int32)">
            <summary>
            Copy to array
            </summary>
            <param name="array">array</param>
            <param name="arrayIndex">array index</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.Remove(ArtificialArt.Audio.Midi.Generator.RiffBuilder)">
            <summary>
            Remove riff builder
            </summary>
            <param name="item">riff builder</param>
            <returns>whether removal worked</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.GetEnumerator">
            <summary>
            Riff builder enumerator
            </summary>
            <returns>Riff builder enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Riff builder enumerator
            </summary>
            <returns>Riff builder enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.Build(System.Random)">
            <summary>
            Build song
            </summary>
            <param name="random">random number generator</param>
            <returns>New Song</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.Build(System.Random,System.Int32)">
            <summary>
            Build song
            </summary>
            <param name="random">random number generator</param>
            <param name="desiredLength">desired length</param>
            <returns>New Song</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.Build(System.Random,ArtificialArt.Audio.Midi.Generator.Modulator,ArtificialArt.Audio.Midi.Generator.TimeFrame)">
            <summary>
            Build song
            </summary>
            <param name="random">random number generator</param>
            <param name="modulator">key modulator</param>
            <param name="timeFrame">time frame for riffs to switch on and off</param>
            <returns>New Song</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.Build(System.Random,ArtificialArt.Audio.Midi.Generator.Modulator,ArtificialArt.Audio.Midi.Generator.TimeFrame,System.Int32)">
            <summary>
            Build song
            </summary>
            <param name="random">random number generator</param>
            <param name="modulator">key modulator</param>
            <param name="timeFrame">time frame for riffs to switch on and off</param>
            <param name="desiredLength">desired length (how many bar)</param>
            <returns>New Song</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.Item(System.Int32)">
            <summary>
            Get riff builder at index
            </summary>
            <param name="index">index</param>
            <returns>riff builder at index</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.Count">
            <summary>
            How many riff builder
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.RiffPackBuilder.IsReadOnly">
            <summary>
            Whether riff pack builder is read only
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.CompositeMetaRiffPack">
            <summary>
            Composite implementation of metaRiffPack. Used to join existing metaRiffsPacks
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.CompositeMetaRiffPack.metaRiffList">
            <summary>
            Internal list of metaRiffs
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.CompositeMetaRiffPack.#ctor(ArtificialArt.Audio.Midi.Generator.MetaRiffPack,ArtificialArt.Audio.Midi.Generator.MetaRiffPack)">
            <summary>
            Join two metaRiff packs
            </summary>
            <param name="metaRiffPack1">metaRiff pack 1</param>
            <param name="metaRiffPack2">metaRiff pack 2</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.CompositeMetaRiffPack.#ctor(ArtificialArt.Audio.Midi.Generator.MetaRiff)">
            <summary>
            Create metaRiffPack from existing metaRiff
            </summary>
            <param name="metaRiff">existing metaRiff</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.CompositeMetaRiffPack.#ctor">
            <summary>
            Create metaRiffPack from existing metaRiff
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.CompositeMetaRiffPack.BuildMetaRiffList">
            <summary>
            Internal list of metaRiffs
            </summary>
            <returns>Internal list of metaRiffs</returns>
        </member>
        <member name="T:ArtificialArt.WebServices.BabelFishTranslationBot">
            <summary>
            Represents BabelFish as a remote translation bot
            </summary>
        </member>
        <member name="F:ArtificialArt.WebServices.BabelFishTranslationBot.webBot">
            <summary>
            Primitive web bot
            </summary>
        </member>
        <member name="F:ArtificialArt.WebServices.BabelFishTranslationBot.postData">
            <summary>
            Post data
            </summary>
        </member>
        <member name="M:ArtificialArt.WebServices.BabelFishTranslationBot.#ctor">
            <summary>
            Build BabelFish translation bot
            </summary>
        </member>
        <member name="M:ArtificialArt.WebServices.BabelFishTranslationBot.Translate(System.String,System.String,System.String)">
            <summary>
            Translate a string
            May throw TranslationException
            </summary>
            <param name="textSource">text to translate</param>
            <param name="fromLanguageCode">from language</param>
            <param name="toLanguageCode">to language</param>
            <returns>translated text</returns>
        </member>
        <member name="M:ArtificialArt.WebServices.BabelFishTranslationBot.Translate(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean)">
            <summary>
            Translate a chunk of strings
            May throw TranslationException
            </summary>
            <param name="textChunkSource">text to translate</param>
            <param name="fromLanguageCode">from language code</param>
            <param name="toLanguageCode">to language code</param>
            <param name="ignoreChunkSizeMissmatch">ignore chunk size miss match, default: false</param>
            <returns>translated string chunk</returns>
        </member>
        <member name="T:ArtificialArt.Parsing.BracketDefinition">
            <summary>
            Represents a bracket
            </summary>
        </member>
        <member name="F:ArtificialArt.Parsing.BracketDefinition.BeginMarkup">
            <summary>
            Begining markup
            </summary>
        </member>
        <member name="F:ArtificialArt.Parsing.BracketDefinition.EndMarkup">
            <summary>
            End markup
            </summary>
        </member>
        <member name="M:ArtificialArt.Parsing.BracketDefinition.#ctor(System.Char,System.Char)">
            <summary>
            Create a bracket definition
            </summary>
            <param name="beginMarkup">Begining markup</param>
            <param name="endMarkup">End markup</param>
        </member>
        <member name="M:ArtificialArt.Parsing.BracketDefinition.Equals(ArtificialArt.Parsing.BracketDefinition)">
            <summary>
            Whether bracket definitions are equivalent
            </summary>
            <param name="other">other bracket definition</param>
            <returns>Whether bracket definitions are equivalent</returns>
        </member>
        <member name="T:ArtificialArt.Parsing.ExpressionSerializer">
            <summary>
            To convert tree expressions into strings
            </summary>
        </member>
        <member name="M:ArtificialArt.Parsing.ExpressionSerializer.AppendFlatStringRepresentation(System.Text.StringBuilder,ArtificialArt.Parsing.TreeExpression)">
            <summary>
            Append flat string representationt to string builder
            </summary>
            <param name="stringBuilder">string builder</param>
            <param name="treeExpression">tree expression</param>
        </member>
        <member name="T:ArtificialArt.Markov.Probabilities">
            <summary>
            For probability mathematics
            </summary>
        </member>
        <member name="M:ArtificialArt.Markov.Probabilities.GetPonderatedRandom(System.Collections.Generic.Dictionary{System.String,System.Single},System.Random)">
            <summary>
            Get random key from row according to probabilities in value
            </summary>
            <param name="row">row</param>
            <param name="random">random number generator</param>
            <returns>random key from row according to probabilities in value</returns>
        </member>
        <member name="M:ArtificialArt.Markov.Probabilities.GetPonderatedRandom(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Random)">
            <summary>
            Get random key from row according to probabilities in value
            </summary>
            <param name="random">random number generator</param>
            <param name="row">row</param>
            <returns>random key from row according to probabilities in value</returns>
        </member>
        <member name="M:ArtificialArt.Markov.Probabilities.GetPonderatedRandom(System.Collections.Generic.Dictionary{System.Char,System.Int32},System.Random)">
            <summary>
            Get random key from row according to probabilities in value
            </summary>
            <param name="random">random number generator</param>
            <param name="row">row</param>
            <returns>random key from row according to probabilities in value</returns>
        </member>
        <member name="M:ArtificialArt.Markov.Probabilities.GetRandomValue(System.Collections.Generic.IEnumerable{System.Object},System.Random)">
            <summary>
            Get random value from list
            </summary>
            <param name="enumeration">enumeration</param>
            <param name="random">random number generator</param>
            <returns>random value from list</returns>
        </member>
        <member name="T:ArtificialArt.Logic.TrueImplyFalseManager">
            <summary>
            Manages stuff like P->!P, therefore !P, and !P->P, therefor P
            </summary>
        </member>
        <member name="F:ArtificialArt.Logic.TrueImplyFalseManager.negator">
            <summary>
            To negate in a clean way
            </summary>
        </member>
        <member name="M:ArtificialArt.Logic.TrueImplyFalseManager.#ctor(ArtificialArt.Logic.Negator)">
            <summary>
            Manages stuff like P->!P, therefore !P, and !P->P, therefor P
            </summary>
            <param name="negator">To negate in a clean way</param>
        </member>
        <member name="M:ArtificialArt.Logic.TrueImplyFalseManager.BuildTrueImplyFalse(ArtificialArt.Parsing.TreeExpression,ArtificialArt.Logic.LogicDerivation)">
            <summary>
            Create new propositions from "True Imply False"
            </summary>
            <param name="proposition">proposition</param>
            <param name="logicDerivation">expanded logic derivation</param>
            <returns></returns>
        </member>
        <member name="T:ArtificialArt.Logic.SplitAndOperatorManager">
            <summary>
            Creates new proposition by splitting exsting propositions for which the immediate operator is and
            </summary>
        </member>
        <member name="M:ArtificialArt.Logic.SplitAndOperatorManager.BuildSplitAnd(ArtificialArt.Parsing.TreeExpression,ArtificialArt.Logic.LogicDerivation)">
            <summary>
            Creates new proposition by splitting exsting propositions for which the immediate operator is and
            </summary>
            <param name="proposition">source proposition</param>
            <param name="logicDerivation">logic derivation to expand</param>
            <returns>whether it could expand logic derivation</returns>
        </member>
        <member name="T:ArtificialArt.Logic.Negator">
            <summary>
            To negate propositions in a clean way
            </summary>
        </member>
        <member name="M:ArtificialArt.Logic.Negator.Negate(ArtificialArt.Parsing.TreeExpression)">
            <summary>
            Negate an expression in a clean way
            can return null if it's impossible to negate it
            </summary>
            <param name="treeExpression">tree expression to negate</param>
            <returns>new negated tree expression
            can return null if it's impossible to negate it</returns>
        </member>
        <member name="M:ArtificialArt.Logic.Negator.Negate(System.String)">
            <summary>
            Negate or denegated atomic expression
            </summary>
            <param name="atomicExpression">atomic expression</param>
            <returns>negated (or denegated) atomic expression</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.StoppedEventArgs">
            <summary>
            Stopped event arguments
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.StoppedEventArgs.messages">
            <summary>
            Messages
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.StoppedEventArgs.#ctor(System.Collections.ICollection)">
            <summary>
            Stopped event arguments
            </summary>
            <param name="messages">messages</param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.StoppedEventArgs.Messages">
            <summary>
            Messages
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.SysCommonMessageBuilder">
            <summary>
            Provides functionality for building SysCommonMessages.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysCommonMessageBuilder.#ctor">
            <summary>
            Initializes a new instance of the SysCommonMessageBuilder class.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysCommonMessageBuilder.#ctor(ArtificialArt.Audio.Midi.SysCommonMessage)">
            <summary>
            Initializes a new instance of the SysCommonMessageBuilder class 
            with the specified SystemCommonMessage.
            </summary>
            <param name="message">
            The SysCommonMessage to use for initializing the 
            SysCommonMessageBuilder.
            </param>
            <remarks>
            The SysCommonMessageBuilder uses the specified SysCommonMessage to 
            initialize its property values.
            </remarks>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysCommonMessageBuilder.Initialize(ArtificialArt.Audio.Midi.SysCommonMessage)">
            <summary>
            Initializes the SysCommonMessageBuilder with the specified 
            SysCommonMessage.
            </summary>
            <param name="message">
            The SysCommonMessage to use for initializing the 
            SysCommonMessageBuilder.
            </param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysCommonMessageBuilder.Clear">
            <summary>
            Clears the SysCommonMessageBuilder cache.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysCommonMessageBuilder.Build">
            <summary>
            Builds a SysCommonMessage.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysCommonMessageBuilder.Count">
            <summary>
            Gets the number of messages in the SysCommonMessageBuilder cache.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysCommonMessageBuilder.Result">
            <summary>
            Gets the built SysCommonMessage.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysCommonMessageBuilder.Message">
            <summary>
            Gets or sets the SysCommonMessage as a packed integer.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysCommonMessageBuilder.Type">
            <summary>
            Gets or sets the type of SysCommonMessage.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysCommonMessageBuilder.Data1">
            <summary>
            Gets or sets the first data value to use for building the 
            SysCommonMessage.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Data1 is set to a value less than zero or greater than 127.
            </exception>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysCommonMessageBuilder.Data2">
            <summary>
            Gets or sets the second data value to use for building the 
            SysCommonMessage.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Data2 is set to a value less than zero or greater than 127.
            </exception>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.MidiHeaderBuilder">
            <summary>
            Builds a pointer to a MidiHeader structure.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiHeaderBuilder.#ctor">
            <summary>
            Initializes a new instance of the MidiHeaderBuilder.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiHeaderBuilder.Build">
            <summary>
            Builds the pointer to the MidiHeader structure.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiHeaderBuilder.InitializeBuffer(ArtificialArt.Audio.Midi.SysExMessage)">
            <summary>
            Initializes the MidiHeaderBuilder with the specified SysExMessage.
            </summary>
            <param name="message">
            The SysExMessage to use for initializing the MidiHeaderBuilder.
            </param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiHeaderBuilder.Destroy">
            <summary>
            Releases the resources associated with the built MidiHeader pointer.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiHeaderBuilder.Destroy(System.IntPtr)">
            <summary>
            Releases the resources associated with the specified MidiHeader pointer.
            </summary>
            <param name="headerPtr">
            The MidiHeader pointer.
            </param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MidiHeaderBuilder.BufferLength">
            <summary>
            The length of the system exclusive buffer.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MidiHeaderBuilder.Result">
            <summary>
            Gets the pointer to the MidiHeader.
            </summary>
        </member>
        <member name="T:ArtificialArt.Lyrics.VerseFactory">
            <summary>
            Produces verses
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseFactory.defaultLanguageCode">
            <summary>
            Default language code
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseFactory.verseConstructionSettings">
            <summary>
            Construction settings
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseFactory.creationMemory">
            <summary>
            To remember previous verse theme words not to repeat them too often
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseFactory.verseFactoryStraight">
            <summary>
            Straight verse factory
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseFactory.verseFactoryWords">
            <summary>
            Word verse factory
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseFactory.themeLoader">
            <summary>
            Theme loader
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseFactory.languageCode">
            <summary>
            Language code
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.VerseFactory.lyricSourcePath">
            <summary>
            Lyric source directory
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseFactory.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseFactory.Build(ArtificialArt.Lyrics.Verse)">
            <summary>
            Build a verse
            </summary>
            <returns>verse</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseFactory.AddTheme(ArtificialArt.Lyrics.Theme)">
            <summary>
            Add theme to construction settings
            </summary>
            <param name="theme">theme to add</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseFactory.AddTheme(System.String)">
            <summary>
            Add theme to construction settings
            </summary>
            <param name="themeName">theme to add</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseFactory.CensorTheme(ArtificialArt.Lyrics.Theme)">
            <summary>
            Censor a theme in construction settings
            </summary>
            <param name="theme">theme to censor</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseFactory.CensorTheme(System.String)">
            <summary>
            Censor a theme in construction settings
            </summary>
            <param name="themeName">theme to censor</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseFactory.ResetThemes">
            <summary>
            Reset themes
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseFactory.ClearCreationMemory">
            <summary>
            Clear creation memory
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.VerseFactory.ClearThemes">
            <summary>
            Clear desired and undesired themes
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.VerseFactory.DesiredLength">
            <summary>
            Desired length in char for verse
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.VerseFactory.Algorithm">
            <summary>
            Set which algorithm to use
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.VerseFactory.SelectableThemeNameList">
            <summary>
            Theme name list
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.VerseFactory.ThemeList">
            <summary>
            Desired themes
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.VerseFactory.ThemeBlackList">
            <summary>
            Undesired themes
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.VerseFactory.LanguageCode">
            <summary>
            Current language code
            </summary>
        </member>
        <member name="T:ArtificialArt.Logic.AImplyBAndCManager">
            <summary>
            Manages stuff like A->BandC, therefore A->B, A->C
            </summary>
        </member>
        <member name="M:ArtificialArt.Logic.AImplyBAndCManager.BuildAImplyBAndC(ArtificialArt.Parsing.TreeExpression,ArtificialArt.Logic.LogicDerivation)">
            <summary>
            Builds stuff like A->BandC, therefore A->B, A->C
            </summary>
            <param name="proposition">proposition to evaluate</param>
            <param name="logicDerivation">logic derivation to expand</param>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.QuestionAdder">
            <summary>
            Converts affirmations to questions
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionAdder.AddQuestion(System.String)">
            <summary>
            Convert proposition to question
            </summary>
            <param name="proposition">proposition</param>
            <returns>proposition as question</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionAdder.AddDoBefore(System.String)">
            <summary>
            Add word "do" before proposition
            </summary>
            <param name="proposition">proposition</param>
            <returns>proposition with "do" before</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionAdder.AddDoYouThinkBefore(System.String)">
            <summary>
            Add "do you think" before proposition
            </summary>
            <param name="proposition">proposition</param>
            <returns>proposition with "do you think" before</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionAdder.InvertFirstAndSecondWord(System.String)">
            <summary>
            Invert first and second word (which is a modal verb or a question word)
            </summary>
            <param name="proposition">source proposition</param>
            <returns>proposition with inverted 1st and 2nd word</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionAdder.IsSecondWordModalVerbOrQuestionBeginWord(System.String)">
            <summary>
            true: second word is modal verb or question begin word, else: false
            </summary>
            <param name="proposition">proposition</param>
            <returns>true: second word is modal verb or question begin word, else: false</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionAdder.IsFirstWordYouOrI(System.String)">
            <summary>
            Whether first word in proposition is "you" or "I"
            </summary>
            <param name="proposition">proposition</param>
            <returns>Whether first word in proposition is "you" or "I"</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionAdder.AddQuestionMark(System.String)">
            <summary>
            Add question mark to proposition
            </summary>
            <param name="proposition">proposition</param>
            <returns>proposition with question mark</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.ImperativeManager">
            <summary>
            To manage imperative propositions
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.ImperativeManager.IsImperative(System.String)">
            <summary>
            Whether original proposition is imperative
            </summary>
            <param name="originalProposition">original proposition</param>
            <returns>Whether original proposition is imperative</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Sequence">
            <summary>
            Represents a collection of Tracks.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Sequence.loadWorker">
            <summary>
            Load worker
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Sequence.saveWorker">
            <summary>
            Save worker
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Sequence.site">
            <summary>
            Site
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Sequence.disposed">
            <summary>
            Whether sequence disposed
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequence.#ctor">
            <summary>
            Initializes a new instance of the Sequence class.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequence.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Sequence class with the specified division.
            </summary>
            <param name="division">
            The Sequence's division value.
            </param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequence.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Sequence class with the specified
            file name of the MIDI file to load.
            </summary>
            <param name="fileName">
            The name of the MIDI file to load.
            </param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequence.Load(System.String)">
            <summary>
            Loads a MIDI file into the Sequence.
            </summary>
            <param name="fileName">
            The MIDI file's name.
            </param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequence.LoadAsync(System.String)">
            <summary>
            Load a sync
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequence.LoadAsyncCancel">
            <summary>
            Load a sync cancel
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequence.Save(System.String)">
            <summary>
            Saves the Sequence as a MIDI file.
            </summary>
            <param name="fileName">
            The name to use for saving the MIDI file.
            </param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequence.SaveAsync(System.String)">
            <summary>
            Save as sync
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequence.SaveAsyncCancel">
            <summary>
            SaveAs sync cancel
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequence.GetLength">
            <summary>
            Gets the length in ticks of the Sequence.
            </summary>
            <returns>
            The length in ticks of the Sequence.
            </returns>
            <remarks>
            The length in ticks of the Sequence is represented by the Track 
            with the longest length.
            </remarks>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequence.Add(ArtificialArt.Audio.Midi.Track)">
            <summary>
            Add track
            </summary>
            <param name="item">track</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequence.Clear">
            <summary>
            Clear tracks
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequence.Contains(ArtificialArt.Audio.Midi.Track)">
            <summary>
            Whether sequence contains track
            </summary>
            <param name="item">track</param>
            <returns>Whether sequence contains track</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequence.CopyTo(ArtificialArt.Audio.Midi.Track[],System.Int32)">
            <summary>
            Copy to array
            </summary>
            <param name="array">array</param>
            <param name="arrayIndex">array index</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequence.Remove(ArtificialArt.Audio.Midi.Track)">
            <summary>
            Remove track item
            </summary>
            <param name="item">track item to remove</param>
            <returns>whether removal worked</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequence.GetEnumerator">
            <summary>
            Track enumerator
            </summary>
            <returns>Track enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequence.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Sequence.LoadCompleted">
            <summary>
            When load completed
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Sequence.LoadProgressChanged">
            <summary>
            When load progress changed
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Sequence.SaveCompleted">
            <summary>
            When save competed
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Sequence.SaveProgressChanged">
            <summary>
            When save progress changed
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Sequence.Item(System.Int32)">
            <summary>
            Gets the Track at the specified index.
            </summary>
            <param name="index">
            The index of the Track to get.
            </param>
            <returns>
            The Track at the specified index.
            </returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Sequence.Division">
            <summary>
            Gets the Sequence's division value.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Sequence.Format">
            <summary>
            Gets or sets the Sequence's format value.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Sequence.SequenceType">
            <summary>
            Gets the Sequence's type.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Sequence.IsBusy">
            <summary>
            Whether is busy
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Sequence.Count">
            <summary>
            How many tracks in sequence
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Sequence.IsReadOnly">
            <summary>
            Whether sequence is read only
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Sequence.Disposed">
            <summary>
            When is disposed
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Sequence.Site">
            <summary>
            Site
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.SmpteFrameRate">
            <summary>
            Defintes constants representing SMPTE frame rates.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SmpteFrameRate.Smpte24">
            <summary>
            Smpte 24
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SmpteFrameRate.Smpte25">
            <summary>
            Smpte 25
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SmpteFrameRate.Smpte30Drop">
            <summary>
            Smpte 30 drop
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SmpteFrameRate.Smpte30">
            <summary>
            Smpte 30
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.SequenceType">
            <summary>
            The different types of sequences.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SequenceType.Ppqn">
            <summary>
            Ppqn
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SequenceType.Smpte">
            <summary>
            Smpte
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.MidiFileProperties">
            <summary>
            Represents MIDI file properties.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiFileProperties.#ctor">
            <summary>
            Build midi file properties
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiFileProperties.Read(System.IO.Stream)">
            <summary>
            Read
            </summary>
            <param name="strm">stream</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiFileProperties.ReadProperty(System.IO.Stream)">
            <summary>
            Read property
            </summary>
            <param name="strm">strean</param>
            <returns>property</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiFileProperties.Write(System.IO.Stream)">
            <summary>
            Write
            </summary>
            <param name="strm">stream</param>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MidiFileProperties.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MidiFileProperties.TrackCount">
            <summary>
            Track count
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MidiFileProperties.Division">
            <summary>
            Division
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.MidiFileProperties.SequenceType">
            <summary>
            Sequence type
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.MidiFileException">
            <summary>
            Midi file exception
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MidiFileException.#ctor(System.String)">
            <summary>
            Midi file exception
            </summary>
            <param name="message">message</param>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.Note">
            <summary>
            Midi note
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.Note.pitch">
            <summary>
            Pitch
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.Note.length">
            <summary>
            Length
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.Note.riffPosition">
            <summary>
            Riff position
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.Note.velocity">
            <summary>
            Velocity (0 to 127)
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Note.#ctor(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Create note
            </summary>
            <param name="riffPosition">riff position</param>
            <param name="length">length</param>
            <param name="pitch">pitch</param>
            <param name="velocity">velocity</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.Note.Equals(ArtificialArt.Audio.Midi.Generator.Note)">
            <summary>
            Whether note equals other note
            </summary>
            <param name="other">other note</param>
            <returns>Whether note equals other note</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Note.Pitch">
            <summary>
            Pitch (0 to 127)
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Note.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Note.RiffPosition">
            <summary>
            Riff Position
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.Note.Velocity">
            <summary>
            Velocity (from 0 to 127)
            </summary>
        </member>
        <member name="T:ArtificialArt.Lyrics.ThemeFileLoader">
            <summary>
            This class is used to read theme lists from file
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeFileLoader.LoadThemeListFromFile(System.String)">
            <summary>
            Read theme list from file
            </summary>
            <param name="themeFileName">theme file name</param>
            <returns>theme list</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeFileLoader.LoadThemeListFromString(System.String)">
            <summary>
            Read theme list from string
            </summary>
            <param name="themeResource">theme resource as string</param>
            <returns>theme list</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeFileLoader.AddWordListToTheme(System.Collections.Generic.IEnumerable{System.String},ArtificialArt.Lyrics.Theme)">
            <summary>
            Add word list to theme
            </summary>
            <param name="wordList">word list</param>
            <param name="theme">theme</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeFileLoader.GetOrCreateTheme(System.String,System.Collections.Generic.Dictionary{System.String,ArtificialArt.Lyrics.Theme})">
            <summary>
            Returns theme from name
            </summary>
            <param name="themeName">theme's name</param>
            <param name="themeList">list to look into</param>
            <returns>found theme or new theme</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeFileLoader.IsWordList(System.String)">
            <summary>
            Whether the line is a list of words for a theme
            </summary>
            <param name="line">text line</param>
            <returns>whether the line is a list of words for a theme</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeFileLoader.TrySwitchTheme(System.String,System.String)">
            <summary>
            Try to switch to another theme from line
            </summary>
            <param name="line">line</param>
            <param name="currentThemeName">current theme</param>
            <returns>old theme or new theme</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeFileLoader.ExtractWordList(System.String)">
            <summary>
            Extract word list from line
            </summary>
            <param name="line">line</param>
            <returns>word list from line</returns>
        </member>
        <member name="T:ArtificialArt.Lyrics.LyricSongFactoryCollection">
            <summary>
            Represents a collection of lyric song factories with common source file name
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactoryCollection.defaultLanguageCode">
            <summary>
            Default language code
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactoryCollection.lyricSourceFileName">
            <summary>
            Lyric source file name
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactoryCollection.internalList">
            <summary>
            Internal list of lyric song factories
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactoryCollection.languageCode">
            <summary>
            Language code
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.LyricSongFactoryCollection.lyricSourcePath">
            <summary>
            Lyric source path
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactoryCollection.#ctor(System.String,System.String,System.String)">
            <summary>
            Create lyric song factory collection with one lyric song factory, use AddNew() to enlarge collection
            </summary>
            <param name="lyricSourceFileName">Lyric source file name</param>
            <param name="lyricSourcePath">lyrics source folder</param>
            <param name="languageCode">language code</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactoryCollection.#ctor(ArtificialArt.Lyrics.LyricSongFactory)">
            <summary>
            Create lyric song factory collection from existing lyric song factory
            </summary>
            <param name="lyricSongFactory">lyric song factory</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactoryCollection.AddNew">
            <summary>
            Add new lyric source file name
            <returns>the lyric song factory</returns>
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactoryCollection.Build">
            <summary>
            Build song
            </summary>
            <returns>song</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactoryCollection.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactoryCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="P:ArtificialArt.Lyrics.LyricSongFactoryCollection.Item(System.Int32)">
            <summary>
            Get or set list element at specified index
            </summary>
            <param name="index">index</param>
            <returns>lyric song factory at specified index</returns>
        </member>
        <member name="P:ArtificialArt.Lyrics.LyricSongFactoryCollection.BarCount">
            <summary>
            How many bars in each lyric song factory
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.LyricSongFactoryCollection.Count">
            <summary>
            How many lyric song factory
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.LyricSongFactoryCollection.LineCountPerBar">
            <summary>
            Line count per bar
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.LyricSongFactoryCollection.LanguageCode">
            <summary>
            Current language code
            </summary>
        </member>
        <member name="T:ArtificialArt.Linguistics.WordListFromString">
            <summary>
            Word list created from string
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.WordListFromString.#ctor(System.String)">
            <summary>
            Create word list from string
            </summary>
            <param name="resourceValue">resource value</param>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.QuestionManagerStartingWithQuestionWordPlusSpecialVerb">
            <summary>
            Manages questions that are questions because they begin with question word plus special verb
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.QuestionManagerStartingWithQuestionWordPlusSpecialVerb.specialVerbList">
            <summary>
            Special verb list
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionManagerStartingWithQuestionWordPlusSpecialVerb.IsQuestion(System.String)">
            <summary>
            Whether question is question because it starts with a question word followed by a verb
            </summary>
            <param name="originalProposition"></param>
            <returns></returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.QuestionManagerStartingWithQuestionWordPlusSpecialVerb.RemoveQuestion(System.String)">
            <summary>
            Remove the two first words
            </summary>
            <param name="proposition"></param>
            <returns></returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.RiffIO">
            <summary>
            Saves and loads midi riffs
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffIO.Save(ArtificialArt.Audio.Midi.Generator.IRiff,System.String)">
            <summary>
            Saves riff or riffpacks
            </summary>
            <param name="iRiff">riff</param>
            <param name="xmlFileName">file name</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffIO.Load(System.String)">
            <summary>
            Load riff pack from xml file name
            </summary>
            <param name="xmlFileName">xml file name</param>
            <returns>riff pack</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Sequencer">
            <summary>
            Midi Sequencer
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Sequencer.sequence">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Sequencer.enumerators">
            <summary>
            Enumerators
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Sequencer.dispatcher">
            <summary>
            Dispatcher
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Sequencer.chaser">
            <summary>
            Chaser
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Sequencer.stopper">
            <summary>
            Stopper
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Sequencer.clock">
            <summary>
            Midi internal clock
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Sequencer.tracksPlayingCount">
            <summary>
            Tracks playing count
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Sequencer.lockObject">
            <summary>
            Lock object
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Sequencer.playing">
            <summary>
            Is playing
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Sequencer.disposed">
            <summary>
            Is Disposed
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Sequencer.site">
            <summary>
            Site
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequencer.#ctor">
            <summary>
            Sequencer
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequencer.Finalize">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequencer.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequencer.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequencer.Continue">
            <summary>
            Continue
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequencer.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequencer.OnPlayingCompleted(System.EventArgs)">
            <summary>
            When playing is complete
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequencer.OnDisposed(System.EventArgs)">
            <summary>
            When is disposed
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Sequencer.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Sequencer.PlayingCompleted">
            <summary>
            Playing completed
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Sequencer.ChannelMessagePlayed">
            <summary>
            Channed message played
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Sequencer.SysExMessagePlayed">
            <summary>
            Sys ex message played
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Sequencer.MetaMessagePlayed">
            <summary>
            Meta message played
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Sequencer.Chased">
            <summary>
            When chased
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Sequencer.Stopped">
            <summary>
            When stopped
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Sequencer.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Sequencer.Sequence">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.Sequencer.Disposed">
            <summary>
            When disposed
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Sequencer.Site">
            <summary>
            Site
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.SysExType">
            <summary>
            Defines constants representing various system exclusive message types.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysExType.Start">
            <summary>
            Represents the start of system exclusive message type.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysExType.Continuation">
            <summary>
            Represents the continuation of a system exclusive message.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.SysExMessage">
            <summary>
            Represents MIDI system exclusive messages.
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.SysExMessage.SysExChannelMaxValue">
            <summary>
            Maximum value for system exclusive channels.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysExMessage.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the SysExMessageEventArgs class with the
            specified system exclusive data.
            </summary>
            <param name="data">
            The system exclusive data.
            </param>
            <remarks>
            The system exclusive data's status byte, the first byte in the 
            data, must have a value of 0xF0 or 0xF7.
            </remarks>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysExMessage.GetBytes">
            <summary>
            Get bytes
            </summary>
            <returns>bytes</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysExMessage.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copy to byte array
            </summary>
            <param name="buffer">byte array</param>
            <param name="index">index</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysExMessage.Equals(System.Object)">
            <summary>
            Whether equals other
            </summary>
            <param name="obj">other</param>
            <returns>Whether equals other</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysExMessage.GetHashCode">
            <summary>
            Get hash code
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.SysExMessage.GetEnumerator">
            <summary>
            Byte enumerator
            </summary>
            <returns>Byte enumerator</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysExMessage.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If index is less than zero or greater than or equal to the length 
            of the message.
            </exception>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysExMessage.Length">
            <summary>
            Gets the length of the system exclusive data.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysExMessage.SysExType">
            <summary>
            Gets the system exclusive type.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysExMessage.Status">
            <summary>
            Gets the status value.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.SysExMessage.MessageType">
            <summary>
            Gets the MessageType.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.MessageDispatcher">
            <summary>
            Dispatches IMidiMessages to their corresponding sink.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MessageDispatcher.Dispatch(ArtificialArt.Audio.Midi.IMidiMessage)">
            <summary>
            Dispatches IMidiMessages to their corresponding sink.
            </summary>
            <param name="message">
            The IMidiMessage to dispatch.
            </param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MessageDispatcher.OnChannelMessageDispatched(ArtificialArt.Audio.Midi.ChannelMessageEventArgs)">
            <summary>
            When channel message dispatched
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MessageDispatcher.OnSysExMessageDispatched(ArtificialArt.Audio.Midi.SysExMessageEventArgs)">
            <summary>
            When system ex message dispatched
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MessageDispatcher.OnSysCommonMessageDispatched(ArtificialArt.Audio.Midi.SysCommonMessageEventArgs)">
            <summary>
            When system common message is dispatched
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MessageDispatcher.OnSysRealtimeMessageDispatched(ArtificialArt.Audio.Midi.SysRealtimeMessageEventArgs)">
            <summary>
            When system realtime message dispatched
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.MessageDispatcher.OnMetaMessageDispatched(ArtificialArt.Audio.Midi.MetaMessageEventArgs)">
            <summary>
            When meta message is dispatched
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.MessageDispatcher.ChannelMessageDispatched">
            <summary>
            Channel message dispatched
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.MessageDispatcher.SysExMessageDispatched">
            <summary>
            System ex message dispatched
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.MessageDispatcher.SysCommonMessageDispatched">
            <summary>
            System common message dispatched
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.MessageDispatcher.SysRealtimeMessageDispatched">
            <summary>
            System real time message dispatched
            </summary>
        </member>
        <member name="E:ArtificialArt.Audio.Midi.MessageDispatcher.MetaMessageDispatched">
            <summary>
            Meta message dispatched
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.TimeSignatureBuilder">
            <summary>
            Provides easy to use functionality for time signature MetaMessages.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.TimeSignatureBuilder.#ctor">
            <summary>
            Initializes a new instance of the TimeSignatureBuilder class.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.TimeSignatureBuilder.#ctor(ArtificialArt.Audio.Midi.MetaMessage)">
            <summary>
            Initializes a new instance of the TimeSignatureBuilder class with the 
            specified MetaMessage.
            </summary>
            <param name="message">
            The MetaMessage to use for initializing the TimeSignatureBuilder class.
            </param>
            <exception cref="T:System.ArgumentException">
            If the specified MetaMessage is not a time signature type.
            </exception>
            <remarks>
            The TimeSignatureBuilder uses the specified MetaMessage to 
            initialize its property values.
            </remarks>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.TimeSignatureBuilder.Initialize(ArtificialArt.Audio.Midi.MetaMessage)">
            <summary>
            Initializes the TimeSignatureBuilder with the specified MetaMessage.
            </summary>
            <param name="message">
            The MetaMessage to use for initializing the TimeSignatureBuilder. 
            </param>
            <exception cref="T:System.ArgumentException">
            If the specified MetaMessage is not a time signature type.
            </exception>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.TimeSignatureBuilder.Build">
            <summary>
            Builds the time signature MetaMessage.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.TimeSignatureBuilder.Numerator">
            <summary>
            Gets or sets the numerator.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Numerator is set to a value less than one.
            </exception>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.TimeSignatureBuilder.Denominator">
            <summary>
            Gets or sets the denominator.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Denominator is set to a value less than 2. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Denominator is set to a value that is not a power of 2.
            </exception>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.TimeSignatureBuilder.ClocksPerMetronomeClick">
            <summary>
            Gets or sets the clocks per metronome click.
            </summary>
            <remarks>
            Clocks per metronome click determines how many MIDI clocks occur
            for each metronome click.
            </remarks>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.TimeSignatureBuilder.ThirtySecondNotesPerQuarterNote">
            <summary>
            Gets or sets how many thirty second notes there are for each
            quarter note.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.TimeSignatureBuilder.Result">
            <summary>
            Gets the built message.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.RiffPackPlayerMemory">
            <summary>
            Remembers which notes are being played
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffPackPlayerMemory.listPlayingNote">
            <summary>
            List of notes being played
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.RiffPackPlayerMemory.remainingNotesPerRiff">
            <summary>
            Remaining notes per riff
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackPlayerMemory.Clear">
            <summary>
            Clear riffPlayer memory
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackPlayerMemory.GetPlayingNote(ArtificialArt.Audio.Midi.Generator.Riff)">
            <summary>
            Get note being played from riff
            </summary>
            <param name="riff">riff</param>
            <returns>note being played from riff</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackPlayerMemory.SetPlayingNote(ArtificialArt.Audio.Midi.Generator.Riff,ArtificialArt.Audio.Midi.Generator.Note)">
            <summary>
            Set playing note in riff
            </summary>
            <param name="riff">riff</param>
            <param name="note">playing note in riff</param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackPlayerMemory.GetNoteToPlay(ArtificialArt.Audio.Midi.Generator.Riff,System.Double)">
            <summary>
            Next note to play in riff
            </summary>
            <param name="riff">riff</param>
            <param name="currentTime">current time</param>
            <returns>note to play in riff</returns>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.RiffPackPlayerMemory.GetRemainingNoteList(ArtificialArt.Audio.Midi.Generator.Riff)">
            <summary>
            List of remaining notes in riff
            </summary>
            <param name="riff">riff</param>
            <returns>List of remaining notes</returns>
        </member>
        <member name="T:ArtificialArt.Parsing.TreeExpression">
            <summary>
            Result of parsing by universal parser
            </summary>
        </member>
        <member name="F:ArtificialArt.Parsing.TreeExpression.atomicValue">
            <summary>
            Atomic value
            </summary>
        </member>
        <member name="F:ArtificialArt.Parsing.TreeExpression.leftChild">
            <summary>
            Left child
            </summary>
        </member>
        <member name="F:ArtificialArt.Parsing.TreeExpression.middleOperator">
            <summary>
            Middle operator
            </summary>
        </member>
        <member name="F:ArtificialArt.Parsing.TreeExpression.rightChild">
            <summary>
            Right child
            </summary>
        </member>
        <member name="F:ArtificialArt.Parsing.TreeExpression.stringValue">
            <summary>
            String representation
            </summary>
        </member>
        <member name="F:ArtificialArt.Parsing.TreeExpression.negatedExpression">
            <summary>
            Cached facultative negation of the expression
            (used for optimization)
            </summary>
        </member>
        <member name="F:ArtificialArt.Parsing.TreeExpression._argumentList">
            <summary>
            Lazy initialization, do not use this variable
            </summary>
        </member>
        <member name="M:ArtificialArt.Parsing.TreeExpression.#ctor(System.String)">
            <summary>
            Create tree expression
            </summary>
            <param name="atomicValue">atomic value</param>
        </member>
        <member name="M:ArtificialArt.Parsing.TreeExpression.#ctor(ArtificialArt.Parsing.TreeExpression,System.String,ArtificialArt.Parsing.TreeExpression)">
            <summary>
            Create tree expression
            </summary>
            <param name="leftChild">left child</param>
            <param name="middleOperator">middle operator</param>
            <param name="rightChild">right child</param>
        </member>
        <member name="M:ArtificialArt.Parsing.TreeExpression.Replace(System.String,System.String)">
            <summary>
            Replace occurence of string to something else
            </summary>
            <param name="from">from</param>
            <param name="to">to</param>
        </member>
        <member name="M:ArtificialArt.Parsing.TreeExpression.ToString">
            <summary>
            String representation of the tree
            </summary>
            <returns>String representation of the tree</returns>
        </member>
        <member name="M:ArtificialArt.Parsing.TreeExpression.ToString(System.Boolean)">
            <summary>
            Indented string representation of the tree
            </summary>
            <param name="isIndented">whether the string is indented (default: false)</param>
            <returns>Indented string representation of the tree</returns>
        </member>
        <member name="M:ArtificialArt.Parsing.TreeExpression.ToString(System.Int32,System.Boolean)">
            <summary>
            Indented string representation of the tree
            </summary>
            <param name="isIndented">whether the string is indented (default: false)</param>
            <param name="indentationDepth">indentation depth (default: 0)</param>
            <returns>Indented string representation of the tree</returns>
        </member>
        <member name="M:ArtificialArt.Parsing.TreeExpression.Equals(System.Object)">
            <summary>
            Whether the tree expressions are equal
            </summary>
            <param name="obj">other</param>
            <returns>Whether the tree expressions are equal</returns>
        </member>
        <member name="M:ArtificialArt.Parsing.TreeExpression.GetHashCode">
            <summary>
            Get hash code
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="P:ArtificialArt.Parsing.TreeExpression.AtomicValue">
            <summary>
            Atomic value
            </summary>
        </member>
        <member name="P:ArtificialArt.Parsing.TreeExpression.LeftChild">
            <summary>
            Left child
            </summary>
        </member>
        <member name="P:ArtificialArt.Parsing.TreeExpression.RightChild">
            <summary>
            Right child
            </summary>
        </member>
        <member name="P:ArtificialArt.Parsing.TreeExpression.MiddleOperator">
            <summary>
            Middle operator
            </summary>
        </member>
        <member name="P:ArtificialArt.Parsing.TreeExpression.NegatedExpression">
            <summary>
            Cached facultative negation of the expression
            (used for optimization)
            </summary>
        </member>
        <member name="P:ArtificialArt.Parsing.TreeExpression.ArgumentList">
            <summary>
            List of tree expression supporting this
            </summary>
        </member>
        <member name="T:ArtificialArt.Lyrics.ThemeList">
            <summary>
            Represents a set of themes
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.ThemeList.themeList">
            <summary>
            Internal references to themes
            </summary>
        </member>
        <member name="F:ArtificialArt.Lyrics.ThemeList.themeNameList">
            <summary>
            List of theme names
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeList.SetLanguageCode(System.String,ArtificialArt.Lyrics.ThemeLoader)">
            <summary>
            Set language code
            </summary>
            <param name="languageCode">language code</param>
            <param name="themeLoader">theme loader</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeList.Add(ArtificialArt.Lyrics.Theme)">
            <summary>
            Add a theme
            </summary>
            <param name="theme">theme to add</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeList.Clear">
            <summary>
            Clear theme list
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeList.Contains(ArtificialArt.Lyrics.Theme)">
            <summary>
            Whether the theme manager contains theme
            </summary>
            <param name="theme">theme</param>
            <returns>whether the theme manager contains theme</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeList.CopyTo(ArtificialArt.Lyrics.Theme[],System.Int32)">
            <summary>
            Copy theme list to array
            </summary>
            <param name="array">array</param>
            <param name="arrayIndex">array index</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeList.Remove(ArtificialArt.Lyrics.Theme)">
            <summary>
            Remove theme
            </summary>
            <param name="theme">theme to remove</param>
            <returns>if removal succeeded</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeList.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:ArtificialArt.Lyrics.ThemeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="P:ArtificialArt.Lyrics.ThemeList.Count">
            <summary>
            Count how many themes in theme manager
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.ThemeList.IsReadOnly">
            <summary>
            Whether theme manager is readonly
            </summary>
        </member>
        <member name="P:ArtificialArt.Lyrics.ThemeList.Keys">
            <summary>
            Theme name list
            </summary>
        </member>
        <member name="T:ArtificialArt.Lyrics.LyricSongFactoryIO">
            <summary>
            Saves and loads lyric song factories
            </summary>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactoryIO.Save(ArtificialArt.Lyrics.ILyricSongFactory,System.String)">
            <summary>
            Save lyric song factory
            </summary>
            <param name="iLyricSongFactory">lyric song factory</param>
            <param name="xmlFileName">xml file name</param>
        </member>
        <member name="M:ArtificialArt.Lyrics.LyricSongFactoryIO.Load(System.String,System.String)">
            <summary>
            Load song factory collection from xml file
            </summary>
            <param name="xmlFileName">xml file name</param>
            <param name="lyricSourcePath">lyric source path (folder)</param>
            <returns>song factory collection</returns>
        </member>
        <member name="T:ArtificialArt.Logic.LogicDerivationNoConclusionException">
            <summary>
            Thrown when impossible to solve a logic problem
            </summary>
        </member>
        <member name="M:ArtificialArt.Logic.LogicDerivationNoConclusionException.#ctor(System.String)">
            <summary>
            Thrown when impossible to solve a logic problem
            </summary>
            <param name="message">message</param>
        </member>
        <member name="T:ArtificialArt.Linguistics.KeepCaseReplacer">
            <summary>
            Replace words in string while keeping original case structure
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.KeepCaseReplacer.ReplaceWord(System.String,System.String,System.String)">
            <summary>
            replace words in string while keeping original case structure
            </summary>
            <param name="original">original string</param>
            <param name="from">string to replace</param>
            <param name="to">replace to</param>
            <returns>String with replaced words with case structure kept</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.KeepCaseReplacer.ApplyWordCaseStructureToText(System.String,System.String)">
            <summary>
            Take a string and apply word case structure from another
            </summary>
            <param name="targetText">string to modify</param>
            <param name="sourceText">string to take case from</param>
            <returns>new string with modified case</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.KeepCaseReplacer.ApplyWordCaseStructureToWord(System.String,System.String)">
            <summary>
            Take a word and apply case structure of another word
            </summary>
            <param name="targetWord">word to modify</param>
            <param name="sourceWord">word to take case structure</param>
            <returns>modified word with the other word's case structure</returns>
        </member>
        <member name="T:ArtificialArt.Linguistics.English.NtManager">
            <summary>
            Manages words like "don't" and "didn't" and "doesn't"
            </summary>
        </member>
        <member name="F:ArtificialArt.Linguistics.English.NtManager.ntAbleWordList">
            <summary>
            List of words for which we can add "n't"
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.NtManager.#ctor">
            <summary>
            Create an n't manager
            </summary>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.NtManager.RemoveNt(System.String)">
            <summary>
            Remove words like "don't" and "didn't" and "doesn't"
            </summary>
            <param name="originalText">original text</param>
            <returns>original text with removed occurence of don't, didn't or doesn't</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.NtManager.RemoveNt(System.String,System.Int32)">
            <summary>
            Remove n't from words like "don't" and "didn't" and "doesn't"
            </summary>
            <param name="originalText">original text</param>
            <param name="desiredRemoveCount">how many times we remove it (default: 0 as infinite)</param>
            <returns>original text with removed occurence of don't, didn't or doesn't</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.NtManager.ContainsNtAbleWord(System.String)">
            <summary>
            Whether string contains words for which "n't" can be added
            </summary>
            <param name="text">string to analyze</param>
            <returns>Whether string contains words for which "n't" can be added</returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.NtManager.AddNt(System.String,System.Int32)">
            <summary>
            Add "n't" to word from original text
            </summary>
            <param name="text">original text</param>
            <param name="desiredChangeCount">how many times to do it (0: infinite)</param>
            <returns></returns>
        </member>
        <member name="M:ArtificialArt.Linguistics.English.NtManager.AddDontBeforeFirstVerb(System.String)">
            <summary>
            Add don't before first verb
            </summary>
            <param name="text">text to modify</param>
            <returns>modified text</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.TrackWriter">
            <summary>
            Writes a Track to a Stream.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.TrackWriter.Track">
            <summary>
            Gets or sets the Track to write to the Stream.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.TrackReader">
            <summary>
            Reads a track from a stream.
            </summary>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.ChannelMessageBuilder">
            <summary>
            Provides functionality for building ChannelMessages.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelMessageBuilder.#ctor">
            <summary>
            Initializes a new instance of the ChannelMessageBuilder class.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelMessageBuilder.#ctor(ArtificialArt.Audio.Midi.ChannelMessage)">
            <summary>
            Initializes a new instance of the ChannelMessageBuilder class with
            the specified ChannelMessageEventArgs.
            </summary>
            <param name="message">
            The ChannelMessageEventArgs to use for initializing the ChannelMessageBuilder.
            </param>
            <remarks>
            The ChannelMessageBuilder uses the specified ChannelMessageEventArgs to 
            initialize its property values.
            </remarks>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelMessageBuilder.Initialize(ArtificialArt.Audio.Midi.ChannelMessage)">
            <summary>
            Initializes the ChannelMessageBuilder with the specified 
            ChannelMessageEventArgs.
            </summary>
            <param name="message">
            The ChannelMessageEventArgs to use for initializing the ChannelMessageBuilder.
            </param>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelMessageBuilder.Clear">
            <summary>
            Clears the ChannelMessageEventArgs cache.
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.ChannelMessageBuilder.Build">
            <summary>
            Builds a ChannelMessageEventArgs.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.ChannelMessageBuilder.Count">
            <summary>
            Gets the number of messages in the ChannelMessageEventArgs cache.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.ChannelMessageBuilder.Result">
            <summary>
            Gets the built ChannelMessageEventArgs.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.ChannelMessageBuilder.Message">
            <summary>
            Gets or sets the ChannelMessageEventArgs as a packed integer. 
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.ChannelMessageBuilder.Command">
            <summary>
            Gets or sets the Command value to use for building the 
            ChannelMessageEventArgs.
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.ChannelMessageBuilder.MidiChannel">
            <summary>
            Gets or sets the MIDI channel to use for building the 
            ChannelMessageEventArgs.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            MidiChannel is set to a value less than zero or greater than 15.
            </exception>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.ChannelMessageBuilder.Data1">
            <summary>
            Gets or sets the first data value to use for building the 
            ChannelMessageEventArgs.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Data1 is set to a value less than zero or greater than 127.
            </exception>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.ChannelMessageBuilder.Data2">
            <summary>
            Gets or sets the second data value to use for building the 
            ChannelMessageEventArgs.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Data2 is set to a value less than zero or greater than 127.
            </exception>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.DrumVelocityHacker">
            <summary>
            To reduce volume of cymbals and stuff like that
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.DrumVelocityHacker.internalMap">
            <summary>
            Key: midi pitch, Value: multiplicator used for number hacking
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.DrumVelocityHacker.HackVelocity(System.Int32,System.Int32)">
            <summary>
            Hack velocity for current note
            </summary>
            <param name="pitch">midi pitch</param>
            <param name="velocity">current velocity</param>
            <returns>hacked velocity</returns>
        </member>
        <member name="T:ArtificialArt.Audio.Midi.Generator.MetaSongBuilder">
            <summary>
            MetaSong builder
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.MetaSongBuilder.modulationStrength">
            <summary>
            Modulation strength: 0: none (pop 1: full (modern jazz)
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.MetaSongBuilder.metaRiffPack">
            <summary>
            MetaRiff pack
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.MetaSongBuilder.modulatorBuilder">
            <summary>
            To build key modulators
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.MetaSongBuilder.timeFrameBuilder">
            <summary>
            To build time frames
            </summary>
        </member>
        <member name="F:ArtificialArt.Audio.Midi.Generator.MetaSongBuilder.barCount">
            <summary>
            How many bars in total
            </summary>
        </member>
        <member name="M:ArtificialArt.Audio.Midi.Generator.MetaSongBuilder.Build(System.Random,ArtificialArt.Audio.Midi.Generator.PredefinedGenerator,ArtificialArt.Audio.Midi.Generator.MetaRiffPack)">
            <summary>
            Build metaSong
            </summary>
            <param name="random">random number generator</param>
            <param name="generator">pre defined generator</param>
            <param name="metaRiffPack">meta riff pack</param>
            <returns>MetaSong</returns>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.MetaSongBuilder.ModulationStrength">
            <summary>
            Desired key modulation strength: 0: pop (none) 1: classic/jazz full
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.MetaSongBuilder.MetaRiffPack">
            <summary>
            MetaRiffPack to use to create MetaSongs
            </summary>
        </member>
        <member name="P:ArtificialArt.Audio.Midi.Generator.MetaSongBuilder.BarCount">
            <summary>
            How many bar you want
            </summary>
        </member>
    </members>
</doc>
